{
    "openapi": "3.1.0",
    "info": {
        "title": "AngusGM RESTFul OpenAPI Documentation",
        "description": "AngusGM OpenAPI Documentation is a comprehensive, standards-compliant technical reference  that provides detailed specifications for all API endpoints, including authentication methods,  request/response schemas (with JSON/XML examples), HTTP status codes, error handling patterns, and interactive testing capabilities through Swagger UI integration, designed to empower developers  with version-controlled documentation for seamless third-party system integration.\n"
    },
    "servers": [
        {
            "url": "http://192.168.0.70:1806",
            "description": "Generated server url",
            "emptyContent": false,
            "notEmptyContent": true
        }
    ],
    "security": [
        {
            "UserHttpBearer": []
        },
        {
            "UserOAuth2Bearer": []
        }
    ],
    "tags": [
        {
            "name": "App",
            "description": "Manages application configurations and lifecycle processes."
        },
        {
            "name": "SettingTenantQuota",
            "description": "Assigns and initializes tenant resource quotas based on predefined policies or payment order."
        },
        {
            "name": "Setting",
            "description": "Centralizes system-wide settings for unified control and consistency."
        },
        {
            "name": "Tenant",
            "description": "Unified tenant management. Centralizes tenant account controls, configurations, and initialize access permissions, etc."
        },
        {
            "name": "SettingUser",
            "description": "Provides user-specific configuration access for personalized settings within authorized limits."
        },
        {
            "name": "MessageCurrent",
            "description": "Manages current individual user interactions with messages, including deletion, read status, and retrieval."
        },
        {
            "name": "AuthUser",
            "description": "Administers OAuth2 user identities and authorization grants."
        },
        {
            "name": "AppOrgAuth",
            "description": "Retrieves user-specific application access permissions within an organization."
        },
        {
            "name": "AuthPolicy",
            "description": "Provides a unified entry for authorization policies management. Authorization policies control access to resources and define permissions for users and applications."
        },
        {
            "name": "ServiceApi",
            "description": "Provides a unified entry for managing Angus series application services and associated apis."
        },
        {
            "name": "AuthUserToken",
            "description": "Controls user token issuance, validation, and revocation."
        },
        {
            "name": "TORole",
            "description": "Operational role management. Streamlines organizational efficiency by defining responsibilities, coordinating workflows, and aligning permissions with business objectives."
        },
        {
            "name": "AuthPolicyFunc",
            "description": "Provides a unified entry for querying the relationship between functions (button,  menus, panel) and authorization policies."
        },
        {
            "name": "EventTemplate",
            "description": "This category handles event template configurations, including predefined settings for receivers, notification channels."
        },
        {
            "name": "Notice",
            "description": "Application (or system) notice management, used for delivers real-time push and updates across application to inform users of critical events, required actions, or information changes."
        },
        {
            "name": "UserCurrent",
            "description": "Personal center current user operation api entry."
        },
        {
            "name": "Email",
            "description": "Handles email message delivery operations, and audit logging for tracking sent communications."
        },
        {
            "name": "AuthPolicyGroup",
            "description": "Provides a unified entry for querying the relationship between groups and authorization policies."
        },
        {
            "name": "User",
            "description": "Unified user management entry for the system."
        },
        {
            "name": "EmailTemplate",
            "description": "Standardizes email content creation through reusable templates with dynamic variables and multi-language support, maintaining brand consistency and operational efficiency."
        },
        {
            "name": "OperationLog",
            "description": "Provides a unified api for query user operation logs."
        },
        {
            "name": "TenantCertAudit",
            "description": "Verifies and audits tenant identity documents to ensure compliance and authenticity."
        },
        {
            "name": "TenantCertRecognize",
            "description": "Validates official IDs or business licenses via third-party APIs for automated authentication."
        },
        {
            "name": "AnalysisCustomization",
            "description": "Customized definition statistical analysis implementation apis, used to query supported analysis resource definition information and to retrieve analysis and statistical information."
        },
        {
            "name": "AuthPolicyDept",
            "description": "Provides a unified entry for querying the relationship between departments and authorization policies."
        },
        {
            "name": "DeptUser",
            "description": "Controls department-to-user membership mappings to regulate user visibility and access privileges based on organizational departments."
        },
        {
            "name": "Client",
            "description": "Manages OAuth2 client registrations. The OAuth2 client acts on behalf of the user to request resource access permissions and securely exchange credentials for access tokens to interact with protected APIs."
        },
        {
            "name": "UserGroup",
            "description": "Controls user-to-group membership mappings to regulate user visibility and access privileges based on organizational groups."
        },
        {
            "name": "UserDept",
            "description": "Controls user-to-department membership mappings to regulate user visibility and access privileges based on organizational departments."
        },
        {
            "name": "EmailServer",
            "description": "Email server configuration management, authentication protocols, and delivery policies to ensure reliable, compliant email communication across systems."
        },
        {
            "name": "UserDirectory",
            "description": "User directory service management for system LDAP unified authentication login."
        },
        {
            "name": "Event",
            "description": "enable retrieval of historical event records and associated channel configurations. Users can filter, sort, and paginate event logs, while also querying configured event channels to audit event routing and processing workflows."
        },
        {
            "name": "SmsTemplate",
            "description": "Standardizes sms content creation through reusable templates with dynamic variables and multi-language support, maintaining brand consistency and operational efficiency."
        },
        {
            "name": "ApiLog",
            "description": "Inspects recorded API transaction details for auditing or debugging."
        },
        {
            "name": "SystemLog",
            "description": "Provides a unified entry for managing system logs (/actuator/systemlog)."
        },
        {
            "name": "Service",
            "description": "Provides a unified entry for managing Angus series application services."
        },
        {
            "name": "SettingTenant",
            "description": "Manages tenant-level configurations to customize shared settings across their ecosystem."
        },
        {
            "name": "AuthPolicyApp",
            "description": "Provides a unified entry for querying the relationship between applications and authorization policies."
        },
        {
            "name": "ServiceDiscovery",
            "description": "Provides a unified entry for querying AngusDiscovery (Service Registration Center) services and instances information."
        },
        {
            "name": "EventChannel",
            "description": "Manage event notification channels such as Webhooks, WeChat robots, and DingTalk robots."
        },
        {
            "name": "UserTag",
            "description": "Assigns tags to user for resource categorization, or query access control grouping."
        },
        {
            "name": "Country",
            "description": "Query for supported country entrances."
        },
        {
            "name": "DeptTag",
            "description": "Assigns tags to department for resource categorization, or query access control grouping."
        },
        {
            "name": "GroupUser",
            "description": "Controls group-to-user membership mappings to regulate user visibility and access privileges based on organizational groups."
        },
        {
            "name": "AuthPolicyTenant",
            "description": "Provides a unified entry for querying the relationship between tenant, application and authorization policies."
        },
        {
            "name": "AppOpen",
            "description": "Enable automated onboarding and configuration of applications, granting authorized access to resources based on organizational/user permissions while enforcing security policies."
        },
        {
            "name": "TenantSign",
            "description": "Processes secure tenant account termination with data cleanup and permission revocation."
        },
        {
            "name": "MessageCenter",
            "description": "Message center unified message dispatch. Enables centralized message distribution across multiple users from a single api."
        },
        {
            "name": "AppFuncTag",
            "description": "Provides tags management operation of application function (including application, menus, button and panel)."
        },
        {
            "name": "Message",
            "description": "Handles the lifecycle (send, delete, query) and targeted distribution of messages to diverse organizational entities."
        },
        {
            "name": "AppFunc",
            "description": "Organizes system function (menus, button, panel) and permission assignments."
        },
        {
            "name": "AppTag",
            "description": "Assigns and categorizes applications using metadata tags."
        },
        {
            "name": "Sms",
            "description": "Handles sms message delivery operations, and audit logging for tracking sent communications."
        },
        {
            "name": "Dept",
            "description": "Manages department organizational unit creation, modification, and hierarchical structure maintenance, etc."
        },
        {
            "name": "MessageCenterOnline",
            "description": "Monitors real-time user online statuses, such as querying online users or forced logouts."
        },
        {
            "name": "SystemToken",
            "description": "System access tokens are digital \"ID cards\" that temporarily grant users or apps specific permissions to access systems or data. They act like a secure, time-limited passcode—unlike traditional passwords, tokens verify identity AND control exactly what actions are allowed (e.g. \"read-only access for 1 hour\")."
        },
        {
            "name": "CountryDistrict",
            "description": "Query for supported district entrances."
        },
        {
            "name": "SmsChannel",
            "description": "Provides management for third-party SMS channel configuration. If the SMS cannot be sent, please confirm whether the corresponding plugin for the SMS channel is installed or if the SMS template is correct."
        },
        {
            "name": "Group",
            "description": "Manages group organizational unit creation, modification, and status maintenance, etc."
        },
        {
            "name": "CombinedNotice",
            "description": "Provides a unified entry for users to send messages, such as in-site message, SMS, and email."
        },
        {
            "name": "GroupTag",
            "description": "Assigns tags to group for resource categorization, or query access control grouping."
        },
        {
            "name": "Api",
            "description": "Controls API endpoint definitions and access policies."
        },
        {
            "name": "TOUserRole",
            "description": "Provides a unified entry for querying or authorizing the relationship between users and operational roles."
        },
        {
            "name": "AuthPolicyUser",
            "description": "Provides a unified entry for querying the relationship between users and authorization policies."
        },
        {
            "name": "TOUser",
            "description": "Provides an entry for managing operational users in the cloud service edition (SaaS)."
        }
    ],
    "paths": {
        "/api/v1/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Query the list of user.",
                "operationId": "user:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fullName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mobile",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "source",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PLATFORM_SIGNUP",
                                "INVITATION_CODE_SIGNUP",
                                "BACKGROUND_SIGNUP",
                                "BACKGROUND_ADDED",
                                "THIRD_PARTY_LOGIN",
                                "LDAP_SYNCHRONIZE"
                            ]
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sysAdmin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultUserListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Replace user.",
                "operationId": "user:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Add user.",
                "operationId": "user:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete users.",
                "operationId": "user:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "Update user.",
                "operationId": "user:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/{id}/tag": {
            "get": {
                "tags": [
                    "UserTag"
                ],
                "summary": "Query the tags list of user.",
                "operationId": "user:tag:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultOrgTagTargetVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "UserTag"
                ],
                "summary": "Replace the tags of user.",
                "operationId": "user:tag:replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "UserTag"
                ],
                "summary": "Add the tags to user.",
                "operationId": "user:tag:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserTag"
                ],
                "summary": "Delete the tags of user.",
                "operationId": "user:tag:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/{id}/group": {
            "get": {
                "tags": [
                    "UserGroup"
                ],
                "summary": "Query the groups list of user.",
                "operationId": "user:group:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "groupId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "groupName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultUserGroupVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "UserGroup"
                ],
                "summary": "Replace the groups of user.",
                "operationId": "user:group:replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Group ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "UserGroup"
                ],
                "summary": "Add the user to groups.",
                "operationId": "user:group:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Group ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserGroup"
                ],
                "summary": "Remove the user from groups.",
                "operationId": "user:group:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "groupIds",
                        "in": "query",
                        "description": "Group ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/{id}/dept": {
            "get": {
                "tags": [
                    "UserDept"
                ],
                "summary": "Query the departments list of user.",
                "operationId": "user:dept:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "deptId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "deptName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultUserDeptVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "UserDept"
                ],
                "summary": "Replace the departments of user.",
                "operationId": "user:dept:replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserDeptTo"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "UserDept"
                ],
                "summary": "Add the departments of user.",
                "operationId": "user:dept:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Department ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserDept"
                ],
                "summary": "Remove the departments of user.",
                "operationId": "user:dept:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "deptIds",
                        "in": "query",
                        "description": "Department ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/directory": {
            "get": {
                "tags": [
                    "UserDirectory"
                ],
                "summary": "Query the list of user directory.",
                "operationId": "user:directory:list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListUserDirectoryDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "UserDirectory"
                ],
                "summary": "Replace user directory.",
                "operationId": "user:directory:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDirectoryReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "UserDirectory"
                ],
                "summary": "Add user directory.",
                "operationId": "user:directory:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDirectoryAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/directory/{id}/sync": {
            "put": {
                "tags": [
                    "UserDirectory"
                ],
                "summary": "Synchronize the users and groups from user directory.",
                "operationId": "user:directory:sync",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Directory id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Synchronize successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUserDirectorySyncVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/directory/sync": {
            "put": {
                "tags": [
                    "UserDirectory"
                ],
                "summary": "Synchronize the users and groups from user directories.",
                "operationId": "user:directories:sync",
                "responses": {
                    "200": {
                        "description": "Synchronize successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultMapStringUserDirectorySyncVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/to/role": {
            "get": {
                "tags": [
                    "TORole"
                ],
                "summary": "Query the list of operation role.",
                "operationId": "to:role:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultTORoleVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "TORole"
                ],
                "summary": "Replace operation roles.",
                "operationId": "to:role:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TORoleReplaceDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "TORole"
                ],
                "summary": "Add operation roles.",
                "operationId": "to:role:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TORoleAddDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "TORole"
                ],
                "summary": "Delete operation roles.",
                "operationId": "to:role:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "TORole"
                ],
                "summary": "Update operation roles.",
                "operationId": "to:role:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TORoleUpdateDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Query the list of tenant.",
                "operationId": "tenant:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "no",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PERSONAL",
                                "ENTERPRISE",
                                "GOVERNMENT",
                                "UNKNOWN"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "DISABLED",
                                "CANCELLING",
                                "CANCELED",
                                "ENABLED"
                            ]
                        }
                    },
                    {
                        "name": "realNameStatus",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NOT_SUBMITTED",
                                "AUDITING",
                                "AUDITED",
                                "FAILED_AUDIT"
                            ]
                        }
                    },
                    {
                        "name": "locked",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "applyCancelDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "lastLockDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "lockStartDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "lockEndDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultTenantVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Replace tenant.",
                "operationId": "tenant:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Add tenant.",
                "operationId": "tenant:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Update tenant.",
                "operationId": "tenant:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "Replace setting value.",
                "operationId": "setting:value:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingValueReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/tester/event": {
            "get": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Query the AngusTester event setting of the current tenant.",
                "operationId": "setting:tenant:tester:event:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListTesterEvent"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Replace the AngusTester event setting of the current tenant.",
                "operationId": "setting:tenant:tester:event:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TesterEvent"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/security": {
            "get": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Query security setting of the current tenant.",
                "operationId": "setting:tenant:security:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultSecurityTo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Replace security setting of the current tenant.",
                "operationId": "setting:tenant:security:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecurityTo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/quota": {
            "get": {
                "tags": [
                    "SettingTenantQuota"
                ],
                "summary": "Query the quota list of tenant.",
                "operationId": "setting:tenant:quota:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allowChange",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultTenantQuotaDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "SettingTenantQuota"
                ],
                "summary": "Replace the quotas of tenant.",
                "operationId": "setting:tenant:quota:replace:batch",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/QuotaReplaceDto"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/quota/{name}/{quota}": {
            "put": {
                "tags": [
                    "SettingTenantQuota"
                ],
                "summary": "Replace the quota of tenant.",
                "operationId": "setting:tenant:quota:replace",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Tenant quota resource name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "quota",
                        "in": "path",
                        "description": "Tenant quota value",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/quota/{name}/new/init": {
            "put": {
                "tags": [
                    "SettingTenantQuota"
                ],
                "summary": "Initialize new quotas for all tenants.",
                "operationId": "setting:tenant:quota:new:init",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Tenant quota resource name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultLong"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/locale": {
            "get": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Query the locale setting of the current tenant.",
                "operationId": "setting:tenant:locale:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultLocaleTo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Replace the locale setting of the current tenant.",
                "operationId": "setting:tenant:locale:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantLocaleReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/indicator/stability": {
            "get": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Query the default platform stability indicator of the current tenant.",
                "operationId": "setting:tenant:indicator:stability:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultStabilityTo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Replace the default platform stability indicators of the current tenant.",
                "operationId": "setting:tenant:indicator:stability:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StabilityTo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/indicator/perf": {
            "get": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Query the default platform performance indicator of the current tenant.",
                "operationId": "setting:indicator:perf:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPerfTo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Replace the default platform performance indicators of the current tenant.",
                "operationId": "setting:tenant:indicator:perf:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PerfTo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/indicator/func": {
            "get": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Query the default platform functionality indicator of the current tenant.",
                "operationId": "setting:indicator:func:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultFuncTo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Replace the default platform functionality indicators of the current tenant.",
                "operationId": "setting:tenant:indicator:func:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FuncTo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/apis/proxy": {
            "get": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Query the api proxy setting of the current tenant.",
                "operationId": "setting:tenant:proxy:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultTenantServerApiProxyTo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Replace the api proxy setting of the current tenant.",
                "operationId": "setting:tenant:proxy:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantServerApiProxyTo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service": {
            "get": {
                "tags": [
                    "Service"
                ],
                "summary": "Query the list of service.",
                "operationId": "service:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "source",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BACK_ADD",
                                "EUREKA"
                            ]
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultServiceVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Service"
                ],
                "summary": "Replace services.",
                "operationId": "service:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Service"
                ],
                "summary": "Add services.",
                "operationId": "service:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Service"
                ],
                "summary": "Delete services.",
                "operationId": "service:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Service"
                ],
                "summary": "Update services.",
                "operationId": "service:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/read/current": {
            "put": {
                "tags": [
                    "MessageCurrent"
                ],
                "summary": "Submit the read status of message.",
                "operationId": "message:read:current",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/group": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Query the list of group.",
                "operationId": "group:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultGroupListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Group"
                ],
                "summary": "Replace groups.",
                "operationId": "group:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GroupReplaceDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Group"
                ],
                "summary": "Add groups.",
                "operationId": "group:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GroupAddDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Group"
                ],
                "summary": "Delete groups.",
                "operationId": "group:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Group"
                ],
                "summary": "Update groups.",
                "operationId": "group:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GroupUpdateDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/group/{id}/tag": {
            "get": {
                "tags": [
                    "GroupTag"
                ],
                "summary": "Query the tags list of group.",
                "operationId": "group:tag:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultOrgTagTargetVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "GroupTag"
                ],
                "summary": "Replace the tags of group.",
                "operationId": "group:tag:replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "GroupTag"
                ],
                "summary": "Add the tags of group.",
                "operationId": "group:tag:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "GroupTag"
                ],
                "summary": "Delete the tags of group.",
                "operationId": "group:tag:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/template": {
            "get": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Query the list of event template.",
                "operationId": "event:template:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "eventCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BUSINESS",
                                "SECURITY",
                                "QUOTA",
                                "SYSTEM",
                                "OPERATION",
                                "PROTOCOL",
                                "API",
                                "NOTICE",
                                "OTHER"
                            ]
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultEventTemplateVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Replace event template.",
                "operationId": "event:template:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTemplateReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Add event template.",
                "operationId": "event:template:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTemplateAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/template/receiver": {
            "put": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Replace the receiver of event template.",
                "operationId": "event:template:receiver:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTemplateReceiverDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/template/channel": {
            "put": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Replace the receive channel of event template.",
                "operationId": "event:template:channel:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTemplateChannelReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/channel": {
            "put": {
                "tags": [
                    "EventChannel"
                ],
                "summary": "Replace receive event channel.",
                "operationId": "event:channel:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventChannelReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "EventChannel"
                ],
                "summary": "Add receive event channel.",
                "operationId": "event:channel:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventChannelAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Retrieved successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/email/server": {
            "get": {
                "tags": [
                    "EmailServer"
                ],
                "summary": "Query the list of email server.",
                "operationId": "email:server:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "protocol",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SMTP",
                                "POP3",
                                "IMAP"
                            ]
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultServerDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "EmailServer"
                ],
                "summary": "Replace email server.",
                "operationId": "email:server:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServerReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "EmailServer"
                ],
                "summary": "Add email server.",
                "operationId": "email:server:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServerAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "EmailServer"
                ],
                "summary": "Delete email server.",
                "operationId": "email:server:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 10,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "EmailServer"
                ],
                "summary": "Update email server.",
                "operationId": "email:server:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServerUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/dept": {
            "get": {
                "tags": [
                    "Dept"
                ],
                "summary": "Query the list of department.",
                "operationId": "dept:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Department id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Department id."
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Department code.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Department code."
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Department name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Department name."
                        }
                    },
                    {
                        "name": "pid",
                        "in": "query",
                        "description": "Parent department id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Parent department id."
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Department level.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Department level."
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "description": "Department association tag id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Department association tag id."
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "description": "Department creation user id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Department creation user id."
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "description": "Department creation date.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Department creation date."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultDeptListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Dept"
                ],
                "summary": "Replace departments.",
                "operationId": "dept:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DeptReplaceDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Dept"
                ],
                "summary": "Add departments.",
                "operationId": "dept:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DeptAddDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dept"
                ],
                "summary": "Delete departments.",
                "operationId": "dept:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Department ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Dept"
                ],
                "summary": "Update departments.",
                "operationId": "dept:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DeptUpdateDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/dept/{id}/user/head": {
            "put": {
                "tags": [
                    "DeptUser"
                ],
                "summary": "Replace department head, there can only be one department head.",
                "operationId": "dept:head:replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeptHeadReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/dept/{id}/tag": {
            "get": {
                "tags": [
                    "DeptTag"
                ],
                "summary": "Query the tags list of department.",
                "operationId": "dept:tag:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultOrgTagTargetVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "DeptTag"
                ],
                "summary": "Replace the tags of department.",
                "operationId": "department:tag:replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "DeptTag"
                ],
                "summary": "Add the tags of department.",
                "operationId": "dept:tag:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DeptTag"
                ],
                "summary": "Delete the tags of department.",
                "operationId": "dept:tag:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/client": {
            "get": {
                "tags": [
                    "Client"
                ],
                "summary": "Query the list of oauth2 registered client.",
                "operationId": "client:list",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ClientFindDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListClientDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Client"
                ],
                "summary": "Replace oauth2 registered client.",
                "operationId": "client:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientReplaceDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyStringObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Client"
                ],
                "summary": "Add oauth2 registered client.",
                "operationId": "client:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyStringObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Client"
                ],
                "summary": "Delete oauth2 registered clients.",
                "operationId": "client:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Client"
                ],
                "summary": "Update oauth2 registered client.",
                "operationId": "client:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/tenant/app/{appId}/policy/default/{policyId}": {
            "put": {
                "tags": [
                    "AuthPolicyTenant"
                ],
                "summary": "Set the default policy of user access application.",
                "operationId": "auth:tenant:app:policy:default:replace",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Authorization policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy": {
            "get": {
                "tags": [
                    "AuthPolicy"
                ],
                "summary": "Query the list of authorization policy.",
                "operationId": "auth:policy:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PRE_DEFINED",
                                "USER_DEFINED"
                            ]
                        }
                    },
                    {
                        "name": "default0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ignoreAuthOrg",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "adminAssociated",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "grantStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MANUAL",
                                "SIGNUP_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAuthPolicyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "AuthPolicy"
                ],
                "summary": "Replace authorization policies.",
                "operationId": "auth:policy:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AuthPolicyReplaceDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AuthPolicy"
                ],
                "summary": "Add authorization policies.",
                "operationId": "auth:policy:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AuthPolicyAddDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AuthPolicy"
                ],
                "summary": "Delete authorization policies.",
                "operationId": "auth:policy:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "AuthPolicy"
                ],
                "summary": "Update authorization policies.",
                "operationId": "auth:policy:update_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AuthPolicyUpdateDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/{id}/func": {
            "get": {
                "tags": [
                    "AuthPolicyFunc"
                ],
                "summary": "Query the application functions list of authorization policy.",
                "operationId": "auth:policy:func:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAuthPolicyFuncVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "AuthPolicyFunc"
                ],
                "summary": "Replace application functions of authorization policy.",
                "operationId": "auth:policy:func:replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AuthPolicyFunc"
                ],
                "summary": "Add application functions to authorization policy.",
                "operationId": "auth:policy:func:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AuthPolicyFunc"
                ],
                "summary": "Delete application functions of authorization policy.",
                "operationId": "auth:policy:func:delete_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app": {
            "get": {
                "tags": [
                    "App"
                ],
                "summary": "Query the list of application.",
                "operationId": "app:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "icon",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CLOUD_APP",
                                "BASE_APP",
                                "OP_APP"
                            ]
                        }
                    },
                    {
                        "name": "editionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CLOUD_SERVICE",
                                "COMMUNITY",
                                "ENTERPRISE",
                                "DATACENTER"
                            ]
                        }
                    },
                    {
                        "name": "authCtrl",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "url",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sequence",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "openStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SIGNUP",
                                "AUTH_PASSED",
                                "OPEN_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "apiId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "App"
                ],
                "summary": "Replace application.",
                "operationId": "app:replace",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AppReplaceDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "App"
                ],
                "summary": "Add application.",
                "operationId": "app:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "App"
                ],
                "summary": "Delete applications.",
                "operationId": "app:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "App"
                ],
                "summary": "Update application.",
                "operationId": "app:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{id}/tag": {
            "get": {
                "tags": [
                    "AppTag"
                ],
                "summary": "Query the tags list of application.",
                "operationId": "app:tag:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "description": "Application tag id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Application tag id."
                        }
                    },
                    {
                        "name": "tagName",
                        "in": "query",
                        "description": "Application tag name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Application tag name."
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "description": "Application tag creator id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Application tag creator id."
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "description": "Application tag created date.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Application tag created date."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppTagTargetVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "AppTag"
                ],
                "summary": "Replace the tags of application.",
                "operationId": "app:tag:replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AppTag"
                ],
                "summary": "Add the tags of application.",
                "operationId": "app:tag:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AppTag"
                ],
                "summary": "Delete the tags of application.",
                "operationId": "app:tag:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/func": {
            "get": {
                "tags": [
                    "AppFunc"
                ],
                "summary": "Query the menu, button and panel functions list of application.",
                "operationId": "app:func:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pid",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MENU",
                                "BUTTON",
                                "PANEL"
                            ]
                        }
                    },
                    {
                        "name": "authCtrl",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sequence",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "apiId",
                        "in": "query",
                        "description": "Function associated api id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Function associated api id"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "description": "Function tag id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Function tag id"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAppFuncVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "AppFunc"
                ],
                "summary": "Replace application menu, button and panel functions.",
                "operationId": "app:func:replace",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AppFuncReplaceDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AppFunc"
                ],
                "summary": "Add application functions, including menu, button, and panel.",
                "operationId": "app:func:add",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AppFuncAddDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AppFunc"
                ],
                "summary": "Delete the menu, button and panel functions of application.",
                "operationId": "app:func:delete",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "AppFunc"
                ],
                "summary": "Update application menu, button and panel functions.",
                "operationId": "app:func:update",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AppFuncUpdateDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App function does not existed",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/func/{id}/tag": {
            "get": {
                "tags": [
                    "AppFuncTag"
                ],
                "summary": "Query the tags list of application function.",
                "operationId": "app:func:tag:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Function id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "description": "Application tag id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Application tag id."
                        }
                    },
                    {
                        "name": "tagName",
                        "in": "query",
                        "description": "Application tag name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Application tag name."
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "description": "Application tag creator id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Application tag creator id."
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "description": "Application tag created date.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Application tag created date."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppTagTargetVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "AppFuncTag"
                ],
                "summary": "Replace the tags of application function.",
                "operationId": "app:func:tag:replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Function id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AppFuncTag"
                ],
                "summary": "Add the tags of application function.",
                "operationId": "app:func:tag:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Function id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AppFuncTag"
                ],
                "summary": "Delete the tags of application function.",
                "operationId": "app:func:tag:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Function id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/api": {
            "get": {
                "tags": [
                    "Api"
                ],
                "summary": "Query the list of api.",
                "operationId": "api:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "operationId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "API",
                                "OPEN_API",
                                "OPEN_API_2P",
                                "DOOR_API",
                                "PUB_API",
                                "VIEW",
                                "PUB_VIEW"
                            ]
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultApiDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Api"
                ],
                "summary": "Replace apis.",
                "operationId": "api:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ApiReplaceDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Api"
                ],
                "summary": "Add apis.",
                "operationId": "api:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ApiAddDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Api"
                ],
                "summary": "Delete apis.",
                "operationId": "api:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Api ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Api"
                ],
                "summary": "Update apis.",
                "operationId": "api:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ApiUpdateDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/web/tag": {
            "get": {
                "tags": [
                    "WebTag"
                ],
                "summary": "Query the list of tags",
                "operationId": "web:tag:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultWebTagDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "WebTag"
                ],
                "summary": "Add tag",
                "operationId": "web:tag:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebTagAddDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "WebTag"
                ],
                "summary": "Delete tags",
                "operationId": "web:tag:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "WebTag"
                ],
                "summary": "Update tags",
                "operationId": "web:tag:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebTagUpdateDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/web/tag/{id}/target": {
            "get": {
                "tags": [
                    "WebTagTarget"
                ],
                "summary": "Query the targets list of tag",
                "operationId": "web:tag:target:list",
                "parameters": [
                    {
                        "name": "tagId",
                        "in": "query",
                        "description": "Web application tag id.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Web application tag id."
                        }
                    },
                    {
                        "name": "targetType",
                        "in": "query",
                        "description": "Web application resource type.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Web application resource type.",
                            "enum": [
                                "USER",
                                "DEPT",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "targetId",
                        "in": "query",
                        "description": "Web application resource id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Web application resource id."
                        }
                    },
                    {
                        "name": "targetName",
                        "in": "query",
                        "description": "Web application resource name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Web application resource name."
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultWebTagTargetDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "WebTagTarget"
                ],
                "summary": "Add the tag to targets",
                "operationId": "web:tag:target:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tag id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebTagTargetAddDto"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "WebTagTarget"
                ],
                "summary": "Delete the targets of tag ",
                "operationId": "web:tag:target:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tag id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "targetIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/directory/test": {
            "post": {
                "tags": [
                    "UserDirectory"
                ],
                "summary": "Test user directory configuration.",
                "operationId": "user:directory:test",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDirectoryTestDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUserDirectorySyncVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/current/sms/send": {
            "post": {
                "tags": [
                    "UserCurrent"
                ],
                "summary": "Send sms verification code to current user.",
                "operationId": "user:current:sms:send",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CurrentSmsSendDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/current/email/send": {
            "post": {
                "tags": [
                    "UserCurrent"
                ],
                "summary": "Send email verification code to current user.",
                "operationId": "user:current:email:send",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CurrentEmailSendDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/to/user": {
            "get": {
                "tags": [
                    "TOUser"
                ],
                "summary": "Query the list of operation user.",
                "operationId": "to:user:list",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultTOUserVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "TOUser"
                ],
                "summary": "Add operation users.",
                "operationId": "to:user:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TOUserAddDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "TOUser"
                ],
                "summary": "Delete operation users.",
                "operationId": "to:user:delete",
                "parameters": [
                    {
                        "name": "userIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/signupByMobile": {
            "post": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Add tenant through mobile signup.",
                "operationId": "tenant:signupByMobile:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantAddByMobileDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/sign/cancel/revoke": {
            "post": {
                "tags": [
                    "TenantSign"
                ],
                "summary": "Cancel tenant account deletion request.",
                "operationId": "tenant:sign:cancel:revoke",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/cert/audit/submit": {
            "post": {
                "tags": [
                    "TenantCertAudit"
                ],
                "summary": "Submit real-name authentication certificate.",
                "operationId": "tenant:certificate:submit",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRealNameSubmitDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/systemlog/instance/{id}/file/{name}": {
            "get": {
                "tags": [
                    "SystemLog"
                ],
                "summary": "Query the content of log file.",
                "operationId": "systemlog:instance:file:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Instance id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "File name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "linesNum",
                        "in": "query",
                        "description": "Number of log lines, default 5000",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "tail",
                        "in": "query",
                        "description": "Whether to read from the file end, default true",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultString"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "SystemLog"
                ],
                "summary": "Delete when rolled the log file, otherwise only empty the log file content.",
                "operationId": "systemlog:instance:file:clear",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Instance id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "File name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/system/token": {
            "get": {
                "tags": [
                    "SystemToken"
                ],
                "summary": "Query all system tokens.",
                "operationId": "system:token:all",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListSystemTokenInfoVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "SystemToken"
                ],
                "summary": "Add system token.",
                "operationId": "system:token:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SystemTokenAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultSystemTokenValueVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "SystemToken"
                ],
                "summary": "Delete system tokens.",
                "operationId": "system:token:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sms/send": {
            "post": {
                "tags": [
                    "Sms"
                ],
                "summary": "Send sms.",
                "operationId": "sms:send",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmsSendDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sms/channel/test": {
            "post": {
                "tags": [
                    "Sms"
                ],
                "summary": "Send the test sms to channel.",
                "operationId": "sms:channel:test:send",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmsChannelTestSendDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/user/social/unbind": {
            "post": {
                "tags": [
                    "SettingUser"
                ],
                "summary": "Unbind social of the current user.",
                "operationId": "setting:user:social:unbind",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Social type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "WECHAT",
                                "GITHUB",
                                "GOOGLE"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/{serviceCode}/api/discovery/sync": {
            "post": {
                "tags": [
                    "ServiceApi"
                ],
                "summary": "Synchronize the swagger apis from AngusDiscovery specified service instance.",
                "operationId": "service:api:discovery:sync",
                "parameters": [
                    {
                        "name": "serviceCode",
                        "in": "path",
                        "description": "Service Code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/api": {
            "post": {
                "tags": [
                    "ServiceApi"
                ],
                "summary": "Add the apis to service.",
                "operationId": "service:api:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ServiceApiAddDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/api/discovery/sync": {
            "post": {
                "tags": [
                    "ServiceApi"
                ],
                "summary": "Synchronize the all swagger apis from AngusDiscovery service instances.",
                "operationId": "service:api:discovery:syncs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/tag": {
            "get": {
                "tags": [
                    "OrgTag"
                ],
                "summary": "Query the list of tags",
                "operationId": "org:tag:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultOrgTagDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "OrgTag"
                ],
                "summary": "Add tag",
                "operationId": "org:tag:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OrgTagAddDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "OrgTag"
                ],
                "summary": "Delete tags",
                "operationId": "org:tag:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "OrgTag"
                ],
                "summary": "Update tags",
                "operationId": "org:tag:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OrgTagUpdateDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/tag/{id}/target": {
            "post": {
                "tags": [
                    "OrgTagTarget"
                ],
                "summary": "Add the tag to targets",
                "operationId": "org:tag:target:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "OrgTag id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OrgTagTargetAddDto"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "OrgTagTarget"
                ],
                "summary": "Delete the tag of targets",
                "operationId": "org:tag:target:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Org tag id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "targetIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/notice": {
            "get": {
                "tags": [
                    "Notice"
                ],
                "summary": "Query the list of application notice.",
                "operationId": "notice:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "content",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GLOBAL",
                                "APP"
                            ]
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "editionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CLOUD_SERVICE",
                                "COMMUNITY",
                                "ENTERPRISE",
                                "DATACENTER"
                            ]
                        }
                    },
                    {
                        "name": "sendType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SEND_NOW",
                                "TIMING_SEND"
                            ]
                        }
                    },
                    {
                        "name": "timingDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultNoticeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Notice"
                ],
                "summary": "Add application notice.",
                "operationId": "notice:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NoticeAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Notice"
                ],
                "summary": "Delete application notice.",
                "operationId": "notice:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/notice/combined/send": {
            "post": {
                "tags": [
                    "CombinedNotice"
                ],
                "summary": "Send notifications, in-site messages, SMS, and email.",
                "operationId": "notice:send",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SendNoticeDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message": {
            "get": {
                "tags": [
                    "Message"
                ],
                "summary": "Query the list of message.",
                "operationId": "message:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PENDING",
                                "FAILURE",
                                "SENT"
                            ]
                        }
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sendType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SEND_NOW",
                                "TIMING_SEND"
                            ]
                        }
                    },
                    {
                        "name": "receiveType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SITE",
                                "EMAIL"
                            ]
                        }
                    },
                    {
                        "name": "receiveObjectType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TENANT",
                                "DEPT",
                                "GROUP",
                                "USER",
                                "POLICY",
                                "TO_POLICY",
                                "ALL"
                            ]
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "timingDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "receiveTenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultMessageVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Message"
                ],
                "summary": "Add message.",
                "operationId": "message:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Message"
                ],
                "summary": "Delete messages.",
                "operationId": "message:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/center/push": {
            "post": {
                "tags": [
                    "MessageCenter"
                ],
                "summary": "Send the messages of message center.",
                "operationId": "message:center:push",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageCenterPushDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully sent",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/center/online/off": {
            "post": {
                "tags": [
                    "MessageCenterOnline"
                ],
                "summary": "Forced offline and logout users.",
                "operationId": "message:center:offline",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageCenterOfflineDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successfully offline",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/group/{id}/user": {
            "get": {
                "tags": [
                    "GroupUser"
                ],
                "summary": "Query the users list of group.",
                "operationId": "group:user:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "fullName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultUserGroupVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "GroupUser"
                ],
                "summary": "Add the users to group.",
                "operationId": "group:user:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "User ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "GroupUser"
                ],
                "summary": "Remove the users from group.",
                "operationId": "group:user:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "User ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/channel/test": {
            "post": {
                "tags": [
                    "EventChannel"
                ],
                "summary": "Test receive event channel.",
                "operationId": "event:channel:test",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventChannelTestDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/email": {
            "get": {
                "tags": [
                    "Email"
                ],
                "summary": "Query the list of email",
                "operationId": "email:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "templateCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bizKey",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SIGNUP",
                                "SIGNIN",
                                "PASSWORD_FORGET",
                                "PASSWORD_UPDATE",
                                "SIGN_CANCEL",
                                "MODIFY_MOBILE",
                                "BIND_MOBILE",
                                "PAY_PASSWORD_UPDATE",
                                "REALNAME_AUTH_SUBMIT",
                                "REALNAME_AUTH_PASSED",
                                "REALNAME_AUDIT_FAILURE",
                                "SYS_EXCEPTION_NOTICE",
                                "SYS_RECOVERY_NOTICE",
                                "SYS_SECURITY_NOTICE",
                                "LICENSE_SENT",
                                "CHANNEL_TEST",
                                "TODO_REALNAME_AUTH",
                                "TODO_BUSINESS_CONSULTATION",
                                "TODO_OFFLINE_SERVICE",
                                "TODO_WORKORDER",
                                "TODO_TRANSFER_CONFIRM",
                                "TODO_INVOICE_CONFIRM",
                                "TODO_WITHDRAW_CONFIRM",
                                "RECHARGE_SUCCESS",
                                "WITHDRAW_SUCCESS",
                                "ORDER_PAY_SUCCESS",
                                "ORDER_PAY_PENDING",
                                "ORDER_PAY_TIMEOUT",
                                "ORDER_TO_EXPIRE",
                                "ORDER_CHANGE_SUCCESS",
                                "WORKORDER_REPLY_REMINDER",
                                "TESTING_EXEC_STARTED",
                                "TESTING_EXEC_FINISHED",
                                "TESTING_EXEC_FAILED",
                                "TESTING_TASK_OVERDUE",
                                "INDICATOR_MODIFY_SUBMIT",
                                "INDICATOR_AUDIT_PASSED",
                                "INDICATOR_AUDIT_FAILED",
                                "EVENT_NOTICE"
                            ]
                        }
                    },
                    {
                        "name": "outId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "emailType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TEMPLATE",
                                "CUSTOM"
                            ]
                        }
                    },
                    {
                        "name": "html",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "verificationCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "batch",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sendTenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "sendUserId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "urgent",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sendStatus",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PENDING",
                                "SUCCESS",
                                "FAILURE"
                            ]
                        }
                    },
                    {
                        "name": "expectedSendDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "actualSendDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultEmailDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Email"
                ],
                "summary": "Send email",
                "operationId": "email:send",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailSendDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Email"
                ],
                "summary": "Delete emails",
                "operationId": "email:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/email/server/test": {
            "post": {
                "tags": [
                    "Email"
                ],
                "summary": "Send the test email to server",
                "operationId": "email:test",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailTestDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/dept/{id}/user": {
            "get": {
                "tags": [
                    "DeptUser"
                ],
                "summary": "Query the users list of department.",
                "operationId": "dept:user:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "fullName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "deptHead",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "mainDept",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultUserDeptVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "DeptUser"
                ],
                "summary": "Add users to department.",
                "operationId": "dept:user:add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "User ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DeptUser"
                ],
                "summary": "Remove users from department.",
                "operationId": "dept:user:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "User ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/{userId}/policy": {
            "get": {
                "tags": [
                    "AuthPolicyUser"
                ],
                "summary": "Query the authorized policy list of user.",
                "operationId": "auth:user:policy:list",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AuthPolicyFindDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAuthPolicyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AuthPolicyUser"
                ],
                "summary": "Authorize the policies to user.",
                "operationId": "auth:user:policy:add",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Policy ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AuthPolicyUser"
                ],
                "summary": "Delete the authorization policies of user.",
                "operationId": "auth:user:policy:delete",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "policyIds",
                        "in": "query",
                        "description": "Policy ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/token": {
            "get": {
                "tags": [
                    "AuthUserToken"
                ],
                "summary": "Query the all tokens of current user.",
                "operationId": "auth:user:token:all",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListUserTokenInfoVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AuthUserToken"
                ],
                "summary": "Add token of current user. Used for customizing user authorization duration scenarios while maintaining permissions identical to the associated user's access privileges.",
                "operationId": "auth:user:token:add",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserTokenAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUserTokenValueVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AuthUserToken"
                ],
                "summary": "Delete the tokens of current user. Note: After deletion, the access token will become invalid.",
                "operationId": "auth:user:token:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/{policyId}/user": {
            "get": {
                "tags": [
                    "AuthPolicyUser"
                ],
                "summary": "Query the user list of authorization policy.",
                "operationId": "auth:policy:user:list",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fullName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mobile",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "source",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PLATFORM_SIGNUP",
                                "INVITATION_CODE_SIGNUP",
                                "BACKGROUND_SIGNUP",
                                "BACKGROUND_ADDED",
                                "THIRD_PARTY_LOGIN",
                                "LDAP_SYNCHRONIZE"
                            ]
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sysAdmin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultUserListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AuthPolicyUser"
                ],
                "summary": "Authorize the policy to users.",
                "operationId": "auth:policy:user:add",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Authorization policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "User ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AuthPolicyUser"
                ],
                "summary": "Delete the associated users of authorization policy.",
                "operationId": "auth:policy:user:delete",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "userIds",
                        "in": "query",
                        "description": "User ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/{policyId}/group": {
            "get": {
                "tags": [
                    "AuthPolicyGroup"
                ],
                "summary": "Query the group list of authorization policy.",
                "operationId": "auth:policy:group:list",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultGroupListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AuthPolicyGroup"
                ],
                "summary": "Authorize the policy to groups.",
                "operationId": "auth:policy:group:add",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Authorization policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Group ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AuthPolicyGroup"
                ],
                "summary": "Delete the associated groups of authorization policy.",
                "operationId": "auth:policy:group:delete",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "groupIds",
                        "in": "query",
                        "description": "Group ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/{policyId}/dept": {
            "get": {
                "tags": [
                    "AuthPolicyDept"
                ],
                "summary": "Query the departments list of authorization policy.",
                "operationId": "auth:policy:dept:list",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pid",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultDeptListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AuthPolicyDept"
                ],
                "summary": "Authorize the policy to departments.",
                "operationId": "auth:policy:dept:add",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Authorization policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Department ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AuthPolicyDept"
                ],
                "summary": "Delete the associated departments of authorization policy.",
                "operationId": "auth:policy:dept:delete",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "deptIds",
                        "in": "query",
                        "description": "Department ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/init": {
            "post": {
                "tags": [
                    "AuthPolicy"
                ],
                "summary": "Initialize the authorization policy for tenant or platform users.",
                "operationId": "auth:policy:init",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthPolicyInitDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Initialized successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/group/{groupId}/policy": {
            "get": {
                "tags": [
                    "AuthPolicyGroup"
                ],
                "summary": "Query the authorized policy list of group.",
                "operationId": "auth:group:policy:list",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PRE_DEFINED",
                                "USER_DEFINED"
                            ]
                        }
                    },
                    {
                        "name": "default0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ignoreAuthOrg",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "adminAssociated",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "grantStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MANUAL",
                                "SIGNUP_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAuthPolicyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AuthPolicyGroup"
                ],
                "summary": "Authorize the policies to group.",
                "operationId": "auth:group:policy:add",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Policy ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AuthPolicyGroup"
                ],
                "summary": "Delete the authorization policies of group.",
                "operationId": "auth:group:policy:delete",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "policyIds",
                        "in": "query",
                        "description": "Policy ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/dept/{deptId}/policy": {
            "get": {
                "tags": [
                    "AuthPolicyDept"
                ],
                "summary": "Query the authorized policy list of department.",
                "operationId": "auth:dept:policy:list",
                "parameters": [
                    {
                        "name": "deptId",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PRE_DEFINED",
                                "USER_DEFINED"
                            ]
                        }
                    },
                    {
                        "name": "default0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ignoreAuthOrg",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "adminAssociated",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "grantStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MANUAL",
                                "SIGNUP_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAuthPolicyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AuthPolicyDept"
                ],
                "summary": "Authorize the policies to department.",
                "operationId": "auth:dept:policy:add",
                "parameters": [
                    {
                        "name": "deptId",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "Policy ids",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AuthPolicyDept"
                ],
                "summary": "Delete the authorization policies of department.",
                "operationId": "auth:dept:policy:delete",
                "parameters": [
                    {
                        "name": "deptId",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "policyIds",
                        "in": "query",
                        "description": "Policy ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/appopen": {
            "post": {
                "tags": [
                    "AppOpen"
                ],
                "summary": "Open application.",
                "operationId": "app:open",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppOpenDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Open successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/user/policy/auth": {
            "post": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Authorize the application policies to the users.",
                "operationId": "app:user:policy:auth",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthOrgPolicyAuthDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Delete the authorized users of application.",
                "operationId": "app:user:policy:auth:delete",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthOrgPolicyAuthDeleteDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Deleted successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/group/policy/auth": {
            "post": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Authorize the application policies to the groups.",
                "operationId": "app:group:policy:auth",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthOrgPolicyAuthDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Delete the authorized groups of application.",
                "operationId": "app:group:policy:auth:delete",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthOrgPolicyAuthDeleteDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Deleted successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/dept/policy/auth": {
            "post": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Authorize the application policies to the departments.",
                "operationId": "app:dept:policy:auth",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthOrgPolicyAuthDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Created successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListIdKeyLongObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Delete the authorized departments of application.",
                "operationId": "app:dept:policy:auth:delete",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthOrgPolicyAuthDeleteDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Deleted successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/import": {
            "post": {
                "tags": [
                    "App"
                ],
                "summary": "Import application.",
                "operationId": "app:import",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AppImportDto"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "required": [
                                    "file"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/sysadmin": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Query the system administrators of tenant.",
                "operationId": "user:admin:list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListUserSysAdminVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "Set user as system administrator.",
                "operationId": "user:admin",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserSysAdminSetDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/locked": {
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "DistributedLock or unlock  user.",
                "operationId": "user:lock",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLockedDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/enabled": {
            "patch": {
                "tags": [
                    "User"
                ],
                "summary": "Enable or disable users.",
                "operationId": "user:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EnabledOrDisabledDto"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/directory/reorder": {
            "patch": {
                "tags": [
                    "UserDirectory"
                ],
                "summary": "Update the sequence value and change the user directory synchronization order.",
                "operationId": "user:directory:reorder",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDirectoryReorderDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/directory/enabled": {
            "patch": {
                "tags": [
                    "UserDirectory"
                ],
                "summary": "Enable or disable user directory.",
                "operationId": "user:directory:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnabledOrDisabledDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/current": {
            "get": {
                "tags": [
                    "UserCurrent"
                ],
                "summary": "Query the detail of current user.",
                "operationId": "user:current:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUserCurrentDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "UserCurrent"
                ],
                "summary": "Update the current user.",
                "operationId": "user:current:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCurrentUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/current/mobile": {
            "patch": {
                "tags": [
                    "UserCurrent"
                ],
                "summary": "Update the mobile of current user.",
                "operationId": "user:current:mobile:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CurrentMobileUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/current/email": {
            "patch": {
                "tags": [
                    "UserCurrent"
                ],
                "summary": "Update the email of current user.",
                "operationId": "user:current:email:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CurrentEmailUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/to/user/{id}/role/auth": {
            "patch": {
                "tags": [
                    "TOUserRole"
                ],
                "summary": "Authorized the operation roles to user.",
                "operationId": "to:user:role:auth",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/to/role/{id}/auth": {
            "patch": {
                "tags": [
                    "TOUserRole"
                ],
                "summary": "Authorized to operation role to users.",
                "operationId": "to:role:user:auth",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "userIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/to/role/enabled": {
            "patch": {
                "tags": [
                    "TORole"
                ],
                "summary": "Enable or disable the operation roles.",
                "operationId": "to:role:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EnabledOrDisabledDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/locked": {
            "patch": {
                "tags": [
                    "Tenant"
                ],
                "summary": "DistributedLock or unlock tenant.",
                "operationId": "tenant:locked",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantLockedDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/enabled": {
            "patch": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Enable or disable tenant.",
                "operationId": "tenant:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnabledOrDisabledDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/cert/audit": {
            "get": {
                "tags": [
                    "TenantCertAudit"
                ],
                "summary": "Quote the detail of tenant real-name audit.",
                "operationId": "tenant:certificate:audit:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultTenantAuditDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "TenantCertAudit"
                ],
                "summary": "Audit tenant certificate information.",
                "operationId": "tenant:certificate:audit",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantRealNameAuditDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sms/template/{id}": {
            "get": {
                "tags": [
                    "SmsTemplate"
                ],
                "summary": "Query the detail of sms template.",
                "operationId": "sms:template:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Sms template id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultSmsTemplateDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "SmsTemplate"
                ],
                "summary": "Update sms template.",
                "operationId": "sms:template:update",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Sms template id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmsTemplateUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sms/channel": {
            "get": {
                "tags": [
                    "SmsChannel"
                ],
                "summary": "Query the list of sms channel.",
                "operationId": "sms:channel:list",
                "parameters": [
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultSmsChannelVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "SmsChannel"
                ],
                "summary": "Update sms channel.",
                "operationId": "sms:channel:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmsChannelUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sms/channel/enabled": {
            "patch": {
                "tags": [
                    "SmsChannel"
                ],
                "summary": "Enabled or disable sms channel",
                "operationId": "sms:channel:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnabledOrDisabledDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/user/preference": {
            "get": {
                "tags": [
                    "SettingUser"
                ],
                "summary": "Query the preference setting of the current user.",
                "operationId": "setting:user:preference:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUserPreferenceVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "SettingUser"
                ],
                "summary": "Update the preference setting of the current user.",
                "operationId": "setting:user:preference:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPreferenceUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/user/apis/proxy": {
            "get": {
                "tags": [
                    "SettingUser"
                ],
                "summary": "Query the apis proxy of the current user.",
                "operationId": "setting:user:apis:proxy:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUserApiProxyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "SettingUser"
                ],
                "summary": "Update the apis proxy of the current user.",
                "operationId": "setting:user:apis:proxy:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserApiClientProxyUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/user/apis/proxy/enabled": {
            "patch": {
                "tags": [
                    "SettingUser"
                ],
                "summary": "Enable the apis proxy of the current user.",
                "operationId": "setting:user:apis:proxy:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserApiProxyEnabledDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/quota/expansion/check": {
            "patch": {
                "tags": [
                    "SettingTenantQuota"
                ],
                "summary": "Check whether the new purchase quota plus the cumulative purchase quota exceeds the upper limit.",
                "operationId": "setting:tenant:quota:expansion:check",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/QuotaCheckDto"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/quota/check": {
            "patch": {
                "tags": [
                    "SettingTenantQuota"
                ],
                "summary": "Check whether the purchase quota exceeds the upper limit.",
                "operationId": "setting:tenant:quota:check",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/QuotaCheckDto"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/quota/byorder": {
            "patch": {
                "tags": [
                    "SettingTenantQuota"
                ],
                "summary": "Authorize or de-authorize tenant quotas by order.",
                "operationId": "setting:tenant:quota:byorder:replace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuotaReplaceByOrderDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/enabled": {
            "patch": {
                "tags": [
                    "Service"
                ],
                "summary": "Enable or disable services.",
                "operationId": "service:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EnabledOrDisabledDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/group/enabled": {
            "patch": {
                "tags": [
                    "Group"
                ],
                "summary": "Enable or disable groups",
                "operationId": "group:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EnabledOrDisabledDto"
                                },
                                "uniqueItems": true
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/email/template/{id}": {
            "get": {
                "tags": [
                    "EmailTemplate"
                ],
                "summary": "Query the detail of email template.",
                "operationId": "email:template:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Template id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultEmailTemplateDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "EmailTemplate"
                ],
                "summary": "Update email template.",
                "operationId": "email:template:update",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Template id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailTemplateUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/email/server/enabled": {
            "patch": {
                "tags": [
                    "EmailServer"
                ],
                "summary": "Enable or disable email server.",
                "operationId": "email:server:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnabledOrDisabledDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/realname": {
            "patch": {
                "tags": [
                    "AuthUser"
                ],
                "summary": "Modify the user's real-name status after the tenant real name authentication.",
                "operationId": "auth:user:realname:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthUserRealNameUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/password": {
            "patch": {
                "tags": [
                    "AuthUser"
                ],
                "summary": "Update the password of user.",
                "operationId": "auth:user:password:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthUserPasswordUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/password/init/current": {
            "patch": {
                "tags": [
                    "AuthUser"
                ],
                "summary": "Initialize the password of current user.",
                "operationId": "auth:user:password:init:current",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CurrentAuthUserPasswordInitDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/password/current": {
            "patch": {
                "tags": [
                    "AuthUser"
                ],
                "summary": "Update the password of current user.",
                "operationId": "auth:user:password:update:current",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CurrentAuthUserPasswordUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/enabled": {
            "patch": {
                "tags": [
                    "AuthPolicy"
                ],
                "summary": "Enabled or disabled the authorization policies.",
                "operationId": "auth:policy:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EnabledOrDisabledDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/appopen/renew": {
            "patch": {
                "tags": [
                    "AppOpen"
                ],
                "summary": "Renewal the opened application.",
                "operationId": "app:open:renew",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppOpenRenewDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Renew successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/func/enabled": {
            "patch": {
                "tags": [
                    "AppFunc"
                ],
                "summary": "Enable or disable the menu, button and panel functions of application.",
                "operationId": "app:func:enabled",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EnabledOrDisabledDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/site": {
            "patch": {
                "tags": [
                    "App"
                ],
                "summary": "Update application site information.",
                "operationId": "app:site:update",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppSiteInfoUpdateDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/enabled": {
            "patch": {
                "tags": [
                    "App"
                ],
                "summary": "Enable or disable applications.",
                "operationId": "app:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EnabledOrDisabledDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/api/enabled": {
            "patch": {
                "tags": [
                    "Api"
                ],
                "summary": "Enable or disable apis.",
                "operationId": "api:enabled",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EnabledOrDisabledDto"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/web/tag/{id}": {
            "get": {
                "tags": [
                    "WebTag"
                ],
                "summary": "Query the detail of tag",
                "operationId": "web:tag:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Org tag id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultWebTagDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/web/tag/search": {
            "get": {
                "tags": [
                    "WebTag"
                ],
                "summary": "Fulltext search the list of tags",
                "operationId": "web:tag:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultWebTagDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/{id}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Query the detail of user.",
                "operationId": "user:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUserDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/username/check": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Check whether or not username existed.",
                "operationId": "user:username:check",
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "username",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUsernameCheckVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/search": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Fulltext search the list of user.",
                "operationId": "user:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fullName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mobile",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "source",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PLATFORM_SIGNUP",
                                "INVITATION_CODE_SIGNUP",
                                "BACKGROUND_SIGNUP",
                                "BACKGROUND_ADDED",
                                "THIRD_PARTY_LOGIN",
                                "LDAP_SYNCHRONIZE"
                            ]
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sysAdmin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultUserListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/directory/{id}": {
            "get": {
                "tags": [
                    "UserDirectory"
                ],
                "summary": "Query the detail of user directory.",
                "operationId": "user:directory:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Directory id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUserDirectoryDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserDirectory"
                ],
                "summary": "Delete user directory.",
                "operationId": "user:directory:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Directory id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "deleteSync",
                        "in": "query",
                        "description": "Delete synchronization data flag",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/current/tenant": {
            "get": {
                "tags": [
                    "UserCurrent"
                ],
                "summary": "Query tenant of current user.",
                "operationId": "user:current:tenant:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultTenantDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/current/sms/check": {
            "get": {
                "tags": [
                    "UserCurrent"
                ],
                "summary": "Check sms verification code of current user.",
                "operationId": "user:current:sms:check",
                "parameters": [
                    {
                        "name": "bizKey",
                        "in": "query",
                        "description": "Sms business type key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Sms business type key.",
                            "enum": [
                                "SIGNUP",
                                "SIGNIN",
                                "PASSWORD_FORGET",
                                "PASSWORD_UPDATE",
                                "SIGN_CANCEL",
                                "MODIFY_MOBILE",
                                "BIND_MOBILE",
                                "PAY_PASSWORD_UPDATE",
                                "REALNAME_AUTH_SUBMIT",
                                "REALNAME_AUTH_PASSED",
                                "REALNAME_AUDIT_FAILURE",
                                "SYS_EXCEPTION_NOTICE",
                                "SYS_RECOVERY_NOTICE",
                                "SYS_SECURITY_NOTICE",
                                "LICENSE_SENT",
                                "CHANNEL_TEST",
                                "TODO_REALNAME_AUTH",
                                "TODO_BUSINESS_CONSULTATION",
                                "TODO_OFFLINE_SERVICE",
                                "TODO_WORKORDER",
                                "TODO_TRANSFER_CONFIRM",
                                "TODO_INVOICE_CONFIRM",
                                "TODO_WITHDRAW_CONFIRM",
                                "RECHARGE_SUCCESS",
                                "WITHDRAW_SUCCESS",
                                "ORDER_PAY_SUCCESS",
                                "ORDER_PAY_PENDING",
                                "ORDER_PAY_TIMEOUT",
                                "ORDER_TO_EXPIRE",
                                "ORDER_CHANGE_SUCCESS",
                                "WORKORDER_REPLY_REMINDER",
                                "TESTING_EXEC_STARTED",
                                "TESTING_EXEC_FINISHED",
                                "TESTING_EXEC_FAILED",
                                "TESTING_TASK_OVERDUE",
                                "INDICATOR_MODIFY_SUBMIT",
                                "INDICATOR_AUDIT_PASSED",
                                "INDICATOR_AUDIT_FAILED",
                                "EVENT_NOTICE",
                                "PASSWORD_FORGET",
                                "PASSWORD_UPDATE",
                                "SIGN_CANCEL",
                                "MODIFY_MOBILE",
                                "BIND_MOBILE"
                            ],
                            "example": "MODIFY_MOBILE"
                        },
                        "example": "MODIFY_MOBILE"
                    },
                    {
                        "name": "mobile",
                        "in": "query",
                        "description": "User mobile.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "User mobile.",
                            "example": "13813000000",
                            "minLength": 1
                        },
                        "example": 13813000000
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "description": "User country code.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "User country code.",
                            "example": "CN",
                            "maxLength": 16,
                            "minLength": 1
                        },
                        "example": "CN"
                    },
                    {
                        "name": "verificationCode",
                        "in": "query",
                        "description": "Sms verification code.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Sms verification code.",
                            "example": "778717",
                            "maxLength": 8,
                            "minLength": 1
                        },
                        "example": 778717
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultCheckSecretVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/current/email/check": {
            "get": {
                "tags": [
                    "UserCurrent"
                ],
                "summary": "Check email verification code of current user.",
                "operationId": "user:current:email:check",
                "parameters": [
                    {
                        "name": "bizKey",
                        "in": "query",
                        "description": "Email business type key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Email business type key.",
                            "enum": [
                                "EVENT_NOTICE",
                                "SIGNUP",
                                "SIGNIN",
                                "PASSWORD_FORGET",
                                "PASSWORD_UPDATE",
                                "SIGN_CANCEL",
                                "MODIFY_EMAIL",
                                "BIND_EMAIL",
                                "PAY_PASSWORD_UPDATE",
                                "REALNAME_AUTH_SUBMIT",
                                "REALNAME_AUTH_PASSED",
                                "REALNAME_AUDIT_FAILURE",
                                "SYS_EXCEPTION_NOTICE",
                                "SYS_RECOVERY_NOTICE",
                                "SYS_SECURITY_NOTICE",
                                "LICENSE_SENT",
                                "CHANNEL_TEST",
                                "TODO_REALNAME_AUTH",
                                "TODO_BUSINESS_CONSULTATION",
                                "TODO_OFFLINE_SERVICE",
                                "TODO_WORKORDER",
                                "TODO_TRANSFER_CONFIRM",
                                "TODO_INVOICE_CONFIRM",
                                "TODO_WITHDRAW_CONFIRM",
                                "RECHARGE_SUCCESS",
                                "WITHDRAW_SUCCESS",
                                "ORDER_PAY_SUCCESS",
                                "ORDER_PAY_PENDING",
                                "ORDER_PAY_TIMEOUT",
                                "ORDER_TO_EXPIRE",
                                "ORDER_CHANGE_SUCCESS",
                                "WORKORDER_REPLY_REMINDER",
                                "INVOICE_APPLY_SUCCESS",
                                "COUPON_DISTRIBUTION",
                                "COUPON_TO_EXPIRE",
                                "BLOG_SUBSCRIPTION_NOTICE",
                                "TESTING_EXEC_STARTED",
                                "TESTING_EXEC_FINISHED",
                                "TESTING_EXEC_FAILED",
                                "TESTING_TASK_OVERDUE",
                                "INDICATOR_MODIFY_SUBMIT",
                                "INDICATOR_AUDIT_PASSED",
                                "INDICATOR_AUDIT_FAILED",
                                "PASSWORD_FORGET",
                                "PASSWORD_UPDATE",
                                "MODIFY_EMAIL",
                                "BIND_EMAIL"
                            ],
                            "example": "BIND_EMAIL"
                        },
                        "example": "BIND_EMAIL"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "User e-mail.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "User e-mail.",
                            "example": "james@xcan.cloud",
                            "maxLength": 100,
                            "minLength": 1
                        },
                        "example": "james@xcan.cloud"
                    },
                    {
                        "name": "verificationCode",
                        "in": "query",
                        "description": "Email verification code.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Email verification code.",
                            "example": "778717",
                            "maxLength": 8,
                            "minLength": 1
                        },
                        "example": 778717
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultCheckSecretVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/to/user/{id}": {
            "get": {
                "tags": [
                    "TOUser"
                ],
                "summary": "Query the detail of operation user.",
                "operationId": "to:user:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultTOUserDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/to/role/{idOrCode}": {
            "get": {
                "tags": [
                    "TORole"
                ],
                "summary": "Query the detail of operation role.",
                "operationId": "to:role:detail",
                "parameters": [
                    {
                        "name": "idOrCode",
                        "in": "path",
                        "description": "Role code or id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultTORoleDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/to/role/search": {
            "get": {
                "tags": [
                    "TORole"
                ],
                "summary": "Fulltext search the list of operation role.",
                "operationId": "to:role:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultTORoleVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/{id}": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Query the detail of tenant.",
                "operationId": "tenant:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tenant id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultTenantDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/sign/cancel/sms/send": {
            "get": {
                "tags": [
                    "TenantSign"
                ],
                "summary": "Send SMS verification for tenant account deletion.",
                "operationId": "tenant:sign:cancel:sms:send",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/sign/cancel/sms/confirm": {
            "get": {
                "tags": [
                    "TenantSign"
                ],
                "summary": "Confirm SMS code to finalize tenant account deletion.",
                "operationId": "tenant:sign:cancel:sms:confirm",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/SignCancelSmsConfirmDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/search": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Fulltext search tenant.",
                "operationId": "tenant:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "no",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PERSONAL",
                                "ENTERPRISE",
                                "GOVERNMENT",
                                "UNKNOWN"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "DISABLED",
                                "CANCELLING",
                                "CANCELED",
                                "ENABLED"
                            ]
                        }
                    },
                    {
                        "name": "realNameStatus",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NOT_SUBMITTED",
                                "AUDITING",
                                "AUDITED",
                                "FAILED_AUDIT"
                            ]
                        }
                    },
                    {
                        "name": "locked",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "applyCancelDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "lastLockDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "lockStartDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "lockEndDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultTenantVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenant/cert/audit/check": {
            "get": {
                "tags": [
                    "TenantCertAudit"
                ],
                "summary": "Check the real-name audit of tenant.",
                "operationId": "tenant:certificate:audit:check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/systemlog/instance/{id}": {
            "get": {
                "tags": [
                    "SystemLog"
                ],
                "summary": "Query the all log file names of service instance.",
                "operationId": "systemlog:instance:file:all",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Instance id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListString"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/system/token/{id}/value": {
            "get": {
                "tags": [
                    "SystemToken"
                ],
                "summary": "Query the value of system token.",
                "operationId": "system:token:value:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "System token id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultSystemTokenValueVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/system/token/{id}/auth": {
            "get": {
                "tags": [
                    "SystemToken"
                ],
                "summary": "Query the authorization of system token.",
                "operationId": "system:token:auth:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "System token id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultSystemTokenDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sms": {
            "get": {
                "tags": [
                    "Sms"
                ],
                "summary": "Query the list of sms.",
                "operationId": "sms:list",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/SmsFindDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultSmsDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Sms"
                ],
                "summary": "Delete sms.",
                "operationId": "sms:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sms/{id}": {
            "get": {
                "tags": [
                    "Sms"
                ],
                "summary": "Query the detail of sms.",
                "operationId": "sms:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Sms id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultSmsDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sms/verificationCode/check": {
            "get": {
                "tags": [
                    "Sms"
                ],
                "summary": "Check sms verification code.",
                "operationId": "sms:verificationCode:check",
                "parameters": [
                    {
                        "name": "bizKey",
                        "in": "query",
                        "description": "Sms business key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Sms business key.",
                            "enum": [
                                "SIGNUP",
                                "SIGNIN",
                                "PASSWORD_FORGET",
                                "PASSWORD_UPDATE",
                                "SIGN_CANCEL",
                                "MODIFY_MOBILE",
                                "BIND_MOBILE",
                                "PAY_PASSWORD_UPDATE",
                                "REALNAME_AUTH_SUBMIT",
                                "REALNAME_AUTH_PASSED",
                                "REALNAME_AUDIT_FAILURE",
                                "SYS_EXCEPTION_NOTICE",
                                "SYS_RECOVERY_NOTICE",
                                "SYS_SECURITY_NOTICE",
                                "LICENSE_SENT",
                                "CHANNEL_TEST",
                                "TODO_REALNAME_AUTH",
                                "TODO_BUSINESS_CONSULTATION",
                                "TODO_OFFLINE_SERVICE",
                                "TODO_WORKORDER",
                                "TODO_TRANSFER_CONFIRM",
                                "TODO_INVOICE_CONFIRM",
                                "TODO_WITHDRAW_CONFIRM",
                                "RECHARGE_SUCCESS",
                                "WITHDRAW_SUCCESS",
                                "ORDER_PAY_SUCCESS",
                                "ORDER_PAY_PENDING",
                                "ORDER_PAY_TIMEOUT",
                                "ORDER_TO_EXPIRE",
                                "ORDER_CHANGE_SUCCESS",
                                "WORKORDER_REPLY_REMINDER",
                                "TESTING_EXEC_STARTED",
                                "TESTING_EXEC_FINISHED",
                                "TESTING_EXEC_FAILED",
                                "TESTING_TASK_OVERDUE",
                                "INDICATOR_MODIFY_SUBMIT",
                                "INDICATOR_AUDIT_PASSED",
                                "INDICATOR_AUDIT_FAILED",
                                "EVENT_NOTICE"
                            ],
                            "example": "SIGNUP"
                        },
                        "example": "SIGNUP"
                    },
                    {
                        "name": "mobile",
                        "in": "query",
                        "description": "Verification mobile.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Verification mobile.",
                            "minLength": 1
                        }
                    },
                    {
                        "name": "verificationCode",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "Sms verification code.",
                            "maxLength": 6,
                            "minLength": 1
                        },
                        "example": "Sms verification code."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sms/template": {
            "get": {
                "tags": [
                    "SmsTemplate"
                ],
                "summary": "Query the list of sms template.",
                "operationId": "sms:template:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "thirdCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "en",
                                "zh_CN"
                            ]
                        }
                    },
                    {
                        "name": "channelId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultSmsTemplateDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sms/channel/{id}": {
            "get": {
                "tags": [
                    "SmsChannel"
                ],
                "summary": "Query the detail of sms channel.",
                "operationId": "sms:channel:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "SMS channel id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultSmsChannelVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/{key}": {
            "get": {
                "tags": [
                    "Setting"
                ],
                "summary": "Query the detail of setting value.",
                "operationId": "setting:value:detail",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Setting key",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "LOCALE",
                                "SECURITY",
                                "SOCIAL",
                                "QUOTA",
                                "FUNC_INDICATOR",
                                "PREF_INDICATOR",
                                "STABILITY_INDICATOR",
                                "OPERATION_LOG_CONFIG",
                                "API_LOG_CONFIG",
                                "SYSTEM_LOG_CONFIG",
                                "MAX_RESOURCE_ACTIVITIES",
                                "MAX_METRICS_DAYS",
                                "TESTER_EVENT",
                                "AI_AGENT"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultSettingValueVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/user/social/binding": {
            "get": {
                "tags": [
                    "SettingUser"
                ],
                "summary": "Query the binding social information of the current user.",
                "operationId": "setting:user:social:binding:detail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUserSocialBindingVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/signup/invitationCode": {
            "get": {
                "tags": [
                    "SettingTenant"
                ],
                "summary": "Generate signup invitation code of the current tenant.",
                "operationId": "setting:tenant:signup:invitationCode:gen",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultString"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/quota/{name}": {
            "get": {
                "tags": [
                    "SettingTenantQuota"
                ],
                "summary": "Query the quota detail of tenant.",
                "operationId": "setting:tenant:quota:detail",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Tenant quota resource name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultTenantQuotaDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/quota/search": {
            "get": {
                "tags": [
                    "SettingTenantQuota"
                ],
                "summary": "Fulltext search the quota of tenant.",
                "operationId": "setting:tenant:quota:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allowChange",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultTenantQuotaDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/setting/tenant/quota/app": {
            "get": {
                "tags": [
                    "SettingTenantQuota"
                ],
                "summary": "Query the quota application list of tenant.",
                "operationId": "setting:tenant:quota:app:list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListString"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/{serviceCode}/discovery/instances": {
            "get": {
                "tags": [
                    "ServiceDiscovery"
                ],
                "summary": "Query the instances of AngusDiscovery service.",
                "operationId": "discovery:instances:list",
                "parameters": [
                    {
                        "name": "serviceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListString"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/{id}": {
            "get": {
                "tags": [
                    "Service"
                ],
                "summary": "Query the detail of service.",
                "operationId": "service:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultServiceVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/{id}/api": {
            "get": {
                "tags": [
                    "ServiceApi"
                ],
                "summary": "Query the list of service.",
                "operationId": "service:api:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListServiceApiVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "ServiceApi"
                ],
                "summary": "Delete the apis of service.",
                "operationId": "service:api:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/search": {
            "get": {
                "tags": [
                    "Service"
                ],
                "summary": "Fulltext search the list of service.",
                "operationId": "service:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "source",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BACK_ADD",
                                "EUREKA"
                            ]
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultServiceVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/resource": {
            "get": {
                "tags": [
                    "Service"
                ],
                "summary": "Query the all resources of service.",
                "operationId": "service:resource:all",
                "parameters": [
                    {
                        "name": "serviceCode",
                        "in": "query",
                        "description": "Service code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "auth",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListServiceResourceVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/resource/api": {
            "get": {
                "tags": [
                    "Service"
                ],
                "summary": "Query the all apis of service or resource.",
                "operationId": "service:resource:api:all",
                "parameters": [
                    {
                        "name": "serviceCode",
                        "in": "query",
                        "description": "Service code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resourceName",
                        "in": "query",
                        "description": "Resource name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "auth",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListResourceApiVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/service/discovery": {
            "get": {
                "tags": [
                    "ServiceDiscovery"
                ],
                "summary": "Query the services of AngusDiscovery.",
                "operationId": "discovery:service:list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListString"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/policy/{policyId}/app": {
            "get": {
                "tags": [
                    "AuthPolicyApp"
                ],
                "summary": "Query the application detail of authorization policy.",
                "operationId": "policy:app:detail",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultAppDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/{type}/{id}/auth/app": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the authorized application list of organization(Tenant/User/Department/Group).",
                "operationId": "org:auth:app:list",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Organization type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TENANT",
                                "USER",
                                "DEPT",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Organization id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "joinPolicy",
                        "in": "query",
                        "description": "Join policy flag",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListOrgAppAuthVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/{orgType}/{orgId}/auth/app/{appId}/check": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Check organization(Tenant/User/Department/Group) authorized application.",
                "operationId": "org:auth:app:check",
                "parameters": [
                    {
                        "name": "orgType",
                        "in": "path",
                        "description": "Organization type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TENANT",
                                "USER",
                                "DEPT",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Organization id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultBoolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/tag/{id}": {
            "get": {
                "tags": [
                    "OrgTag"
                ],
                "summary": "Query the detail of tag",
                "operationId": "org:tag:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Org tag id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultOrgTagDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/tag/target": {
            "get": {
                "tags": [
                    "OrgTagTarget"
                ],
                "summary": "Query the targets list of tag",
                "operationId": "org:tag:target:list",
                "parameters": [
                    {
                        "name": "tagId",
                        "in": "query",
                        "description": "Tag id.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Tag id."
                        }
                    },
                    {
                        "name": "targetType",
                        "in": "query",
                        "description": "Tag organization type: USER/DEPT/GROUP.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Tag organization type: USER/DEPT/GROUP.",
                            "enum": [
                                "USER",
                                "DEPT",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "targetId",
                        "in": "query",
                        "description": "Tag organization id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Tag organization id."
                        }
                    },
                    {
                        "name": "targetName",
                        "in": "query",
                        "description": "Tag organization name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Tag organization name."
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultOrgTagTargetDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/tag/search": {
            "get": {
                "tags": [
                    "OrgTag"
                ],
                "summary": "Fulltext search tags",
                "operationId": "org:tag:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultOrgTagDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/notice/{id}": {
            "get": {
                "tags": [
                    "Notice"
                ],
                "summary": "Query the detail of application notice.",
                "operationId": "notice:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Notice id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultNoticeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/notice/search": {
            "get": {
                "tags": [
                    "Notice"
                ],
                "summary": "Fulltext search the list of application notice.",
                "operationId": "notice:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "content",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GLOBAL",
                                "APP"
                            ]
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "editionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CLOUD_SERVICE",
                                "COMMUNITY",
                                "ENTERPRISE",
                                "DATACENTER"
                            ]
                        }
                    },
                    {
                        "name": "sendType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SEND_NOW",
                                "TIMING_SEND"
                            ]
                        }
                    },
                    {
                        "name": "timingDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultNoticeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/notice/global/latest": {
            "get": {
                "tags": [
                    "Notice"
                ],
                "summary": "Query the latest global application notice.",
                "operationId": "notice:global:latest",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultNoticeLatestVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/notice/app/{appId}/latest": {
            "get": {
                "tags": [
                    "Notice"
                ],
                "summary": "Query the latest application notice.",
                "operationId": "notice:app:latest",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "App id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultNoticeLatestVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/{id}": {
            "get": {
                "tags": [
                    "Message"
                ],
                "summary": "Query the detail of message.",
                "operationId": "message:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultMessageDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/{id}/current": {
            "get": {
                "tags": [
                    "MessageCurrent"
                ],
                "summary": "Query the message information of current user.",
                "operationId": "message:detail:current",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultMessageCurrentDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/status/count": {
            "get": {
                "tags": [
                    "MessageCurrent"
                ],
                "summary": "Message status count.",
                "operationId": "message:status:count",
                "parameters": [
                    {
                        "name": "userid",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListMessageStatusCountVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/search": {
            "get": {
                "tags": [
                    "Message"
                ],
                "summary": "Fulltext search the list of message.",
                "operationId": "message:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PENDING",
                                "FAILURE",
                                "SENT"
                            ]
                        }
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sendType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SEND_NOW",
                                "TIMING_SEND"
                            ]
                        }
                    },
                    {
                        "name": "receiveType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SITE",
                                "EMAIL"
                            ]
                        }
                    },
                    {
                        "name": "receiveObjectType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TENANT",
                                "DEPT",
                                "GROUP",
                                "USER",
                                "POLICY",
                                "TO_POLICY",
                                "ALL"
                            ]
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "timingDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "receiveTenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultMessageVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/current": {
            "get": {
                "tags": [
                    "MessageCurrent"
                ],
                "summary": "Query the message list of current user.",
                "operationId": "message:list:current",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/MessageCurrentFindDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultMessageCurrentVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "MessageCurrent"
                ],
                "summary": "Delete the messages of current user.",
                "operationId": "message:delete:current",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/center/online": {
            "get": {
                "tags": [
                    "MessageCenterOnline"
                ],
                "summary": "Query the online user information of the message center.",
                "operationId": "message:center:online:list",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "fullName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deviceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "remoteAddress",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "online",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "onlineDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "offlineDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultMessageCenterOnlineVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/center/online/{userId}": {
            "get": {
                "tags": [
                    "MessageCenterOnline"
                ],
                "summary": "Query the online user information of the message center.",
                "operationId": "message:center:online:detail",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultMessageCenterOnlineVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/message/center/online/search": {
            "get": {
                "tags": [
                    "MessageCenterOnline"
                ],
                "summary": "Search the online user information of the message center.",
                "operationId": "message:center:online:search",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "fullName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deviceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "remoteAddress",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "online",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "onlineDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "offlineDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultMessageCenterOnlineVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/log/operation": {
            "get": {
                "tags": [
                    "OperationLog"
                ],
                "summary": "Query the operation logs list of user.",
                "operationId": "log:operation:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "requestId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resource",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TENANT",
                                "DEPT",
                                "GROUP",
                                "USER",
                                "USER_DIRECTORY",
                                "USER_TOKEN",
                                "ORG_TAG",
                                "AUTH_CLIENT",
                                "AUTH_USER",
                                "SERVICE",
                                "API",
                                "APP",
                                "APP_FUNC",
                                "WEB_TAG",
                                "POLICY",
                                "POLICY_APP",
                                "POLICY_FUNC",
                                "POLICY_TENANT",
                                "POLICY_DEPT",
                                "POLICY_GROUP",
                                "POLICY_USER",
                                "EVENT",
                                "EVENT_CHANNEL",
                                "EVENT_TEMPLATE",
                                "EMAIL",
                                "EMAIL_SERVER",
                                "EMAIL_TEMPLATE",
                                "SMS",
                                "SMS_CHANNEL",
                                "SMS_TEMPLATE",
                                "TO_ROLE",
                                "TO_USER",
                                "MESSAGE",
                                "NOTICE",
                                "SETTING",
                                "SETTING_USER",
                                "SETTING_TENANT",
                                "SETTING_TENANT_QUOTA",
                                "SYSTEM_TOKEN",
                                "OTHER"
                            ]
                        }
                    },
                    {
                        "name": "resourceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CREATED",
                                "UPDATED",
                                "ENABLED",
                                "DISABLED",
                                "LOCKED",
                                "UNLOCKED",
                                "DELETED",
                                "SYNC",
                                "CUSTOM",
                                "SIGN_UP",
                                "SIGN_IN_SUCCESS",
                                "SIGN_IN_FAIL",
                                "SIGN_OUT",
                                "UPDATE_PASSWORD",
                                "ADD_USER_DEPT",
                                "ADD_DEPT_USER",
                                "ADD_USER_GROUP",
                                "ADD_GROUP_USER",
                                "UPDATE_USER_DEPT",
                                "UPDATE_DEPT_USER",
                                "UPDATE_USER_GROUP",
                                "UPDATE_GROUP_USER",
                                "DELETE_USER_DEPT",
                                "DELETE_DEPT_USER",
                                "DELETE_USER_GROUP",
                                "DELETE_GROUP_USER",
                                "SET_USER_MAIN_DEPT",
                                "CANCEL_USER_MAIN_DEPT",
                                "SET_SYS_ADMIN",
                                "CANCEL_SYS_ADMIN",
                                "TENANT_CANCEL",
                                "SUBMIT_TENANT_AUDIT",
                                "TENANT_AUDIT",
                                "ADD_USER_POLICY",
                                "ADD_POLICY_USER",
                                "DELETE_USER_POLICY",
                                "DELETE_POLICY_USER",
                                "ADD_DEPT_POLICY",
                                "ADD_POLICY_DEPT",
                                "DELETE_DEPT_POLICY",
                                "DELETE_POLICY_DEPT",
                                "ADD_GROUP_POLICY",
                                "ADD_POLICY_GROUP",
                                "DELETE_GROUP_POLICY",
                                "DELETE_POLICY_GROUP",
                                "SET_DEFAULT_APP_POLICY",
                                "DELETE_DEFAULT_APP_POLICY",
                                "ADD_POLICY_FUNC",
                                "UPDATE_POLICY_FUNC",
                                "DELETE_POLICY_FUNC",
                                "TARGET_TAG_UPDATED",
                                "TARGET_TAG_DELETED",
                                "APP_OPEN",
                                "APP_OPEN_RENEW",
                                "APP_OPEN_CANCEL"
                            ]
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "optDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "detail",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "private0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "tenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultOperationLogVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/log/operation/search": {
            "get": {
                "tags": [
                    "OperationLog"
                ],
                "summary": "Fulltext search the operation logs list of user.",
                "operationId": "log:operation:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "requestId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resource",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TENANT",
                                "DEPT",
                                "GROUP",
                                "USER",
                                "USER_DIRECTORY",
                                "USER_TOKEN",
                                "ORG_TAG",
                                "AUTH_CLIENT",
                                "AUTH_USER",
                                "SERVICE",
                                "API",
                                "APP",
                                "APP_FUNC",
                                "WEB_TAG",
                                "POLICY",
                                "POLICY_APP",
                                "POLICY_FUNC",
                                "POLICY_TENANT",
                                "POLICY_DEPT",
                                "POLICY_GROUP",
                                "POLICY_USER",
                                "EVENT",
                                "EVENT_CHANNEL",
                                "EVENT_TEMPLATE",
                                "EMAIL",
                                "EMAIL_SERVER",
                                "EMAIL_TEMPLATE",
                                "SMS",
                                "SMS_CHANNEL",
                                "SMS_TEMPLATE",
                                "TO_ROLE",
                                "TO_USER",
                                "MESSAGE",
                                "NOTICE",
                                "SETTING",
                                "SETTING_USER",
                                "SETTING_TENANT",
                                "SETTING_TENANT_QUOTA",
                                "SYSTEM_TOKEN",
                                "OTHER"
                            ]
                        }
                    },
                    {
                        "name": "resourceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CREATED",
                                "UPDATED",
                                "ENABLED",
                                "DISABLED",
                                "LOCKED",
                                "UNLOCKED",
                                "DELETED",
                                "SYNC",
                                "CUSTOM",
                                "SIGN_UP",
                                "SIGN_IN_SUCCESS",
                                "SIGN_IN_FAIL",
                                "SIGN_OUT",
                                "UPDATE_PASSWORD",
                                "ADD_USER_DEPT",
                                "ADD_DEPT_USER",
                                "ADD_USER_GROUP",
                                "ADD_GROUP_USER",
                                "UPDATE_USER_DEPT",
                                "UPDATE_DEPT_USER",
                                "UPDATE_USER_GROUP",
                                "UPDATE_GROUP_USER",
                                "DELETE_USER_DEPT",
                                "DELETE_DEPT_USER",
                                "DELETE_USER_GROUP",
                                "DELETE_GROUP_USER",
                                "SET_USER_MAIN_DEPT",
                                "CANCEL_USER_MAIN_DEPT",
                                "SET_SYS_ADMIN",
                                "CANCEL_SYS_ADMIN",
                                "TENANT_CANCEL",
                                "SUBMIT_TENANT_AUDIT",
                                "TENANT_AUDIT",
                                "ADD_USER_POLICY",
                                "ADD_POLICY_USER",
                                "DELETE_USER_POLICY",
                                "DELETE_POLICY_USER",
                                "ADD_DEPT_POLICY",
                                "ADD_POLICY_DEPT",
                                "DELETE_DEPT_POLICY",
                                "DELETE_POLICY_DEPT",
                                "ADD_GROUP_POLICY",
                                "ADD_POLICY_GROUP",
                                "DELETE_GROUP_POLICY",
                                "DELETE_POLICY_GROUP",
                                "SET_DEFAULT_APP_POLICY",
                                "DELETE_DEFAULT_APP_POLICY",
                                "ADD_POLICY_FUNC",
                                "UPDATE_POLICY_FUNC",
                                "DELETE_POLICY_FUNC",
                                "TARGET_TAG_UPDATED",
                                "TARGET_TAG_DELETED",
                                "APP_OPEN",
                                "APP_OPEN_RENEW",
                                "APP_OPEN_CANCEL"
                            ]
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "optDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "detail",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "private0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "tenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultOperationLogVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/log/api": {
            "get": {
                "tags": [
                    "ApiLog"
                ],
                "summary": "Query the list of api request log.",
                "operationId": "log:api:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "requestId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "success",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "serviceCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "instanceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "apiCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "apiType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "API",
                                "OPEN_API",
                                "OPEN_API_2P",
                                "DOOR_API",
                                "PUB_API",
                                "VIEW",
                                "PUB_VIEW"
                            ]
                        }
                    },
                    {
                        "name": "resourceName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "method",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "uri",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "requestDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultApiLogInfoVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/log/api/{id}": {
            "get": {
                "tags": [
                    "ApiLog"
                ],
                "summary": "Query the detail of api request log.",
                "operationId": "log:api:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Api log id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultApiLogDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/group/{id}": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Query the detail of groups",
                "operationId": "group:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultGroupDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "group does not exist",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/group/search": {
            "get": {
                "tags": [
                    "Group"
                ],
                "summary": "Fulltext search the list of group.",
                "operationId": "group:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultGroupListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event": {
            "get": {
                "tags": [
                    "Event"
                ],
                "summary": "Query the list of event.",
                "operationId": "event:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BUSINESS",
                                "SECURITY",
                                "QUOTA",
                                "SYSTEM",
                                "OPERATION",
                                "PROTOCOL",
                                "API",
                                "NOTICE",
                                "OTHER"
                            ]
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "targetId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pushStatus",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PENDING",
                                "PUSHING",
                                "PUSH_SUCCESS",
                                "PUSH_FAIL",
                                "IGNORED"
                            ]
                        }
                    },
                    {
                        "name": "nonTenantEvent",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultEventVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/{id}": {
            "get": {
                "tags": [
                    "Event"
                ],
                "summary": "Query the detail of event.",
                "operationId": "event:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Event id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultEventDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/{eventCode}/channel": {
            "get": {
                "tags": [
                    "Event"
                ],
                "summary": "Query the receive channels of event.",
                "operationId": "event:channel:receive:all",
                "parameters": [
                    {
                        "name": "eventCode",
                        "in": "path",
                        "description": "Event code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListEventReceiveChannelVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/template/{id}": {
            "get": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Query the detail of event template.",
                "operationId": "event:template:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Template id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultEventTemplateVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Delete event template.",
                "operationId": "event:template:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Template id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/template/{id}/current": {
            "get": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Query the detail of current tenant event template and receive setting.",
                "operationId": "event:template:current:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Template id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultEventTemplateCurrentDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/template/search": {
            "get": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Fulltext search the list of event template.",
                "operationId": "event:template:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "eventCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BUSINESS",
                                "SECURITY",
                                "QUOTA",
                                "SYSTEM",
                                "OPERATION",
                                "PROTOCOL",
                                "API",
                                "NOTICE",
                                "OTHER"
                            ]
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultEventTemplateVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/template/search/current": {
            "get": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Fulltext search the list of current tenant event template and receive setting.",
                "operationId": "event:template:current:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "eventCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BUSINESS",
                                "SECURITY",
                                "QUOTA",
                                "SYSTEM",
                                "OPERATION",
                                "PROTOCOL",
                                "API",
                                "NOTICE",
                                "OTHER"
                            ]
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultEventTemplateCurrentDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/template/current": {
            "get": {
                "tags": [
                    "EventTemplate"
                ],
                "summary": "Query the list of current tenant event template and receive setting.",
                "operationId": "event:template:current:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "eventCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BUSINESS",
                                "SECURITY",
                                "QUOTA",
                                "SYSTEM",
                                "OPERATION",
                                "PROTOCOL",
                                "API",
                                "NOTICE",
                                "OTHER"
                            ]
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultEventTemplateCurrentDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/search": {
            "get": {
                "tags": [
                    "Event"
                ],
                "summary": "Fulltext search the list of event.",
                "operationId": "event:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BUSINESS",
                                "SECURITY",
                                "QUOTA",
                                "SYSTEM",
                                "OPERATION",
                                "PROTOCOL",
                                "API",
                                "NOTICE",
                                "OTHER"
                            ]
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "targetId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pushStatus",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PENDING",
                                "PUSHING",
                                "PUSH_SUCCESS",
                                "PUSH_FAIL",
                                "IGNORED"
                            ]
                        }
                    },
                    {
                        "name": "nonTenantEvent",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultEventVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/channel/type/{channelType}": {
            "get": {
                "tags": [
                    "EventChannel"
                ],
                "summary": "Query the list of receive event channel type.",
                "operationId": "event:channel:list",
                "parameters": [
                    {
                        "name": "channelType",
                        "in": "path",
                        "description": "Receive channel type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "WEBHOOK",
                                "EMAIL",
                                "DINGTALK",
                                "WECHAT"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListEventChannelVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/email/{id}": {
            "get": {
                "tags": [
                    "Email"
                ],
                "summary": "Query the detail of email",
                "operationId": "email:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Email id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultEmailDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Email does not exist",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/email/verificationCode/check": {
            "get": {
                "tags": [
                    "Email"
                ],
                "summary": "Check the email verification code is valid.",
                "operationId": "email:verificationCode:check",
                "parameters": [
                    {
                        "name": "bizKey",
                        "in": "query",
                        "description": "Email business key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Email business key.",
                            "enum": [
                                "EVENT_NOTICE",
                                "SIGNUP",
                                "SIGNIN",
                                "PASSWORD_FORGET",
                                "PASSWORD_UPDATE",
                                "SIGN_CANCEL",
                                "MODIFY_EMAIL",
                                "BIND_EMAIL",
                                "PAY_PASSWORD_UPDATE",
                                "REALNAME_AUTH_SUBMIT",
                                "REALNAME_AUTH_PASSED",
                                "REALNAME_AUDIT_FAILURE",
                                "SYS_EXCEPTION_NOTICE",
                                "SYS_RECOVERY_NOTICE",
                                "SYS_SECURITY_NOTICE",
                                "LICENSE_SENT",
                                "CHANNEL_TEST",
                                "TODO_REALNAME_AUTH",
                                "TODO_BUSINESS_CONSULTATION",
                                "TODO_OFFLINE_SERVICE",
                                "TODO_WORKORDER",
                                "TODO_TRANSFER_CONFIRM",
                                "TODO_INVOICE_CONFIRM",
                                "TODO_WITHDRAW_CONFIRM",
                                "RECHARGE_SUCCESS",
                                "WITHDRAW_SUCCESS",
                                "ORDER_PAY_SUCCESS",
                                "ORDER_PAY_PENDING",
                                "ORDER_PAY_TIMEOUT",
                                "ORDER_TO_EXPIRE",
                                "ORDER_CHANGE_SUCCESS",
                                "WORKORDER_REPLY_REMINDER",
                                "INVOICE_APPLY_SUCCESS",
                                "COUPON_DISTRIBUTION",
                                "COUPON_TO_EXPIRE",
                                "BLOG_SUBSCRIPTION_NOTICE",
                                "TESTING_EXEC_STARTED",
                                "TESTING_EXEC_FINISHED",
                                "TESTING_EXEC_FAILED",
                                "TESTING_TASK_OVERDUE",
                                "INDICATOR_MODIFY_SUBMIT",
                                "INDICATOR_AUDIT_PASSED",
                                "INDICATOR_AUDIT_FAILED"
                            ],
                            "example": "SIGNUP"
                        },
                        "example": "SIGNUP"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Verification email address.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Verification email address.",
                            "minLength": 1
                        }
                    },
                    {
                        "name": "verificationCode",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "Email verification code.",
                            "maxLength": 160,
                            "minLength": 1
                        },
                        "example": "Email verification code."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/email/template/": {
            "get": {
                "tags": [
                    "EmailTemplate"
                ],
                "summary": "Query the list of email template.",
                "operationId": "email:template:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "verificationCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "subject",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "en",
                                "zh_CN"
                            ]
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultEmailTemplateDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/email/server/{id}": {
            "get": {
                "tags": [
                    "EmailServer"
                ],
                "summary": "Query the detail of email server.",
                "operationId": "email:server:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Email server ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultServerDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Email server does not exist",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/email/server/check": {
            "get": {
                "tags": [
                    "EmailServer"
                ],
                "summary": "Check the enabled email server.",
                "operationId": "email:server:check",
                "parameters": [
                    {
                        "name": "protocol",
                        "in": "query",
                        "description": "Mail server protocol, only `SMTP` is supported.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Mail server protocol, only `SMTP` is supported.",
                            "enum": [
                                "SMTP",
                                "POP3",
                                "IMAP",
                                "SMTP"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/edition/upgradeable": {
            "get": {
                "tags": [
                    "Edition"
                ],
                "summary": "Query the latest and upgradeable edition of product.",
                "operationId": "edition:upgradeable:detail",
                "parameters": [
                    {
                        "name": "goodsCode",
                        "in": "query",
                        "description": "Goods code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "goodsId",
                        "in": "query",
                        "description": "Goods id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListLatestEditionVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/edition/installed": {
            "get": {
                "tags": [
                    "Edition"
                ],
                "summary": "Query the installed and authorized edition of product.",
                "operationId": "edition:installed:detail",
                "parameters": [
                    {
                        "name": "goodsCode",
                        "in": "query",
                        "description": "Goods code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultInstalledEditionVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/dept/{id}": {
            "get": {
                "tags": [
                    "Dept"
                ],
                "summary": "Query the detail of department.",
                "operationId": "dept:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultDeptDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/dept/{id}/navigation": {
            "get": {
                "tags": [
                    "Dept"
                ],
                "summary": "Query the navigation position of department tree.",
                "operationId": "dept:navigation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultDeptNavigationTreeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/dept/{id}/count": {
            "get": {
                "tags": [
                    "Dept"
                ],
                "summary": "Query the number of sub departments and department users number.",
                "operationId": "dept:sub:count",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultDeptSubCount"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/dept/search": {
            "get": {
                "tags": [
                    "Dept"
                ],
                "summary": "Fulltext search the list of department.",
                "operationId": "dept:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Department id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Department id."
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Department code.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Department code."
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Department name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Department name."
                        }
                    },
                    {
                        "name": "pid",
                        "in": "query",
                        "description": "Parent department id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Parent department id."
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Department level.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Department level."
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "description": "Department association tag id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Department association tag id."
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "description": "Department creation user id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Department creation user id."
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "description": "Department creation date.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Department creation date."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultDeptListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/country": {
            "get": {
                "tags": [
                    "Country"
                ],
                "summary": "Query the list of country",
                "operationId": "country:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "chineseName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "iso2",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "iso3",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "abbr",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "open",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultCountryDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/country/{id}": {
            "get": {
                "tags": [
                    "Country"
                ],
                "summary": "Query the detail of country",
                "operationId": "country:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Country ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultCountryDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/country/{countryCode}/province": {
            "get": {
                "tags": [
                    "CountryDistrict"
                ],
                "summary": "Query the province list of country",
                "operationId": "country:province:list",
                "parameters": [
                    {
                        "name": "countryCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListCountryDistrictDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/country/{countryCode}/province/{provinceCode}/city": {
            "get": {
                "tags": [
                    "CountryDistrict"
                ],
                "summary": "Query the city list of province",
                "operationId": "country:city:list",
                "parameters": [
                    {
                        "name": "countryCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "provinceCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListCountryDistrictDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/country/{countryCode}/district/{districtCode}": {
            "get": {
                "tags": [
                    "CountryDistrict"
                ],
                "summary": "Query the detail of district",
                "operationId": "country:district:detail",
                "parameters": [
                    {
                        "name": "countryCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "districtCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultCountryDistrictDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/country/{countryCode}/district/{districtCode}/tree": {
            "get": {
                "tags": [
                    "CountryDistrict"
                ],
                "summary": "Query the district tree of country",
                "operationId": "country:district:tree",
                "parameters": [
                    {
                        "name": "countryCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "districtCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListCountryDistrictTreeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/country/{countryCode}/city/{cityCode}/area": {
            "get": {
                "tags": [
                    "CountryDistrict"
                ],
                "summary": "Query the area list of city",
                "operationId": "country:area:list",
                "parameters": [
                    {
                        "name": "countryCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cityCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListCountryDistrictDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/country/search": {
            "get": {
                "tags": [
                    "Country"
                ],
                "summary": "Fulltext search the list of country",
                "operationId": "country:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "chineseName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "iso2",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "iso3",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "abbr",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "open",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultCountryDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/country/district/search": {
            "get": {
                "tags": [
                    "CountryDistrict"
                ],
                "summary": "Fulltext search the list of district",
                "operationId": "country:district:search",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CountryDistrictSearchDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultCountryDistrictDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/client/{id}": {
            "get": {
                "tags": [
                    "Client"
                ],
                "summary": "Query the detail of oauth2 registered client.",
                "operationId": "client:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Client id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultClientDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/cert/idcard/recognize": {
            "get": {
                "tags": [
                    "TenantCertRecognize"
                ],
                "summary": "Recognize ID card.",
                "operationId": "cert:idcard:recognize",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/IdCardRecognizeDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultIdCardRecognizeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/cert/business/recognize": {
            "get": {
                "tags": [
                    "TenantCertRecognize"
                ],
                "summary": "Recognize business license.",
                "operationId": "cert:business:recognize",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/BusinessRecognizeDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultBusinessRecognizeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AuthUser"
                ],
                "summary": "Delete oauth2 authorization users. Note: After deleting the authorized user, they will not be able to log in to the system.",
                "operationId": "auth:user:delete",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "User ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/{userId}/unauth/policy": {
            "get": {
                "tags": [
                    "AuthPolicyUser"
                ],
                "summary": "Query the unauthorized policy list of user.",
                "operationId": "auth:user:unauth:policy:list",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PRE_DEFINED",
                                "USER_DEFINED"
                            ]
                        }
                    },
                    {
                        "name": "default0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "grantStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MANUAL",
                                "SIGNUP_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultPolicyUnauthVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/{userId}/policy/associated": {
            "get": {
                "tags": [
                    "AuthPolicyUser"
                ],
                "summary": "Query the all associated authorization policies of user.",
                "operationId": "auth:user:policy:association:all",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PRE_DEFINED",
                                "USER_DEFINED"
                            ]
                        }
                    },
                    {
                        "name": "default0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ignoreAuthOrg",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "adminFullAssociated",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "grantStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MANUAL",
                                "SIGNUP_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAuthPolicyAssociatedVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/{userId}/app": {
            "get": {
                "tags": [
                    "AuthUser"
                ],
                "summary": "Query the all authorized application information of user.",
                "operationId": "auth:user:app:all",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAppVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/{userId}/app/{appIdOrCode}/func": {
            "get": {
                "tags": [
                    "AuthUser"
                ],
                "summary": "Query all authorized application functions list of user.",
                "operationId": "auth:user:app:func:list",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appIdOrCode",
                        "in": "path",
                        "description": "Application id or code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "joinApi",
                        "in": "query",
                        "description": "Association query function api flag",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "joinTag",
                        "in": "query",
                        "description": "Association query function tag flag",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "onlyEnabled",
                        "in": "query",
                        "description": "Only return enabled function, default true",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultAuthAppVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/{userId}/app/{appIdOrCode}/func/tree": {
            "get": {
                "tags": [
                    "AuthUser"
                ],
                "summary": "Query all authorized application functions tree of user.",
                "operationId": "auth:user:app:func:tree",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appIdOrCode",
                        "in": "path",
                        "description": "Application id or code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "joinApi",
                        "in": "query",
                        "description": "Association query function api flag",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "joinTag",
                        "in": "query",
                        "description": "Association query function tag flag",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "onlyEnabled",
                        "in": "query",
                        "description": "Only return enabled function, default true",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultAuthAppTreeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/token/{id}/value": {
            "get": {
                "tags": [
                    "AuthUserToken"
                ],
                "summary": "Retrieve the value of the specified token associated with the current user.",
                "operationId": "auth:token:value:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User token id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultUserTokenValueVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/password/check": {
            "get": {
                "tags": [
                    "AuthUser"
                ],
                "summary": "Check whether the user password is correct.",
                "operationId": "auth:user:password:check",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AuthUserPasswordCheckDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/password/check/current": {
            "get": {
                "tags": [
                    "AuthUser"
                ],
                "summary": "Check the password of current user.",
                "operationId": "auth:user:password:check:current",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CurrentAuthUserPasswordCheckDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/tenant/app": {
            "get": {
                "tags": [
                    "AuthPolicyTenant"
                ],
                "summary": "Query all authorized applications of tenant.",
                "operationId": "auth:tenant:app:list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAppVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/tenant/app/{appId}/func": {
            "get": {
                "tags": [
                    "AuthPolicyTenant"
                ],
                "summary": "Query all functions list of authorized application.",
                "operationId": "auth:tenant:app:func:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAuthPolicyFuncVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/tenant/app/{appId}/func/tree": {
            "get": {
                "tags": [
                    "AuthPolicyTenant"
                ],
                "summary": "Query all functions tree of authorized application.",
                "operationId": "auth:tenant:app:func:tree",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAuthPolicyFuncTreeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/tenant/app/default": {
            "get": {
                "tags": [
                    "AuthPolicyTenant"
                ],
                "summary": "Query the default policies of all authorized applications.",
                "operationId": "auth:tenant:app:policy:default:list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAuthAppDefaultPolicyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/{policyId}/unauth/user": {
            "get": {
                "tags": [
                    "AuthPolicyUser"
                ],
                "summary": "Query the unauthorized user list of policy.",
                "operationId": "auth:policy:unauth:user:list",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AuthPolicyUserFindDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultUserListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/{policyId}/unauth/group": {
            "get": {
                "tags": [
                    "AuthPolicyGroup"
                ],
                "summary": "Query the unauthorized group list of authorization policy.",
                "operationId": "auth:policy:unauth:group:list",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultGroupListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/{policyId}/unauth/dept": {
            "get": {
                "tags": [
                    "AuthPolicyDept"
                ],
                "summary": "Query the unauthorized departments list of authorization policy.",
                "operationId": "auth:policy:unauth:dept:list",
                "parameters": [
                    {
                        "name": "policyId",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pid",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultDeptListVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/{id}/func/tree": {
            "get": {
                "tags": [
                    "AuthPolicyFunc"
                ],
                "summary": "Query the application functions tree of authorization policy.",
                "operationId": "auth:policy:func:tree",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Policy id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAuthPolicyFuncTreeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/{idOrCode}": {
            "get": {
                "tags": [
                    "AuthPolicy"
                ],
                "summary": "Query the detail of authorization policy.",
                "operationId": "auth:policy:detail",
                "parameters": [
                    {
                        "name": "idOrCode",
                        "in": "path",
                        "description": "Authorization policy id or code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultAuthPolicyDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/policy/search": {
            "get": {
                "tags": [
                    "AuthPolicy"
                ],
                "summary": "Fulltext search the list of authorization policy.",
                "operationId": "auth:policy:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PRE_DEFINED",
                                "USER_DEFINED"
                            ]
                        }
                    },
                    {
                        "name": "default0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "grantStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MANUAL",
                                "SIGNUP_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAuthPolicyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/group/{groupId}/unauth/policy": {
            "get": {
                "tags": [
                    "AuthPolicyGroup"
                ],
                "summary": "Query the unauthorized policy list of group.",
                "operationId": "auth:group:unauth:policy:list",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Group id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PRE_DEFINED",
                                "USER_DEFINED"
                            ]
                        }
                    },
                    {
                        "name": "default0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "grantStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MANUAL",
                                "SIGNUP_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultPolicyUnauthVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/dept/{deptId}/unauth/policy": {
            "get": {
                "tags": [
                    "AuthPolicyDept"
                ],
                "summary": "Query the unauthorized policy list of department.",
                "operationId": "auth:dept:unauth:policy:list",
                "parameters": [
                    {
                        "name": "deptId",
                        "in": "path",
                        "description": "Department id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PRE_DEFINED",
                                "USER_DEFINED"
                            ]
                        }
                    },
                    {
                        "name": "default0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "grantStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MANUAL",
                                "SIGNUP_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultPolicyUnauthVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/appopen/list": {
            "get": {
                "tags": [
                    "AppOpen"
                ],
                "summary": "Query the list of opened application.",
                "operationId": "app:open:list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "appCode",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "appType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CLOUD_APP",
                                "BASE_APP",
                                "OP_APP"
                            ]
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "expirationDeleted",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "openDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "expirationDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppOpenVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{id}": {
            "get": {
                "tags": [
                    "App"
                ],
                "summary": "Query the detail of application.",
                "operationId": "app:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultAppDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{code}/{editionType}": {
            "get": {
                "tags": [
                    "App"
                ],
                "summary": "Query the detail of application.",
                "operationId": "app:detail:bycode",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "Application code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "editionType",
                        "in": "path",
                        "description": "Application edition type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CLOUD_SERVICE",
                                "COMMUNITY",
                                "ENTERPRISE",
                                "DATACENTER"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultAppDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/unauth/user": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the application unauthorized users.",
                "operationId": "app:unauth:user:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Unauthorized user id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Unauthorized user id."
                        }
                    },
                    {
                        "name": "fullName",
                        "in": "query",
                        "description": "Unauthorized user full name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Unauthorized user full name."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppUnauthUserVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/unauth/tenant": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the application unauthorized tenants.",
                "operationId": "app:unauth:tenant:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Organization id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Organization id."
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Organization name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Organization name."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppUnauthTenantVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/unauth/org/{orgType}/{orgId}/policy": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the application unauthorized policies.",
                "operationId": "app:unauth:policy:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "orgType",
                        "in": "path",
                        "description": "Organization type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TENANT",
                                "USER",
                                "DEPT",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Organization id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Organization id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Organization id."
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Organization name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Organization name."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppAuthPolicyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/unauth/group": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the application unauthorized groups.",
                "operationId": "app:unauth:group:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Unauthorized group id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Unauthorized group id"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Unauthorized group name",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Unauthorized group name"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppUnauthGroupVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/unauth/dept": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the application unauthorized departments.",
                "operationId": "app:unauth:department:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Unauthorized department id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Unauthorized department id"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Unauthorized department name",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Unauthorized department name"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppUnauthDeptVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/policy": {
            "get": {
                "tags": [
                    "AuthPolicyApp"
                ],
                "summary": "Query the authorization policy list of application.",
                "operationId": "app:policy:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PRE_DEFINED",
                                "USER_DEFINED"
                            ]
                        }
                    },
                    {
                        "name": "default0",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "grantScope",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TENANT_SYS_ADMIN",
                                "TENANT_ALL_USER",
                                "TENANT_ORG"
                            ]
                        }
                    },
                    {
                        "name": "grantStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MANUAL",
                                "SIGNUP_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppPolicyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/func/tree": {
            "get": {
                "tags": [
                    "AppFunc"
                ],
                "summary": "Query the menu, button and panel functions tree of application.",
                "operationId": "app:func:tree",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pid",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MENU",
                                "BUTTON",
                                "PANEL"
                            ]
                        }
                    },
                    {
                        "name": "authCtrl",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sequence",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "apiId",
                        "in": "query",
                        "description": "Function associated api id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Function associated api id"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "description": "Function tag id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Function tag id"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAppFuncTreeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/func/tree/search": {
            "get": {
                "tags": [
                    "AppFunc"
                ],
                "summary": "Fulltext search the menu, button and panel functions tree of application.",
                "operationId": "app:func:tree:search",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pid",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MENU",
                                "BUTTON",
                                "PANEL"
                            ]
                        }
                    },
                    {
                        "name": "authCtrl",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sequence",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "apiId",
                        "in": "query",
                        "description": "Function associated api id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Function associated api id"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "description": "Function tag id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Function tag id"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAppFuncTreeVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/func/search": {
            "get": {
                "tags": [
                    "AppFunc"
                ],
                "summary": "Fulltext search the menu, button and panel functions list of application.",
                "operationId": "app:func:search",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pid",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MENU",
                                "BUTTON",
                                "PANEL"
                            ]
                        }
                    },
                    {
                        "name": "authCtrl",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sequence",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "apiId",
                        "in": "query",
                        "description": "Function associated api id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Function associated api id"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "description": "Function tag id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Function tag id"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAppFuncVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/auth/user": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the authorized user list of application.",
                "operationId": "app:auth:user:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Authorized user id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Authorized user id."
                        }
                    },
                    {
                        "name": "fullName",
                        "in": "query",
                        "description": "Authorized user full name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Authorized user full name."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppAuthUserVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/auth/tenant": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the authorized tenant list of application.",
                "operationId": "app:auth:tenant:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Organization (user, group or department) id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Organization (user, group or department) id."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppAuthTenantVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/auth/org/{orgType}/{orgId}/policy": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the authorized application policies list of organization(Tenant/User/Department/Group).",
                "operationId": "app:auth:policy:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "orgType",
                        "in": "path",
                        "description": "Organization type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TENANT",
                                "USER",
                                "DEPT",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Organization id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AuthAppOrgSearchDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppAuthPolicyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/auth/org/{orgType}/{orgId}/check": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Check the authorized organization(Tenant/User/Department/Group) of application.",
                "operationId": "app:auth:org:check",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "orgType",
                        "in": "path",
                        "description": "Organization type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TENANT",
                                "USER",
                                "DEPT",
                                "GROUP"
                            ]
                        }
                    },
                    {
                        "name": "orgId",
                        "in": "path",
                        "description": "Organization id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultBoolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/auth/group": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the authorized groups list of application.",
                "operationId": "app:auth:group:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Organization (user, group or department) id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Organization (user, group or department) id."
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Organization (user, group or department) name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Organization (user, group or department) name."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppAuthGroupVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/auth/global": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the all global authorized policies of application.",
                "operationId": "app:auth:global:all",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultListAppAuthPolicyVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/{appId}/auth/dept": {
            "get": {
                "tags": [
                    "AppOrgAuth"
                ],
                "summary": "Query the authorized departments list of application.",
                "operationId": "app:auth:dept:list",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Organization (user, group or department) id.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Organization (user, group or department) id."
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Organization (user, group or department) name.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Organization (user, group or department) name."
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppAuthDeptVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/search": {
            "get": {
                "tags": [
                    "App"
                ],
                "summary": "Fulltext search the list of application.",
                "operationId": "app:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "icon",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CLOUD_APP",
                                "BASE_APP",
                                "OP_APP"
                            ]
                        }
                    },
                    {
                        "name": "editionType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CLOUD_SERVICE",
                                "COMMUNITY",
                                "ENTERPRISE",
                                "DATACENTER"
                            ]
                        }
                    },
                    {
                        "name": "authCtrl",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "url",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sequence",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "openStage",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SIGNUP",
                                "AUTH_PASSED",
                                "OPEN_SUCCESS"
                            ]
                        }
                    },
                    {
                        "name": "clientId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "apiId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tagId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "tenantId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultAppVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/func/{id}": {
            "get": {
                "tags": [
                    "AppFunc"
                ],
                "summary": "Query the menu, button or panel function detail of application.",
                "operationId": "app:func:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Function id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultAppFuncDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "App function does not existed",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/app/export": {
            "get": {
                "tags": [
                    "App"
                ],
                "summary": "Export application.",
                "operationId": "app:export",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Export application id.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Export application id."
                        }
                    },
                    {
                        "name": "exportType",
                        "in": "query",
                        "description": "Export application file format type.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Export application file format type.",
                            "enum": [
                                "JSON",
                                "CSV",
                                "EXCEL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/api/{id}": {
            "get": {
                "tags": [
                    "Api"
                ],
                "summary": "Query the detail of api.",
                "operationId": "api:detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Api id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultApiDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/api/search": {
            "get": {
                "tags": [
                    "Api"
                ],
                "summary": "Fulltext search the list of api.",
                "operationId": "api:search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "operationId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "API",
                                "OPEN_API",
                                "OPEN_API_2P",
                                "DOOR_API",
                                "PUB_API",
                                "VIEW",
                                "PUB_VIEW"
                            ]
                        }
                    },
                    {
                        "name": "createdDate",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "description": "Page data size, default 1, maximum 100000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 1, maximum 100000",
                            "maximum": 100000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Page data size, default 10, maximum 2000",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Page data size, default 10, maximum 2000",
                            "maximum": 2000,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sort field",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sort field"
                        }
                    },
                    {
                        "name": "orderSort",
                        "in": "query",
                        "description": "Sorting method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Sorting method",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[0].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[0].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[1].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[1].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[1].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "filters[2].key",
                        "in": "query",
                        "description": "Filter field name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters[2].op",
                        "in": "query",
                        "description": "Filter condition (EQUAL, NOT_EQUAL, GREATER_THAN, etc.)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "GREATER_THAN",
                                "LESS_THAN",
                                "GREATER_THAN_EQUAL",
                                "LESS_THAN_EQUAL",
                                "EQUAL",
                                "NOT_EQUAL",
                                "MATCH",
                                "MATCH_END",
                                "NOT_MATCH",
                                "NOT_MATCH_END",
                                "IN",
                                "NOT_IN",
                                "IS_NULL",
                                "IS_NOT_NULL"
                            ]
                        }
                    },
                    {
                        "name": "filters[2].value",
                        "in": "query",
                        "description": "Filter value",
                        "schema": {}
                    },
                    {
                        "name": "infoScope",
                        "in": "query",
                        "description": "Query information scope",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Query information scope",
                            "enum": [
                                "BASIC",
                                "DETAIL"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultPageResultApiDetailVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/analysis/customization/summary": {
            "get": {
                "tags": [
                    "AnalysisCustomization"
                ],
                "summary": "Resource customization analysis.",
                "operationId": "analysis:customization:summary",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/CustomizationSummaryDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/analysis/customization/summary/definition": {
            "get": {
                "tags": [
                    "AnalysisCustomization"
                ],
                "summary": "Resource customization analysis definition.",
                "operationId": "analysis:customization:summary:definition",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultSummaryQueryDefinitionVo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/analysis/customization/summary/batch": {
            "get": {
                "tags": [
                    "AnalysisCustomization"
                ],
                "summary": "Batch resources customization analysis.",
                "operationId": "analysis:customization:summary:batch",
                "parameters": [
                    {
                        "name": "dto",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/CustomizationSummaryDto"
                            },
                            "maxItems": 2147483647,
                            "minItems": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultMapStringObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/ai/chat/result": {
            "get": {
                "tags": [
                    "AIChat"
                ],
                "summary": "Chat and return result",
                "operationId": "ai:chat:result",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Chat business type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Chat business type",
                            "enum": [
                                "WRITE_BACKLOG",
                                "SPLIT_SUB_TASK",
                                "WRITE_FUNC_CASE",
                                "WRITE_ANGUS_SCRIPT"
                            ]
                        }
                    },
                    {
                        "name": "question",
                        "in": "query",
                        "description": "Chat business question",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Chat business question",
                            "minLength": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultMapStringObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/to/user/{id}/role": {
            "delete": {
                "tags": [
                    "TOUserRole"
                ],
                "summary": "Delete the operation roles of user.",
                "operationId": "to:user:role:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "roleIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/to/role/{id}/user": {
            "delete": {
                "tags": [
                    "TOUserRole"
                ],
                "summary": "Delete the user operation roles.",
                "operationId": "to:role:user:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "userIds",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/event/channel/{id}": {
            "delete": {
                "tags": [
                    "EventChannel"
                ],
                "summary": "Delete receive event channel.",
                "operationId": "event:channel:delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Event channel id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Delete successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/policy": {
            "delete": {
                "tags": [
                    "AuthPolicyUser"
                ],
                "summary": "Delete the authorization policies of users.",
                "operationId": "auth:user:policy:delete:batch",
                "parameters": [
                    {
                        "name": "userIds",
                        "in": "query",
                        "description": "User ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    },
                    {
                        "name": "policyIds",
                        "in": "query",
                        "description": "Policy ids",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/token": {
            "delete": {
                "tags": [
                    "User"
                ],
                "operationId": "revokeToken",
                "parameters": [
                    {
                        "name": "access_token",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/tenant/app/{appId}/policy/default": {
            "delete": {
                "tags": [
                    "AuthPolicyTenant"
                ],
                "summary": "Delete user access application default policy, prevent new users to access the application.",
                "operationId": "auth:tenant:app:policy:default:delete",
                "parameters": [
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/group/policy": {
            "delete": {
                "tags": [
                    "AuthPolicyGroup"
                ],
                "summary": "Delete the authorization policies of groups.",
                "operationId": "auth:group:policy:delete:batch",
                "parameters": [
                    {
                        "name": "groupIds",
                        "in": "query",
                        "description": "Group ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    },
                    {
                        "name": "policyIds",
                        "in": "query",
                        "description": "Policy ids",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/dept/policy": {
            "delete": {
                "tags": [
                    "AuthPolicyDept"
                ],
                "summary": "Delete the authorization policies of departments.",
                "operationId": "auth:dept:policy:delete:batch",
                "parameters": [
                    {
                        "name": "deptIds",
                        "in": "query",
                        "description": "Department ids",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    },
                    {
                        "name": "policyIds",
                        "in": "query",
                        "description": "Policy ids",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 200,
                            "minItems": 0,
                            "uniqueItems": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/appopen/cancel": {
            "delete": {
                "tags": [
                    "AppOpen"
                ],
                "summary": "Cancel the opened application.",
                "operationId": "app:open:cancel",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppOpenCancelDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Cancel successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLocaleResultObject"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResultObject"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ApiResultObject": {
                "type": "object",
                "description": "These parameters collectively create a structured response that provides a clear and informative way for clients to understand the result of their API calls, including the status, any relevant messages, the response data, processing time, and any additional context needed for proper handling of the response.",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "object",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                },
                "readOnly": true
            },
            "UserDeptTo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User department id."
                    },
                    "name": {
                        "type": "string",
                        "description": "User department name."
                    },
                    "mainDept": {
                        "type": "boolean",
                        "description": "Whether or not main department flag."
                    },
                    "deptHead": {
                        "type": "boolean",
                        "description": "Whether or not department head flag."
                    }
                },
                "required": [
                    "id"
                ]
            },
            "UserReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User id. The ID is required when modifying an existing user, create a new user when the value is empty.",
                        "example": 1
                    },
                    "username": {
                        "type": "string",
                        "description": "Username, unique user identification.",
                        "maxLength": 100
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User first name.",
                        "example": "James",
                        "maxLength": 100
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name.",
                        "example": "Jones",
                        "maxLength": 100
                    },
                    "fullName": {
                        "type": "string",
                        "description": "User full name.",
                        "example": "James Jones",
                        "maxLength": 100
                    },
                    "country": {
                        "type": "string",
                        "description": "User country code.",
                        "example": "CN",
                        "maxLength": 16
                    },
                    "itc": {
                        "type": "string",
                        "description": "International telephone area code.",
                        "example": 86,
                        "maxLength": 8
                    },
                    "mobile": {
                        "type": "string",
                        "description": "User mobile.",
                        "example": 13813000000,
                        "maxLength": 16
                    },
                    "email": {
                        "type": "string",
                        "description": "User e-mail.",
                        "example": "james@xcan.cloud",
                        "maxLength": 100
                    },
                    "landline": {
                        "type": "string",
                        "description": "User landline.",
                        "example": "010-88287890",
                        "maxLength": 40
                    },
                    "password": {
                        "type": "string",
                        "description": "User signup password, used to log in to the system through the password.",
                        "example": "xcan@123"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "User avatar.",
                        "example": "http://prod-files.xcan.cloud/storage/pubapi/v1/file/logo.png",
                        "maxLength": 400
                    },
                    "title": {
                        "type": "string",
                        "description": "User title.",
                        "example": "CTO",
                        "maxLength": 100
                    },
                    "gender": {
                        "type": "string",
                        "default": "UNKNOWN",
                        "description": "User gender.",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "UNKNOWN"
                        ],
                        "example": "MALE"
                    },
                    "address": {
                        "type": "string",
                        "example": "User's residence or contact address.",
                        "maxLength": 200
                    },
                    "signupType": {
                        "type": "string",
                        "description": "User signup(registration) type. Note: Modification not allowed.",
                        "enum": [
                            "MOBILE",
                            "EMAIL",
                            "NOOP"
                        ],
                        "example": "EMAIL"
                    },
                    "signupAccount": {
                        "type": "string",
                        "description": "Account used during user signup(registration). The value is email or mobile. Note: Modification not allowed.",
                        "example": "Jams@123@xcan.cloud",
                        "maxLength": 100
                    },
                    "sysAdmin": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether or not system administrator flag. Note: Modification not allowed.",
                        "example": false
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether or not user enabled flag.",
                        "example": true
                    },
                    "invitationCode": {
                        "type": "string",
                        "description": "Platform invitation code, used to register the current user to an existing tenant account. Note: Modification not allowed.",
                        "maxLength": 80
                    },
                    "depts": {
                        "type": "array",
                        "description": "User's departments information, the maximum support is `2000`.",
                        "items": {
                            "$ref": "#/components/schemas/UserDeptTo"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "groupIds": {
                        "type": "array",
                        "description": "User's group ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "User association tag ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "password"
                ]
            },
            "ApiLocaleResultIdKeyLongObject": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/IdKeyLongObject",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiResult": {
                "type": "object",
                "description": "These parameters collectively create a structured response that provides a clear and informative way for clients to understand the result of their API calls, including the status, any relevant messages, the response data, processing time, and any additional context needed for proper handling of the response.",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "object",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                },
                "readOnly": true
            },
            "IdKeyLongObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "key": {
                        "type": "object"
                    }
                }
            },
            "ApiLocaleResultObject": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "object",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "DirectoryGroupSchema": {
                "type": "object",
                "properties": {
                    "objectClass": {
                        "type": "string",
                        "description": "LDAP attribute objectClass value to search for when loading groups",
                        "example": "posixGroup",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "objectFilter": {
                        "type": "string",
                        "description": "The filter to use when searching group objects",
                        "example": "(objectClass=posixGroup)",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "nameAttribute": {
                        "type": "string",
                        "description": "The attribute field to use when loading the group name",
                        "example": "cn",
                        "maxLength": 160,
                        "minLength": 1
                    },
                    "descriptionAttribute": {
                        "type": "string",
                        "description": "The attribute field to use when loading the group description",
                        "maxLength": 160
                    },
                    "ignoreSameNameGroup": {
                        "type": "boolean",
                        "description": "If true ignore the same name group, otherwise, save the same name group"
                    }
                },
                "required": [
                    "ignoreSameNameGroup",
                    "nameAttribute",
                    "objectClass",
                    "objectFilter"
                ]
            },
            "DirectoryMembershipSchema": {
                "type": "object",
                "properties": {
                    "groupMemberAttribute": {
                        "type": "string",
                        "description": "The attribute field to use when loading the group members from the group",
                        "example": "memberUid",
                        "maxLength": 160,
                        "minLength": 1
                    },
                    "memberGroupAttribute": {
                        "type": "string",
                        "description": "The attribute field to use when loading a user's groups",
                        "example": "gidNumber",
                        "maxLength": 160,
                        "minLength": 1
                    }
                },
                "required": [
                    "groupMemberAttribute",
                    "memberGroupAttribute"
                ]
            },
            "DirectorySchema": {
                "type": "object",
                "properties": {
                    "baseDn": {
                        "type": "string",
                        "description": "Base DN, Root node in LDAP from which to search for users and groups.",
                        "example": "dc=example,dc=org",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "additionalUserDn": {
                        "type": "string",
                        "description": "Additional User DN, Prepended to the base DN to limit the scope when searching for users.",
                        "example": "ou=user",
                        "maxLength": 400
                    },
                    "additionalGroupDn": {
                        "type": "string",
                        "description": "Additional Group DN, Prepended to the base DN to limit the scope when searching for groups.",
                        "example": "ou=group",
                        "maxLength": 400
                    }
                },
                "required": [
                    "baseDn"
                ]
            },
            "DirectoryServer": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Server name",
                        "example": "XCanLdap",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "directoryType": {
                        "type": "string",
                        "description": "Directory Type",
                        "enum": [
                            "MicrosoftActiveDirectory",
                            "ApacheDS",
                            "AppleOpenDirectory",
                            "FedoraDS",
                            "GenericLDAP",
                            "NovelleDirectory",
                            "OpenDS",
                            "OpenLDAP",
                            "SunDirectory"
                        ],
                        "example": "OPENLDAP"
                    },
                    "host": {
                        "type": "string",
                        "description": "Hostname of the server running LDAP",
                        "example": "ldap.example.com",
                        "maxLength": 200,
                        "minLength": 1
                    },
                    "port": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Server port, default 389 or ssl 636",
                        "example": 389
                    },
                    "ssl": {
                        "type": "boolean",
                        "description": "Whether to use SSL flag, default false",
                        "example": false
                    },
                    "username": {
                        "type": "string",
                        "description": "Auth username",
                        "example": "cn=admin,dc=example,dc=org",
                        "maxLength": 200,
                        "minLength": 1
                    },
                    "password": {
                        "type": "string",
                        "description": "Auth password",
                        "example": "admin",
                        "maxLength": 400,
                        "minLength": 1
                    }
                },
                "required": [
                    "directoryType",
                    "host",
                    "name",
                    "password",
                    "port",
                    "ssl",
                    "username"
                ]
            },
            "DirectoryUserSchema": {
                "type": "object",
                "properties": {
                    "objectClass": {
                        "type": "string",
                        "description": "The LDAP user object class type to use when loading users",
                        "example": "posixAccount",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "objectFilter": {
                        "type": "string",
                        "description": "The filter to use when searching user objects",
                        "example": "(objectclass=posixAccount)",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "usernameAttribute": {
                        "type": "string",
                        "description": "Attribute field corresponding to user unique name",
                        "example": "uid",
                        "maxLength": 160,
                        "minLength": 1
                    },
                    "firstNameAttribute": {
                        "type": "string",
                        "description": "The attribute field to use when loading the user first name",
                        "example": "givenName",
                        "maxLength": 160,
                        "minLength": 1
                    },
                    "lastNameAttribute": {
                        "type": "string",
                        "description": "The attribute field to use when loading the user last name",
                        "example": "sn",
                        "maxLength": 160,
                        "minLength": 1
                    },
                    "displayNameAttribute": {
                        "type": "string",
                        "description": "The attribute field to use when loading the user full name (Fullname)",
                        "example": "cn",
                        "maxLength": 160,
                        "minLength": 1
                    },
                    "emailAttribute": {
                        "type": "string",
                        "description": "The attribute field to use when loading the user email",
                        "example": "mail",
                        "maxLength": 160,
                        "minLength": 1
                    },
                    "mobileAttribute": {
                        "type": "string",
                        "description": "The attribute field to use when loading the user mobile",
                        "example": "mobile",
                        "maxLength": 160
                    },
                    "passwordAttribute": {
                        "type": "string",
                        "description": "The attribute field to use when manipulating a user password",
                        "example": "userPassword",
                        "maxLength": 160,
                        "minLength": 1
                    },
                    "passwordEncoderType": {
                        "type": "string",
                        "description": "Choose the encryption algorithm used for passwords on your directory",
                        "enum": [
                            "PLAINTEXT",
                            "BCRYPT",
                            "MD4",
                            "MD5",
                            "PBKDF2",
                            "SCRYPT",
                            "SHA1",
                            "SHA256",
                            "ARGON2"
                        ]
                    },
                    "ignoreSameIdentityUser": {
                        "type": "boolean",
                        "description": "Force ignore the same identity(unique name, email, mobile) user"
                    }
                },
                "required": [
                    "displayNameAttribute",
                    "emailAttribute",
                    "firstNameAttribute",
                    "ignoreSameIdentityUser",
                    "lastNameAttribute",
                    "objectClass",
                    "objectFilter",
                    "passwordAttribute",
                    "usernameAttribute"
                ]
            },
            "UserDirectoryReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Directory id."
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Sorting value, the synchronization priority is high if the value is small."
                    },
                    "server": {
                        "$ref": "#/components/schemas/DirectoryServer",
                        "description": "Server Settings."
                    },
                    "schema": {
                        "$ref": "#/components/schemas/DirectorySchema",
                        "description": "LDAP Schema."
                    },
                    "userSchema": {
                        "$ref": "#/components/schemas/DirectoryUserSchema",
                        "description": "LDAP user schema."
                    },
                    "groupSchema": {
                        "$ref": "#/components/schemas/DirectoryGroupSchema",
                        "description": "LDAP group schema."
                    },
                    "membershipSchema": {
                        "$ref": "#/components/schemas/DirectoryMembershipSchema",
                        "description": "LDAP membership schema."
                    }
                },
                "required": [
                    "id",
                    "schema",
                    "server",
                    "userSchema"
                ]
            },
            "ApiLocaleResultUserDirectorySyncVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/UserDirectorySyncVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "UserDirectorySyncVo": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "Synchronization success flag."
                    },
                    "connectSuccess": {
                        "type": "boolean",
                        "description": "Connect server success flag."
                    },
                    "userSuccess": {
                        "type": "boolean",
                        "description": "User synchronization success flag."
                    },
                    "groupSuccess": {
                        "type": "boolean",
                        "description": "Group synchronization success flag."
                    },
                    "membershipSuccess": {
                        "type": "boolean",
                        "description": "Membership synchronization success flag."
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Reason for synchronization failure."
                    },
                    "totalUserNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of total users in the directory."
                    },
                    "addUserNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of new users after synchronization."
                    },
                    "updateUserNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Modify the number of users after synchronization."
                    },
                    "deleteUserNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Delete the number of users that do not exist in the current directory after synchronization."
                    },
                    "ignoreUserNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Ignore the number of users that already exist in other directories after synchronization."
                    },
                    "totalGroupNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of total groups in the directory."
                    },
                    "addGroupNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of new groups after synchronization."
                    },
                    "updateGroupNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Modify the number of groups after synchronization."
                    },
                    "deleteGroupNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Delete the number of groups that do not exist in the current directory after synchronization."
                    },
                    "ignoreGroupNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Ignore the number of groups that already exist in other directories after synchronization."
                    },
                    "addMembershipNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of new user group membership after synchronization."
                    },
                    "deleteMembershipNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Delete the number of new user group membership after synchronization."
                    }
                }
            },
            "ApiLocaleResultMapStringUserDirectorySyncVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/UserDirectorySyncVo"
                        },
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "TORoleReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Operation role id. The ID is required when modifying an existing role, create a new role when the value is empty.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Operation role name.",
                        "example": "System administrator",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Operation role code. Note: Modification not allowed.",
                        "example": "TOP_TENANT_ADMIN",
                        "maxLength": 80
                    },
                    "description": {
                        "type": "string",
                        "description": "Operation role description.",
                        "example": "System management policy",
                        "maxLength": 80
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Operation application id.",
                        "example": 1
                    }
                },
                "required": [
                    "appId",
                    "name"
                ]
            },
            "ApiLocaleResultListIdKeyLongObject": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/IdKeyLongObject"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "EnterpriseCert": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Company name.",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "creditCode": {
                        "type": "string",
                        "description": "Taxpayer identification number.",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "businessLicensePicUrl": {
                        "type": "string",
                        "description": "Business license picture url.",
                        "maxLength": 400,
                        "minLength": 1
                    }
                },
                "required": [
                    "businessLicensePicUrl",
                    "creditCode",
                    "name"
                ]
            },
            "EnterpriseLegalPersonCert": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Enterprise legal person name.",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "certNo": {
                        "type": "string",
                        "description": "The ID card no of enterprise legal person.",
                        "maxLength": 20,
                        "minLength": 1
                    },
                    "certFrontPicUrl": {
                        "type": "string",
                        "description": "The ID card front url of enterprise legal person.",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "certBackPicUrl": {
                        "type": "string",
                        "description": "The ID card back url of enterprise legal person.",
                        "maxLength": 400,
                        "minLength": 1
                    }
                },
                "required": [
                    "certBackPicUrl",
                    "certFrontPicUrl",
                    "certNo",
                    "name"
                ]
            },
            "GovernmentCert": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Government organization name.",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "orgCode": {
                        "type": "string",
                        "description": "Government organization code.",
                        "maxLength": 20,
                        "minLength": 1
                    },
                    "orgCertPicUrl": {
                        "type": "string",
                        "description": "The back url of government organization cert.",
                        "maxLength": 400,
                        "minLength": 1
                    }
                },
                "required": [
                    "name",
                    "orgCertPicUrl",
                    "orgCode"
                ]
            },
            "PersonalCert": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Personal user name.",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "certNo": {
                        "type": "string",
                        "description": "Personal user ID Card No.",
                        "maxLength": 20,
                        "minLength": 1
                    },
                    "certFrontPicUrl": {
                        "type": "string",
                        "description": "The front url of personal user ID card.",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "certBackPicUrl": {
                        "type": "string",
                        "description": "The back url of personal user ID card.",
                        "maxLength": 400,
                        "minLength": 1
                    }
                },
                "required": [
                    "certBackPicUrl",
                    "certFrontPicUrl",
                    "certNo",
                    "name"
                ]
            },
            "TenantReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Tenant id.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Tenant name.",
                        "example": "XCan Company",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "Tenant type.",
                        "enum": [
                            "PERSONAL",
                            "ENTERPRISE",
                            "GOVERNMENT",
                            "UNKNOWN"
                        ]
                    },
                    "remark": {
                        "type": "string",
                        "description": "Tenant remark.",
                        "maxLength": 200
                    },
                    "address": {
                        "type": "string",
                        "description": "Tenant contact address.",
                        "maxLength": 200
                    },
                    "firstName": {
                        "type": "string",
                        "description": "System administer first name.",
                        "example": "James",
                        "maxLength": 100
                    },
                    "lastName": {
                        "type": "string",
                        "description": "System administer last name.",
                        "example": "Jones",
                        "maxLength": 100
                    },
                    "fullName": {
                        "type": "string",
                        "description": "System administer full name.",
                        "example": "James Jones",
                        "maxLength": 100
                    },
                    "title": {
                        "type": "string",
                        "description": "System administer title.",
                        "example": "CTO",
                        "maxLength": 100
                    },
                    "itc": {
                        "type": "string",
                        "description": "International telephone area code.",
                        "example": 86,
                        "maxLength": 8
                    },
                    "country": {
                        "type": "string",
                        "description": "User country code.",
                        "example": "CN",
                        "maxLength": 16
                    },
                    "mobile": {
                        "type": "string",
                        "description": "System administer mobile. There must be one mobile and email address.",
                        "example": 13813000000,
                        "maxLength": 16,
                        "minLength": 1
                    },
                    "email": {
                        "type": "string",
                        "description": "System administer email. There must be one mobile and email address.",
                        "example": "james@xcan.cloud",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "personalCert": {
                        "$ref": "#/components/schemas/PersonalCert"
                    },
                    "enterpriseCert": {
                        "$ref": "#/components/schemas/EnterpriseCert"
                    },
                    "enterpriseLegalPersonCert": {
                        "$ref": "#/components/schemas/EnterpriseLegalPersonCert"
                    },
                    "governmentCert": {
                        "$ref": "#/components/schemas/GovernmentCert"
                    },
                    "certSubmitted": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "email",
                    "firstName",
                    "fullName",
                    "id",
                    "lastName",
                    "mobile",
                    "name"
                ]
            },
            "AIAgent": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "provider": {
                        "type": "string",
                        "minLength": 1
                    },
                    "agentId": {
                        "type": "string"
                    },
                    "chatIframe": {
                        "type": "string"
                    },
                    "extensions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "ApiLogProperties": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "loggerService": {
                        "type": "string"
                    },
                    "eventService": {
                        "type": "string"
                    },
                    "printLevel": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "BASIC",
                            "HEADERS",
                            "FULL"
                        ]
                    },
                    "clearBeforeDay": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "systemRequest": {
                        "$ref": "#/components/schemas/SystemRequest"
                    }
                }
            },
            "GitHubSocial": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "string"
                    },
                    "secret": {
                        "type": "string"
                    },
                    "callback": {
                        "type": "string"
                    },
                    "codeUrl": {
                        "type": "string"
                    },
                    "tokenUrl": {
                        "type": "string"
                    },
                    "userInfoUrl": {
                        "type": "string"
                    }
                }
            },
            "GoogleSocial": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "string"
                    },
                    "secret": {
                        "type": "string"
                    },
                    "callback": {
                        "type": "string"
                    },
                    "codeUrl": {
                        "type": "string"
                    },
                    "tokenUrl": {
                        "type": "string"
                    },
                    "userInfoUrl": {
                        "type": "string"
                    }
                }
            },
            "OperationLogProperties": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable operation log configuration"
                    },
                    "clearBeforeDay": {
                        "type": "integer",
                        "format": "int32",
                        "description": "How many days ago to clear the log, default 30"
                    }
                }
            },
            "SettingValueReplaceDto": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The setting key needs to be updated, Only allowed to be modified in the privatized edition",
                        "enum": [
                            "LOCALE",
                            "SECURITY",
                            "SOCIAL",
                            "QUOTA",
                            "FUNC_INDICATOR",
                            "PREF_INDICATOR",
                            "STABILITY_INDICATOR",
                            "OPERATION_LOG_CONFIG",
                            "API_LOG_CONFIG",
                            "SYSTEM_LOG_CONFIG",
                            "MAX_RESOURCE_ACTIVITIES",
                            "MAX_METRICS_DAYS",
                            "TESTER_EVENT",
                            "AI_AGENT"
                        ]
                    },
                    "social": {
                        "$ref": "#/components/schemas/SocialTo",
                        "description": "Third-party social account login system configuration."
                    },
                    "aiAgent": {
                        "$ref": "#/components/schemas/AIAgent",
                        "description": "AI agent configuration."
                    },
                    "healthCheck": {
                        "$ref": "#/components/schemas/TenantHealthCheckDto",
                        "description": "Tenant health check notification configuration."
                    },
                    "apiLog": {
                        "$ref": "#/components/schemas/ApiLogProperties",
                        "description": "API request log configuration."
                    },
                    "operationLog": {
                        "$ref": "#/components/schemas/OperationLogProperties",
                        "description": "System user operation log configuration."
                    },
                    "systemLog": {
                        "$ref": "#/components/schemas/SystemLogProperties",
                        "description": "System log configuration."
                    },
                    "maxResourceActivities": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Maximum resource activity count.",
                        "minimum": 0
                    },
                    "maxMetricsDays": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Maximum metrics retention days.",
                        "minimum": 0
                    }
                },
                "required": [
                    "key"
                ]
            },
            "SocialTo": {
                "type": "object",
                "properties": {
                    "weChatSocial": {
                        "$ref": "#/components/schemas/WeChatSocial"
                    },
                    "gitHubSocial": {
                        "$ref": "#/components/schemas/GitHubSocial"
                    },
                    "googleSocial": {
                        "$ref": "#/components/schemas/GoogleSocial"
                    },
                    "loginRedirectUrl": {
                        "type": "string"
                    },
                    "loginBindRedirectUrl": {
                        "type": "string"
                    },
                    "bindRedirectUrl": {
                        "type": "string"
                    }
                }
            },
            "SystemLogProperties": {
                "type": "object",
                "properties": {
                    "clearWay": {
                        "type": "string",
                        "description": "System log clearing way, default CLEAR_BEFORE_DAY",
                        "enum": [
                            "CLEAR_BEFORE_DAY",
                            "COMPRESSION_MOVE",
                            "CLEAR_BY_DISK_SIZE"
                        ],
                        "example": "CLEAR_BEFORE_DAY"
                    },
                    "clearBeforeDay": {
                        "type": "integer",
                        "format": "int32",
                        "description": "How many days ago to clear the log, default 15"
                    },
                    "compressionBeforeDay": {
                        "type": "integer",
                        "format": "int32",
                        "description": "How many days ago to compress the log, default 15"
                    },
                    "compressionMovePath": {
                        "type": "string",
                        "description": "Move to position after compression, default /data/backup/logs"
                    },
                    "diskUsageExceedsRate": {
                        "type": "number",
                        "format": "double",
                        "description": "Clean up when disk usage exceeds, default 0.8"
                    },
                    "diskUsageExceedsAndClearBeforeDay": {
                        "type": "integer",
                        "format": "int32",
                        "description": "How many days ago to clear the log when the disk usage exceeds the limit, default 15"
                    }
                }
            },
            "SystemRequest": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "maxPayloadLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "defaultIgnorePattern": {
                        "type": "string"
                    },
                    "customIgnorePattern": {
                        "type": "string"
                    },
                    "pushLoggerService": {
                        "type": "boolean"
                    },
                    "pushLoggerServiceIgnorePattern": {
                        "type": "string"
                    }
                }
            },
            "TenantHealthCheckDto": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Enable health check flag.",
                        "example": true
                    },
                    "alarmWay": {
                        "type": "array",
                        "description": "Alarm way when abnormal.",
                        "enum": [
                            "SMS",
                            "EMAIL"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "EMAIL",
                                "SMS"
                            ]
                        }
                    },
                    "receiveUser": {
                        "type": "array",
                        "description": "Abnormal alarm recipient. supports up to `50` users.",
                        "items": {
                            "$ref": "#/components/schemas/UserName"
                        },
                        "maxItems": 50,
                        "minItems": 0
                    }
                }
            },
            "UserName": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User id."
                    },
                    "fullName": {
                        "type": "string",
                        "description": "User full name.",
                        "maxLength": 100
                    }
                }
            },
            "WeChatSocial": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "string"
                    },
                    "secret": {
                        "type": "string"
                    },
                    "callback": {
                        "type": "string"
                    },
                    "codeUrl": {
                        "type": "string"
                    },
                    "userInfoUrl": {
                        "type": "string"
                    }
                }
            },
            "TesterEvent": {
                "type": "object",
                "properties": {
                    "eventCode": {
                        "type": "string"
                    },
                    "noticeTypes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "SMS",
                                "EMAIL",
                                "IN_SITE"
                            ]
                        }
                    }
                }
            },
            "Alarm": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Enable alarm flag."
                    },
                    "alarmWay": {
                        "type": "array",
                        "description": "Alarm way when abnormal.",
                        "enum": [
                            "SMS",
                            "EMAIL"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "EMAIL",
                                "SMS"
                            ]
                        }
                    },
                    "receiveUser": {
                        "type": "array",
                        "description": "Abnormal alarm recipient. supports up to `50` users.",
                        "items": {
                            "$ref": "#/components/schemas/UserName"
                        },
                        "maxItems": 50,
                        "minItems": 0
                    }
                }
            },
            "PasswordPolicy": {
                "type": "object",
                "properties": {
                    "minLength": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "SecurityTo": {
                "type": "object",
                "properties": {
                    "signinLimit": {
                        "$ref": "#/components/schemas/SigninLimit",
                        "description": "Signin security configuration"
                    },
                    "signupAllow": {
                        "$ref": "#/components/schemas/SignupAllow",
                        "description": "Allow signup security configuration"
                    },
                    "passwordPolicy": {
                        "$ref": "#/components/schemas/PasswordPolicy",
                        "description": "Password security policy configuration"
                    },
                    "alarm": {
                        "$ref": "#/components/schemas/Alarm",
                        "description": "Security policy alarm configuration"
                    }
                }
            },
            "SigninLimit": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Enable sign-in limit."
                    },
                    "signoutPeriodInMinutes": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Automatically signout when the user does not operate for a long time."
                    },
                    "passwordErrorIntervalInMinutes": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Calculate password error interval."
                    },
                    "lockedPasswordErrorNum": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of locked account and password errors."
                    },
                    "lockedDurationInMinutes": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Duration of account locking."
                    }
                }
            },
            "SignupAllow": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Enable signup limit."
                    },
                    "invitationCode": {
                        "type": "string",
                        "example": "IC000101819Sqi"
                    }
                }
            },
            "QuotaReplaceDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Quota resource name.",
                        "enum": [
                            "User",
                            "UserDept",
                            "UserGroup",
                            "Dept",
                            "DeptLevel",
                            "DeptUser",
                            "Group",
                            "GroupUser",
                            "OrgTag",
                            "OrgTargetTag",
                            "PolicyCustom",
                            "SystemToken",
                            "UserToken",
                            "FileStore",
                            "DataSpace",
                            "AngusTesterProject",
                            "AngusTesterServices",
                            "AngusTesterApis",
                            "AngusTesterServicesApis",
                            "AngusTesterVariable",
                            "AngusTesterTargetVariable",
                            "AngusTesterDataset",
                            "AngusTesterTargetDataset",
                            "AngusTesterScenario",
                            "AngusTesterScenarioApis",
                            "AngusTesterMockService",
                            "AngusTesterMockServiceApis",
                            "AngusTesterMockApisResponse",
                            "AngusTesterMockIterations",
                            "AngusTesterMockDatasource",
                            "AngusTesterNode",
                            "AngusTesterConcurrency",
                            "AngusTesterConcurrentTask",
                            "AngusTesterScript",
                            "AngusTesterExecution",
                            "AngusTesterExecutionDebug",
                            "AngusTesterReport",
                            "AngusTesterSprint",
                            "AngusTesterTask",
                            "AngusTesterSprintTask",
                            "AngusTesterFuncPlan",
                            "AngusTesterFuncCase",
                            "AngusTesterFuncPlanCase",
                            "AngusTesterTag",
                            "AngusTesterModule"
                        ]
                    },
                    "quota": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Quota value, storage disk must be converted to bytes."
                    }
                },
                "required": [
                    "name",
                    "quota"
                ]
            },
            "ApiLocaleResultLong": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "integer",
                        "format": "int64",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "TenantLocaleReplaceDto": {
                "type": "object",
                "properties": {
                    "defaultLanguage": {
                        "type": "string",
                        "default": "zh_CN",
                        "description": "Default language.",
                        "enum": [
                            "en",
                            "zh_CN"
                        ],
                        "example": "zh_CN"
                    }
                },
                "required": [
                    "defaultLanguage"
                ]
            },
            "StabilityTo": {
                "type": "object",
                "properties": {
                    "threads": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of concurrent threads(VU).",
                        "minimum": 1
                    },
                    "duration": {
                        "$ref": "#/components/schemas/TimeValue",
                        "description": "Duration of task execution, when iterations and duration are not configured, they will automatically execute for 5 minutes."
                    },
                    "tps": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Operations per second(QPS/TPS).",
                        "minimum": 1
                    },
                    "art": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Average response time in milliseconds(ART,ms).",
                        "minimum": 1
                    },
                    "percentile": {
                        "type": "string",
                        "description": "Average response time percentile.",
                        "enum": [
                            "P50",
                            "P75",
                            "P90",
                            "P95",
                            "P99",
                            "P999",
                            "ALL"
                        ]
                    },
                    "errorRate": {
                        "type": "number",
                        "format": "double",
                        "description": "Error rate (ERROR)/%.",
                        "maximum": 100,
                        "minimum": 0
                    },
                    "cpu": {
                        "type": "number",
                        "format": "double",
                        "description": "Application node CPU usage rate.",
                        "maximum": 100,
                        "minimum": 0
                    },
                    "memory": {
                        "type": "number",
                        "format": "double",
                        "description": "Application node memory usage rate.",
                        "maximum": 100,
                        "minimum": 0
                    },
                    "disk": {
                        "type": "number",
                        "format": "double",
                        "description": "Application node disk usage rate.",
                        "maximum": 100,
                        "minimum": 0
                    },
                    "network": {
                        "type": "number",
                        "format": "double",
                        "description": "Application node network usage rate.",
                        "maximum": 10000,
                        "minimum": 0
                    }
                },
                "required": [
                    "duration",
                    "errorRate",
                    "threads",
                    "tps"
                ]
            },
            "TimeValue": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "unit": {
                        "type": "string",
                        "enum": [
                            "Millisecond",
                            "Second",
                            "Minute",
                            "Hour",
                            "Day"
                        ]
                    }
                }
            },
            "PerfTo": {
                "type": "object",
                "properties": {
                    "threads": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of concurrent threads(VU).",
                        "minimum": 1
                    },
                    "duration": {
                        "$ref": "#/components/schemas/TimeValue",
                        "description": "Duration of task execution, when iterations and duration are not configured, they will automatically execute for `30` seconds."
                    },
                    "rampUpThreads": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Adjust ramp up thread number, the value does not exceed the threads.",
                        "minimum": 0
                    },
                    "rampUpInterval": {
                        "$ref": "#/components/schemas/TimeValue",
                        "description": "Adjust ramp up thread interval, the value does not exceed the duration."
                    },
                    "art": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Average response time in milliseconds(ART,ms).",
                        "minimum": 1
                    },
                    "percentile": {
                        "type": "string",
                        "description": "Average response time percentile.",
                        "enum": [
                            "P50",
                            "P75",
                            "P90",
                            "P95",
                            "P99",
                            "P999",
                            "ALL"
                        ]
                    },
                    "tps": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Operations per second(QPS/TPS).",
                        "minimum": 1
                    },
                    "errorRate": {
                        "type": "number",
                        "format": "double",
                        "description": "Error rate (ERROR)/%.",
                        "maximum": 100,
                        "minimum": 0
                    }
                },
                "required": [
                    "duration",
                    "errorRate",
                    "threads",
                    "tps"
                ]
            },
            "FuncTo": {
                "type": "object",
                "properties": {
                    "smoke": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Enabled or disabled smoke testing."
                    },
                    "smokeCheckSetting": {
                        "type": "string",
                        "description": "Smoke testing configuration.",
                        "enum": [
                            "SERVICE_AVAILABLE",
                            "API_AVAILABLE",
                            "USER_DEFINED_ASSERTION"
                        ]
                    },
                    "userDefinedSmokeAssertion": {
                        "type": "object",
                        "description": "User-defined check smoke testing assertion."
                    },
                    "security": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Enabled or disabled security testing."
                    },
                    "securityCheckSetting": {
                        "type": "string",
                        "description": "Security testing configuration.",
                        "enum": [
                            "NOT_SECURITY_CODE",
                            "IS_SECURITY_CODE",
                            "USER_DEFINED_ASSERTION"
                        ]
                    },
                    "userDefinedSecurityAssertion": {
                        "type": "object",
                        "description": "User-defined check security testing assertion."
                    }
                },
                "required": [
                    "security",
                    "securityCheckSetting",
                    "smoke",
                    "smokeCheckSetting"
                ]
            },
            "TenantServerApiProxyTo": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not enabled flag.",
                        "example": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The api proxy url of server client.",
                        "example": "ws://localhost:6806",
                        "maxLength": 200,
                        "minLength": 1
                    }
                },
                "required": [
                    "enabled",
                    "url"
                ]
            },
            "ServiceReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Service id. The ID is required when modifying an existing service, create a new service when the value is empty.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Service name.",
                        "example": "User center service",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Service code. Note: Modification not allowed.",
                        "example": "ANGUSGM",
                        "maxLength": 80
                    },
                    "description": {
                        "type": "string",
                        "description": "Service description.",
                        "example": "User center service, providing complete tenant, organization, and user management service capabilities, etc.",
                        "maxLength": 200
                    },
                    "source": {
                        "type": "string",
                        "description": "Service source.",
                        "enum": [
                            "BACK_ADD",
                            "EUREKA"
                        ]
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether or not enabled service flag. Note: Modification not allowed."
                    },
                    "routePath": {
                        "type": "string",
                        "description": "The route path in api gateway of service.",
                        "example": "/uc",
                        "maxLength": 80
                    },
                    "url": {
                        "type": "string",
                        "description": "The access url of service.",
                        "example": "http://local-api.xcan.cloud:1806",
                        "maxLength": 400
                    },
                    "healthUrl": {
                        "type": "string",
                        "description": "The health checking url of service.",
                        "example": "http://local-api.xcan.cloud:1806/actuator/health",
                        "maxLength": 400
                    },
                    "apiDocUrl": {
                        "type": "string",
                        "description": "The OpenAPI doc url of service.",
                        "example": "http://local-api.xcan.cloud:1806/v3/api-docs?group=Api",
                        "maxLength": 400
                    }
                },
                "required": [
                    "name"
                ]
            },
            "GroupReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Group id. The ID is required when modifying an existing group, create a new group when the value is empty.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Group name.",
                        "example": "Product Group",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Group code.",
                        "example": "PRODUCT_001",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "remark": {
                        "type": "string",
                        "description": "Group remark.",
                        "example": "This a group remark ...",
                        "maxLength": 200
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Group association tag ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0
                    }
                },
                "required": [
                    "code",
                    "name"
                ]
            },
            "EventTemplateReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Event template id. The ID is required when modifying an existing template, create a new template when the value is empty.",
                        "example": 1
                    },
                    "appCode": {
                        "type": "string",
                        "description": "Application code of the event.",
                        "maxLength": 40,
                        "minLength": 1
                    },
                    "eventCode": {
                        "type": "string",
                        "description": "Template event code.",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "eventName": {
                        "type": "string",
                        "description": "Template event name.",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "eventType": {
                        "type": "string",
                        "description": "Template event type.",
                        "enum": [
                            "BUSINESS",
                            "SECURITY",
                            "QUOTA",
                            "SYSTEM",
                            "OPERATION",
                            "PROTOCOL",
                            "API",
                            "NOTICE",
                            "OTHER"
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "description": "Resource type of the event.",
                        "maxLength": 40
                    },
                    "private0": {
                        "type": "boolean",
                        "description": "Whether or not privatized edition template flag."
                    },
                    "allowedChannelTypes": {
                        "type": "array",
                        "description": "Receiving channels allowed or supported by the event template.",
                        "items": {
                            "type": "string",
                            "enum": [
                                "WEBHOOK",
                                "EMAIL",
                                "DINGTALK",
                                "WECHAT"
                            ]
                        },
                        "uniqueItems": true
                    }
                },
                "required": [
                    "appCode",
                    "eventCode",
                    "eventName",
                    "eventType",
                    "private0"
                ]
            },
            "EventTemplateReceiverDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Event template id."
                    },
                    "receiverTypes": {
                        "type": "array",
                        "description": "Template event receiver types. At least one of receiverTypes and receiverIds is required, event notification will also be sent when both exist.",
                        "items": {
                            "type": "string",
                            "enum": [
                                "TESTER",
                                "EXECUTOR",
                                "OWNER",
                                "FOLLOWER",
                                "APP_ADMIN",
                                "OTHER"
                            ]
                        },
                        "uniqueItems": true
                    },
                    "receiverIds": {
                        "type": "array",
                        "description": "Template event receiver ids. At least one of receiverTypes and receiverIds is required, event notification will also be sent when both exist. Supports a maximum of `200` recipients.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 200,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "noticeTypes": {
                        "type": "array",
                        "description": "Event notification method types.",
                        "items": {
                            "type": "string",
                            "enum": [
                                "SMS",
                                "EMAIL",
                                "IN_SITE"
                            ]
                        },
                        "uniqueItems": true
                    }
                },
                "required": [
                    "id"
                ]
            },
            "EventTemplateChannelReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Event template id."
                    },
                    "channelIds": {
                        "type": "array",
                        "description": "Event template channel ids. If the value is empty, the event channels will be cleared.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "uniqueItems": true
                    }
                },
                "required": [
                    "id"
                ]
            },
            "EventChannelReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Event channel id. The ID is required when modifying an existing channel, create a new channel when the value is empty.",
                        "example": 1
                    },
                    "channelType": {
                        "type": "string",
                        "description": "Event channel type. ",
                        "enum": [
                            "WEBHOOK",
                            "EMAIL",
                            "DINGTALK",
                            "WECHAT"
                        ],
                        "example": "WECHAT"
                    },
                    "name": {
                        "type": "string",
                        "description": "Event channel name.",
                        "example": "WeChat Reboot",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "address": {
                        "type": "string",
                        "description": "Event channel address. When it is `EMAIL` type, multiple addresses are separated by English commas.",
                        "example": "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=9e3b6ca1-2d3d-4cc2-8314-153871c7ccaf",
                        "maxLength": 4000,
                        "minLength": 1
                    }
                },
                "required": [
                    "address",
                    "channelType",
                    "name"
                ]
            },
            "AuthAccountTo": {
                "type": "object",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "Authentication account username.",
                        "example": "test@xcan.cloud",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "password": {
                        "type": "string",
                        "description": "Authentication account password.",
                        "example": "xcan@123",
                        "maxLength": 50
                    }
                },
                "required": [
                    "account"
                ]
            },
            "ServerReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Email server id. The ID is required when modifying an existing server, create a new server when the value is empty.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Mail server name.",
                        "example": "XCan Email Server",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Mail server protocol, only `SMTP` is supported.",
                        "enum": [
                            "SMTP"
                        ]
                    },
                    "remark": {
                        "type": "string",
                        "description": "Email server remark.",
                        "maxLength": 100
                    },
                    "host": {
                        "type": "string",
                        "description": "Email server hostname, ip or domain.",
                        "example": "smtp.xcancloud.com",
                        "maxLength": 200,
                        "minLength": 1
                    },
                    "port": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Email server port.",
                        "example": 465,
                        "maximum": 65535,
                        "minimum": 1
                    },
                    "startTlsEnabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether to enable starttls when connecting to the mail server."
                    },
                    "sslEnabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether to enable socket when communicating with the mail server."
                    },
                    "authEnabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether mail server authentication is required."
                    },
                    "authAccount": {
                        "$ref": "#/components/schemas/AuthAccountTo",
                        "description": "Email server authentication account information."
                    },
                    "subjectPrefix": {
                        "type": "string",
                        "description": "Email subject prefix.",
                        "maxLength": 80
                    }
                },
                "required": [
                    "host",
                    "name",
                    "port",
                    "protocol"
                ]
            },
            "DeptReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Department id. The ID is required when modifying an existing department, create a new department when the value is empty.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Department name.",
                        "example": "MarketingDepartment",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Department code.",
                        "example": "HR",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Parent department id.",
                        "example": -1
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Department association tag ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0
                    }
                },
                "required": [
                    "code",
                    "name",
                    "pid"
                ]
            },
            "DeptHeadReplaceDto": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User id.",
                        "example": 1
                    },
                    "head": {
                        "type": "boolean",
                        "description": "Whether or not the department head flag.",
                        "example": true
                    }
                },
                "required": [
                    "head",
                    "userId"
                ]
            },
            "ClientReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Client primary key id. The ID is required when modifying an existing client, create a new client when the value is empty.",
                        "maxLength": 40
                    },
                    "clientId": {
                        "type": "string",
                        "description": "OAuth2 registered client identifier. The clientId uniquely identifies an application to the OAuth2 server, enabling authorization and token requests. Note: The modification is not allowed.",
                        "maxLength": 100
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "OAuth2 registered client secret or null if not available. The client secret securely authenticates the application's identity, ensuring only trusted clients access protected resources.",
                        "maxLength": 200
                    },
                    "clientSecretExpiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time at which the client secret expires or null if it does not expire.."
                    },
                    "clientName": {
                        "type": "string",
                        "description": "OAuth2 registered client name.",
                        "maxLength": 200,
                        "minLength": 1
                    },
                    "clientAuthenticationMethods": {
                        "type": "array",
                        "description": "The authentication method(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "uniqueItems": true
                    },
                    "authorizationGrantTypes": {
                        "type": "array",
                        "description": "The authorization grant type(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "uniqueItems": true
                    },
                    "redirectUris": {
                        "type": "array",
                        "description": "The redirect URI(s) that the client may use in redirect-based flows.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "postLogoutRedirectUris": {
                        "type": "array",
                        "description": "The post logout redirect URI(s) that the client may use for logout. The post_logout_redirect_uri parameter is used by the client when requesting that the End-User's User Agent be redirected to after a logout has been performed.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "scopes": {
                        "type": "array",
                        "description": "The scope(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "uniqueItems": true
                    },
                    "clientSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The client configuration settings.",
                        "minProperties": 1
                    },
                    "tokenSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The token configuration settings.",
                        "minProperties": 1
                    },
                    "description": {
                        "type": "string",
                        "description": "Client description.",
                        "maxLength": 200
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Client enabled or disabled status."
                    },
                    "platform": {
                        "type": "string",
                        "default": "XCAN_TP",
                        "description": "The platform used by the client. Note: The modification is not allowed.",
                        "enum": [
                            "XCAN_TP",
                            "XCAN_OP",
                            "XCAN_2P",
                            "XCAN_3RD",
                            "XCAN_INNER"
                        ]
                    },
                    "source": {
                        "type": "string",
                        "default": "XCAN_USER_TOKEN",
                        "description": "The registered source of client. Note: The modification is not allowed.",
                        "enum": [
                            "XCAN_TP_SIGNIN",
                            "XCAN_OP_SIGNIN",
                            "XCAN_SYS_INTROSPECT",
                            "XCAN_SYS_TOKEN",
                            "XCAN_2P_SIGNIN"
                        ]
                    },
                    "bizTag": {
                        "type": "string",
                        "description": "The business tag of client.",
                        "maxLength": 80
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The client used by the tenant (id), effective for all tenants when the value is empty. Note: The modification is not allowed."
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "The client used by the tenant (name). Note: The modification is not allowed.",
                        "maxLength": 100
                    }
                },
                "required": [
                    "authorizationGrantTypes",
                    "clientAuthenticationMethods",
                    "clientName",
                    "clientSettings",
                    "scopes",
                    "tokenSettings"
                ]
            },
            "ApiLocaleResultIdKeyStringObject": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/IdKeyStringObject",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "IdKeyStringObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "key": {
                        "type": "object"
                    }
                }
            },
            "AuthPolicyReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Authorization policy id. The ID is required when modifying an existing policy, create a new policy when the value is empty.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Authorization policy name.",
                        "example": "System administrator",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Authorization policy code. Note: Modification not allowed.",
                        "example": "admin",
                        "maxLength": 80
                    },
                    "type": {
                        "type": "string",
                        "description": "Authorization policy type. Note: Modification not allowed.",
                        "enum": [
                            "PRE_DEFINED",
                            "USER_DEFINED"
                        ]
                    },
                    "default0": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Default policy flag.",
                        "example": false
                    },
                    "description": {
                        "type": "string",
                        "description": "Authorization policy description.",
                        "example": "System management policy",
                        "maxLength": 200
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The application id of authorization policy. Note: Modification not allowed.",
                        "example": 1
                    },
                    "funcIds": {
                        "type": "array",
                        "description": "The application function ids of authorization policy, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "default0",
                    "name"
                ]
            },
            "AppReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Application id. The ID is required when modifying an existing application, create a new application when the value is empty.",
                        "example": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Application code.",
                        "example": "AngusTester",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Application name.",
                        "example": "AngusTester",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "showName": {
                        "type": "string",
                        "description": "Application short name for web display.",
                        "example": "AngusTester",
                        "maxLength": 40,
                        "minLength": 1
                    },
                    "icon": {
                        "type": "string",
                        "description": "Application icon.",
                        "example": "http://dev-files.xcan.cloud/storage/api/v1/file/AngusTester.icon",
                        "maxLength": 200,
                        "minLength": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "Application type. \n***CLOUD_APP (Cloud Applications)***: Deliver scalable, on-demand services via cloud infrastructure, enabling remote access and elastic resource allocation.\n***BASE_APP (Core Base Applications)***: Provide essential system functionalities and foundational services (e.g., authentication, data storage, system management) critical for platform operations.\n***OP_APP (Operational Applications)***: The operations platform centralizes and orchestrates business processes, real-time analytics, and system monitoring to enhance operational efficiency.",
                        "enum": [
                            "CLOUD_APP",
                            "BASE_APP",
                            "OP_APP"
                        ]
                    },
                    "editionType": {
                        "type": "string",
                        "description": "Application edition type.",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "description": {
                        "type": "string",
                        "description": "Application detailed introduction.",
                        "maxLength": 200
                    },
                    "authCtrl": {
                        "type": "boolean",
                        "description": "Authorization control for applications. If enabled, users must be granted corresponding access policies to use the application."
                    },
                    "url": {
                        "type": "string",
                        "description": "Application access url. The URL used to access the application.",
                        "example": "http://dev-tester.xcan.cloud/",
                        "minLength": 1
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32",
                        "default": "1000",
                        "description": "Application sorting sequence value. Supports positive integers, smaller numbers appear earlier in the list. ",
                        "example": 1000,
                        "minimum": 1
                    },
                    "apiIds": {
                        "type": "array",
                        "description": "Authorization apis for application homepage access. The API endpoint invoked when accessing the application to validate permissions. Supports a maximum quantity of `50`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Application software version."
                    },
                    "openStage": {
                        "type": "string",
                        "description": "Application open or activation stage:\n\n***SIGNUP***: Automatically activates the application upon successful user registration.\n***AUTH_PASSED***: Activates the application after real-name authentication is verified.\n***OPEN_SUCCESS***: Activates the application once manually enabled by the user.",
                        "enum": [
                            "SIGNUP",
                            "AUTH_PASSED",
                            "OPEN_SUCCESS"
                        ]
                    },
                    "clientId": {
                        "type": "string",
                        "description": "OAuh2 client id.",
                        "example": "xcan_tp",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Application tag ids. Use tags to organize applications and functions. Supports a maximum quantity of `10`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 10,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "authCtrl",
                    "clientId",
                    "code",
                    "editionType",
                    "icon",
                    "name",
                    "openStage",
                    "showName",
                    "type",
                    "url",
                    "version"
                ]
            },
            "AppFuncReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string",
                        "example": "script:add",
                        "minLength": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Add angus script",
                        "minLength": 1
                    },
                    "showName": {
                        "type": "string",
                        "example": "Add script",
                        "minLength": 1
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64",
                        "minimum": -1
                    },
                    "icon": {
                        "type": "string",
                        "example": "http://dev-files.xcan.cloud/storage/api/v1/file/Menu01.icon"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "description": {
                        "type": "string",
                        "example": "Add angus script"
                    },
                    "authCtrl": {
                        "type": "boolean",
                        "example": true
                    },
                    "url": {
                        "type": "string",
                        "example": "http://dev-tester.xcan.cloud/scripts"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10000
                    },
                    "apiIds": {
                        "type": "array",
                        "description": "Function associated api ids",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Function tag ids",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 10,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "authCtrl",
                    "code",
                    "icon",
                    "name",
                    "showName"
                ]
            },
            "ApiReplaceDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Api id. The ID is required when modifying an existing API, create a new API when the value is empty.",
                        "example": 1
                    },
                    "serviceId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Api service id. Note: Modification is not allowed.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Api summary or name.",
                        "example": "Add user api",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "operationId": {
                        "type": "string",
                        "description": "Api code or OAS operation id.",
                        "example": "user:add",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "uri": {
                        "type": "string",
                        "description": "Api http URI.",
                        "example": "/api/v1/user",
                        "maxLength": 200,
                        "minLength": 1
                    },
                    "method": {
                        "type": "string",
                        "description": "Api http request method.",
                        "enum": [
                            "GET",
                            "HEAD",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "TRACE"
                        ],
                        "example": "POST"
                    },
                    "type": {
                        "type": "string",
                        "description": "Angus platform API type. If the value is empty, automatically determine based on URI.",
                        "enum": [
                            "API",
                            "OPEN_API",
                            "OPEN_API_2P",
                            "DOOR_API",
                            "PUB_API",
                            "VIEW",
                            "PUB_VIEW"
                        ],
                        "example": "API"
                    },
                    "description": {
                        "type": "string",
                        "description": "API detailed description.",
                        "maxLength": 20000
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Api resource name or OAS tag name. If the value is empty, automatically determine based on URI.",
                        "example": "user"
                    },
                    "resourceDescription": {
                        "type": "string",
                        "description": "Api resource description.",
                        "example": "User",
                        "maxLength": 200
                    }
                },
                "required": [
                    "method",
                    "name",
                    "operationId",
                    "uri"
                ]
            },
            "WebTagAddDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Web application tag name.",
                        "example": "dev",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "description": {
                        "type": "string",
                        "description": "Web application tag description.",
                        "example": "dev",
                        "maxLength": 200,
                        "minLength": 1
                    }
                },
                "required": [
                    "description",
                    "name"
                ]
            },
            "WebTagTargetAddDto": {
                "type": "object",
                "properties": {
                    "targetType": {
                        "type": "string",
                        "description": "Web application resource type.",
                        "enum": [
                            "APP",
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "targetId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Web application resource id.",
                        "example": 1
                    }
                },
                "required": [
                    "targetId",
                    "targetType"
                ]
            },
            "UserAddDto": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username, unique user identification.",
                        "maxLength": 100
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User first name.",
                        "example": "James",
                        "maxLength": 100
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name.",
                        "example": "Jones",
                        "maxLength": 100
                    },
                    "fullName": {
                        "type": "string",
                        "description": "User full name.",
                        "example": "James Jones",
                        "maxLength": 100
                    },
                    "country": {
                        "type": "string",
                        "description": "User country code.",
                        "example": "CN",
                        "maxLength": 16
                    },
                    "itc": {
                        "type": "string",
                        "description": "International telephone area code.",
                        "example": 86,
                        "maxLength": 8
                    },
                    "mobile": {
                        "type": "string",
                        "description": "User mobile.",
                        "example": 13813000000,
                        "maxLength": 16
                    },
                    "email": {
                        "type": "string",
                        "description": "User e-mail.",
                        "example": "james@xcan.cloud",
                        "maxLength": 100
                    },
                    "landline": {
                        "type": "string",
                        "description": "User landline.",
                        "example": "010-88287890",
                        "maxLength": 40
                    },
                    "password": {
                        "type": "string",
                        "description": "User signup password, used to log in to the system through the password.",
                        "example": "xcan@123"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "User avatar.",
                        "example": "http://prod-files.xcan.cloud/storage/pubapi/v1/file/logo.png",
                        "maxLength": 400
                    },
                    "title": {
                        "type": "string",
                        "description": "User title.",
                        "example": "CTO",
                        "maxLength": 100
                    },
                    "gender": {
                        "type": "string",
                        "default": "UNKNOWN",
                        "description": "User gender.",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "UNKNOWN"
                        ],
                        "example": "MALE"
                    },
                    "address": {
                        "type": "string",
                        "example": "User's residence or contact address.",
                        "maxLength": 200
                    },
                    "signupType": {
                        "type": "string",
                        "description": "User signup(registration) type.",
                        "enum": [
                            "MOBILE",
                            "EMAIL",
                            "NOOP"
                        ],
                        "example": "EMAIL"
                    },
                    "signupAccount": {
                        "type": "string",
                        "description": "Account used during user signup(registration). The value is email or mobile.",
                        "example": "Jams@123@xcan.cloud",
                        "maxLength": 100
                    },
                    "sysAdmin": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether or not system administrator flag.",
                        "example": false
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether or not user enabled flag.",
                        "example": true
                    },
                    "invitationCode": {
                        "type": "string",
                        "description": "Platform invitation code, used to register the current user to an existing tenant account.",
                        "maxLength": 80
                    },
                    "depts": {
                        "type": "array",
                        "description": "User's departments information, the maximum support is `2000`.",
                        "items": {
                            "$ref": "#/components/schemas/UserDeptTo"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "groupIds": {
                        "type": "array",
                        "description": "User's group ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "User association tag ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "password"
                ]
            },
            "UserDirectoryAddDto": {
                "type": "object",
                "properties": {
                    "sequence": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Sorting value, the synchronization priority is high if the value is small."
                    },
                    "server": {
                        "$ref": "#/components/schemas/DirectoryServer",
                        "description": "Server Settings."
                    },
                    "schema": {
                        "$ref": "#/components/schemas/DirectorySchema",
                        "description": "LDAP Schema."
                    },
                    "userSchema": {
                        "$ref": "#/components/schemas/DirectoryUserSchema",
                        "description": "LDAP user schema."
                    },
                    "groupSchema": {
                        "$ref": "#/components/schemas/DirectoryGroupSchema",
                        "description": "LDAP group schema."
                    },
                    "membershipSchema": {
                        "$ref": "#/components/schemas/DirectoryMembershipSchema",
                        "description": "LDAP membership schema."
                    }
                },
                "required": [
                    "schema",
                    "server",
                    "userSchema"
                ]
            },
            "UserDirectoryTestDto": {
                "type": "object",
                "properties": {
                    "server": {
                        "$ref": "#/components/schemas/DirectoryServer",
                        "description": "Server Settings"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/DirectorySchema",
                        "description": "LDAP Schema"
                    },
                    "userSchema": {
                        "$ref": "#/components/schemas/DirectoryUserSchema"
                    },
                    "groupSchema": {
                        "$ref": "#/components/schemas/DirectoryGroupSchema"
                    },
                    "membershipSchema": {
                        "$ref": "#/components/schemas/DirectoryMembershipSchema"
                    }
                },
                "required": [
                    "schema",
                    "server",
                    "userSchema"
                ]
            },
            "CurrentSmsSendDto": {
                "type": "object",
                "properties": {
                    "bizKey": {
                        "type": "string",
                        "description": "Sms business type key.",
                        "enum": [
                            "MODIFY_MOBILE",
                            "BIND_MOBILE",
                            "PASSWORD_UPDATE"
                        ],
                        "example": "MODIFY_MOBILE"
                    },
                    "mobile": {
                        "type": "string",
                        "description": "User mobile.",
                        "example": 13813000000,
                        "minLength": 1
                    },
                    "country": {
                        "type": "string",
                        "description": "User country code.",
                        "example": "CN",
                        "minLength": 1
                    }
                },
                "required": [
                    "bizKey",
                    "country",
                    "mobile"
                ]
            },
            "CurrentEmailSendDto": {
                "type": "object",
                "properties": {
                    "bizKey": {
                        "type": "string",
                        "description": "Email business type key.",
                        "enum": [
                            "PASSWORD_UPDATE",
                            "MODIFY_EMAIL",
                            "BIND_EMAIL"
                        ],
                        "example": "BIND_EMAIL"
                    },
                    "toAddress": {
                        "type": "array",
                        "description": "List of email receiving addresses, supporting up to `500` addresses.",
                        "example": [
                            "james@xcancloud.com"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of email receiving addresses, supporting up to `500` addresses.",
                            "example": "[\"james@xcancloud.com\"]"
                        },
                        "maxItems": 500,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "bizKey",
                    "toAddress"
                ]
            },
            "TOUserAddDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Operational user id.",
                        "example": 1
                    }
                },
                "required": [
                    "id"
                ]
            },
            "TORoleAddDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Operation role name.",
                        "example": "System administrator",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Operation role code.",
                        "example": "TOP_TENANT_ADMIN",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "description": {
                        "type": "string",
                        "description": "Operation role description.",
                        "example": "System management policy",
                        "maxLength": 80
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Operation application id.",
                        "example": 1
                    }
                },
                "required": [
                    "appId",
                    "code",
                    "name"
                ]
            },
            "TenantAddDto": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Tenant type.",
                        "enum": [
                            "PERSONAL",
                            "ENTERPRISE",
                            "GOVERNMENT",
                            "UNKNOWN"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Tenant name.",
                        "example": "XCan Company",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "remark": {
                        "type": "string",
                        "description": "Tenant remark.",
                        "maxLength": 200
                    },
                    "address": {
                        "type": "string",
                        "example": "Tenant contact address.",
                        "maxLength": 200
                    },
                    "firstName": {
                        "type": "string",
                        "description": "System administer first name.",
                        "example": "James",
                        "maxLength": 100
                    },
                    "lastName": {
                        "type": "string",
                        "description": "System administer last name.",
                        "example": "Jones",
                        "maxLength": 100
                    },
                    "fullName": {
                        "type": "string",
                        "description": "System administer full name.",
                        "example": "James Jones",
                        "maxLength": 100
                    },
                    "title": {
                        "type": "string",
                        "description": "System administer title.",
                        "example": "CTO",
                        "maxLength": 100
                    },
                    "itc": {
                        "type": "string",
                        "description": "International telephone area code",
                        "example": 86,
                        "maxLength": 8
                    },
                    "country": {
                        "type": "string",
                        "description": "User country code",
                        "example": "CN",
                        "maxLength": 16
                    },
                    "mobile": {
                        "type": "string",
                        "description": "System administer mobile. There must be one mobile and email address.",
                        "example": 13813000000,
                        "minLength": 1
                    },
                    "email": {
                        "type": "string",
                        "description": "System administer email. There must be one mobile and email address.",
                        "example": "james@xcan.cloud",
                        "minLength": 1
                    },
                    "password": {
                        "type": "string",
                        "description": "System administer password.",
                        "example": "Password@123",
                        "maxLength": 16,
                        "minLength": 6
                    },
                    "personalCert": {
                        "$ref": "#/components/schemas/PersonalCert"
                    },
                    "enterpriseCert": {
                        "$ref": "#/components/schemas/EnterpriseCert"
                    },
                    "enterpriseLegalPersonCert": {
                        "$ref": "#/components/schemas/EnterpriseLegalPersonCert"
                    },
                    "governmentCert": {
                        "$ref": "#/components/schemas/GovernmentCert"
                    },
                    "certSubmitted": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "email",
                    "firstName",
                    "fullName",
                    "lastName",
                    "mobile",
                    "name",
                    "type"
                ]
            },
            "TenantAddByMobileDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Tenant name.",
                        "example": "XCan Company",
                        "maxLength": 100
                    },
                    "firstName": {
                        "type": "string",
                        "description": "System administer first name.",
                        "example": "James",
                        "maxLength": 100
                    },
                    "lastName": {
                        "type": "string",
                        "description": "System administer last name.",
                        "example": "Jones",
                        "maxLength": 100
                    },
                    "fullName": {
                        "type": "string",
                        "description": "System administer full name.",
                        "example": "James Jones",
                        "maxLength": 100
                    },
                    "itc": {
                        "type": "string",
                        "description": "International telephone area code.",
                        "example": 86,
                        "maxLength": 8
                    },
                    "country": {
                        "type": "string",
                        "description": "User country code",
                        "example": "CN",
                        "maxLength": 16
                    },
                    "mobile": {
                        "type": "string",
                        "description": "System administer mobile. There must be one mobile and email address.",
                        "example": 13813000000,
                        "maxLength": 16,
                        "minLength": 1
                    },
                    "email": {
                        "type": "string",
                        "description": "System administer email. There must be one mobile and email address.",
                        "example": "james@xcan.cloud",
                        "maxLength": 100
                    },
                    "password": {
                        "type": "string",
                        "description": "System administer password.",
                        "example": "Password@123",
                        "maxLength": 50,
                        "minLength": 6
                    }
                },
                "required": [
                    "mobile"
                ]
            },
            "TenantRealNameSubmitDto": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Tenant real name type.",
                        "enum": [
                            "PERSONAL",
                            "ENTERPRISE",
                            "GOVERNMENT",
                            "UNKNOWN"
                        ]
                    },
                    "personalCert": {
                        "$ref": "#/components/schemas/PersonalCert",
                        "description": "Personal tenant authentication information."
                    },
                    "enterpriseCert": {
                        "$ref": "#/components/schemas/EnterpriseCert",
                        "description": "Enterprise tenant authentication information."
                    },
                    "enterpriseLegalPersonCert": {
                        "$ref": "#/components/schemas/EnterpriseLegalPersonCert",
                        "description": "Enterprise legal person authentication information."
                    },
                    "governmentCert": {
                        "$ref": "#/components/schemas/GovernmentCert",
                        "description": "Government tenant authentication information."
                    }
                },
                "required": [
                    "type"
                ]
            },
            "AuthorizedResourceDto": {
                "type": "object",
                "properties": {
                    "resource": {
                        "type": "string",
                        "description": "Authorized resource name.",
                        "minLength": 1
                    },
                    "apiIds": {
                        "type": "array",
                        "description": "Api ids of authorized resources, when authType=API is required.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "uniqueItems": true
                    },
                    "acls": {
                        "type": "array",
                        "description": "ACL types of authorized resources, when authType=ACL is required.",
                        "items": {
                            "type": "string",
                            "enum": [
                                "ALL",
                                "ONLY_READ",
                                "ONLY_WRITE",
                                "READ_WRITE",
                                "DELETE"
                            ]
                        }
                    }
                },
                "required": [
                    "resource"
                ]
            },
            "SystemTokenAddDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "System token name.",
                        "minLength": 1
                    },
                    "expiredDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Expiration date of system token.",
                        "example": "2025-10-09 03:02:29"
                    },
                    "authType": {
                        "type": "string",
                        "description": "Resource authorization type.",
                        "enum": [
                            "API",
                            "ACL"
                        ]
                    },
                    "resources": {
                        "type": "array",
                        "description": "Authorized resources.",
                        "items": {
                            "$ref": "#/components/schemas/AuthorizedResourceDto"
                        },
                        "minItems": 1
                    }
                },
                "required": [
                    "authType",
                    "name",
                    "resources"
                ]
            },
            "ApiLocaleResultSystemTokenValueVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/SystemTokenValueVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "SystemTokenValueVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "value": {
                        "type": "string"
                    },
                    "expiredDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "SmsSendDto": {
                "type": "object",
                "properties": {
                    "outId": {
                        "type": "string",
                        "description": "Out business id, used to establish associations with external businesses.",
                        "maxLength": 80
                    },
                    "bizKey": {
                        "type": "string",
                        "description": "Sms business key.",
                        "enum": [
                            "SIGNUP",
                            "SIGNIN",
                            "PASSWORD_FORGET",
                            "PASSWORD_UPDATE",
                            "SIGN_CANCEL",
                            "MODIFY_MOBILE",
                            "BIND_MOBILE",
                            "PAY_PASSWORD_UPDATE",
                            "REALNAME_AUTH_SUBMIT",
                            "REALNAME_AUTH_PASSED",
                            "REALNAME_AUDIT_FAILURE",
                            "SYS_EXCEPTION_NOTICE",
                            "SYS_RECOVERY_NOTICE",
                            "SYS_SECURITY_NOTICE",
                            "LICENSE_SENT",
                            "CHANNEL_TEST",
                            "TODO_REALNAME_AUTH",
                            "TODO_BUSINESS_CONSULTATION",
                            "TODO_OFFLINE_SERVICE",
                            "TODO_WORKORDER",
                            "TODO_TRANSFER_CONFIRM",
                            "TODO_INVOICE_CONFIRM",
                            "TODO_WITHDRAW_CONFIRM",
                            "RECHARGE_SUCCESS",
                            "WITHDRAW_SUCCESS",
                            "ORDER_PAY_SUCCESS",
                            "ORDER_PAY_PENDING",
                            "ORDER_PAY_TIMEOUT",
                            "ORDER_TO_EXPIRE",
                            "ORDER_CHANGE_SUCCESS",
                            "WORKORDER_REPLY_REMINDER",
                            "TESTING_EXEC_STARTED",
                            "TESTING_EXEC_FINISHED",
                            "TESTING_EXEC_FAILED",
                            "TESTING_TASK_OVERDUE",
                            "INDICATOR_MODIFY_SUBMIT",
                            "INDICATOR_AUDIT_PASSED",
                            "INDICATOR_AUDIT_FAILED",
                            "EVENT_NOTICE"
                        ],
                        "example": "SIGNUP"
                    },
                    "urgent": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether or not urgent sent flag."
                    },
                    "language": {
                        "type": "string",
                        "default": "zh_CN",
                        "description": "Use language to send sms content.",
                        "enum": [
                            "en",
                            "zh_CN"
                        ],
                        "example": "zh_CN",
                        "maxLength": 8
                    },
                    "mobiles": {
                        "type": "array",
                        "description": "Receive SMS mobiles, maximum support for `500`. the mobiles and receiveObjectIds must have one of the parameters.",
                        "items": {
                            "type": "string"
                        },
                        "maxItems": 500,
                        "minItems": 0
                    },
                    "expectedSendDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Expected SMS sending time."
                    },
                    "verificationCode": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether or not verification code sms flag."
                    },
                    "verificationCodeValidSecond": {
                        "type": "integer",
                        "format": "int32",
                        "default": "300",
                        "description": "Validity period of verification code, in seconds. It is required when verificationCode=true.",
                        "maximum": 1440
                    },
                    "templateParams": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Sms template parameters, maximum support for `50`."
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "description": "Sms recipient object type. The receiveObjectType is required when sending via receiveObjectIds, receiveObjectIds and mobile must have one of the parameters.",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "POLICY",
                            "TO_POLICY",
                            "ALL"
                        ]
                    },
                    "receiveObjectIds": {
                        "type": "array",
                        "description": "Sms recipient object ids, maximum support for `500`. Parameter mobiles and receiveObjectIds are required to choose one, if both are passed, mobiles is used by default",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 500,
                        "minItems": 0
                    },
                    "receivePolicyCodes": {
                        "type": "array",
                        "description": "Sms recipient policy codes, maximum support for `500`.",
                        "items": {
                            "type": "string"
                        },
                        "maxItems": 500,
                        "minItems": 0
                    }
                },
                "required": [
                    "bizKey",
                    "verificationCode"
                ]
            },
            "SmsChannelTestSendDto": {
                "type": "object",
                "properties": {
                    "channelId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Sms channel id.",
                        "example": "Test Channel Id"
                    },
                    "mobiles": {
                        "type": "array",
                        "description": "Receive SMS mobiles.",
                        "items": {
                            "type": "string"
                        },
                        "maxItems": 500,
                        "minItems": 0
                    }
                },
                "required": [
                    "channelId",
                    "mobiles"
                ]
            },
            "ServiceAddDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Service name.",
                        "example": "User center service",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Service code.",
                        "example": "ANGUSGM",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "description": {
                        "type": "string",
                        "description": "Service description.",
                        "example": "User center service, providing complete tenant, organization, and user management service capabilities, etc.",
                        "maxLength": 200
                    },
                    "source": {
                        "type": "string",
                        "description": "Service source.",
                        "enum": [
                            "BACK_ADD",
                            "EUREKA"
                        ]
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether or not enabled service flag."
                    },
                    "routePath": {
                        "type": "string",
                        "description": "The route path in api gateway of service.",
                        "example": "/uc",
                        "maxLength": 80
                    },
                    "url": {
                        "type": "string",
                        "description": "The access url of service.",
                        "example": "http://local-api.xcan.cloud:1806",
                        "maxLength": 400
                    },
                    "healthUrl": {
                        "type": "string",
                        "description": "The health checking url of service.",
                        "example": "http://local-api.xcan.cloud:1806/actuator/health",
                        "maxLength": 400
                    },
                    "apiDocUrl": {
                        "type": "string",
                        "description": "The OpenAPI doc url of service.",
                        "example": "http://local-api.xcan.cloud:1806/v3/api-docs?group=Api",
                        "maxLength": 400
                    }
                },
                "required": [
                    "code",
                    "name"
                ]
            },
            "ServiceApiAddDto": {
                "type": "object",
                "properties": {
                    "serviceId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Api service id.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Api summary or name.",
                        "example": "Add user api",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Api code or OAS operation id.",
                        "example": "user:add",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "uri": {
                        "type": "string",
                        "description": "Api http URI.",
                        "example": "/api/v1/user",
                        "maxLength": 800,
                        "minLength": 1
                    },
                    "method": {
                        "type": "string",
                        "description": "Api http request method.",
                        "enum": [
                            "GET",
                            "HEAD",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "TRACE"
                        ],
                        "example": "POST"
                    },
                    "type": {
                        "type": "string",
                        "description": "Angus platform API type. If the value is empty, automatically determine based on URI.",
                        "enum": [
                            "API",
                            "OPEN_API",
                            "OPEN_API_2P",
                            "DOOR_API",
                            "PUB_API",
                            "VIEW",
                            "PUB_VIEW"
                        ],
                        "example": "API"
                    },
                    "description": {
                        "type": "string",
                        "description": "API detailed description.",
                        "maxLength": 20000
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Api resource name or OAS tag name. If the value is empty, automatically determine based on URI.",
                        "example": "user"
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether or not enabled api flag."
                    }
                },
                "required": [
                    "code",
                    "method",
                    "name",
                    "serviceId",
                    "uri"
                ]
            },
            "OrgTagAddDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Organization tag name.",
                        "example": "developer",
                        "maxLength": 100,
                        "minLength": 1
                    }
                },
                "required": [
                    "name"
                ]
            },
            "OrgTagTargetAddDto": {
                "type": "object",
                "properties": {
                    "targetType": {
                        "type": "string",
                        "description": "Tag organization type.",
                        "enum": [
                            "USER",
                            "DEPT",
                            "GROUP"
                        ]
                    },
                    "targetId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Tag organization id.",
                        "example": 1
                    }
                },
                "required": [
                    "targetId",
                    "targetType"
                ]
            },
            "NoticeAddDto": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Notice content.",
                        "maxLength": 200,
                        "minLength": 1
                    },
                    "scope": {
                        "type": "string",
                        "description": "Notice scope, supported scope:\n- ***GLOBAL***: Notify within all applications.\n- ***APP***: Notify within the specified application.",
                        "enum": [
                            "GLOBAL",
                            "APP"
                        ]
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Notice application id, it is required when scope=APP."
                    },
                    "sendType": {
                        "type": "string",
                        "description": "Send type, supported type:\n- ***SEND_NOW***: Send the notification immediately after creation.\n- ***TIMING_SEND***: Schedule the notification to be sent at a specified time.",
                        "enum": [
                            "SEND_NOW",
                            "TIMING_SEND"
                        ]
                    },
                    "sendTimingDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Schedule the notification to be sent at a specified time, it is required when sendType=TIMING_SEND."
                    },
                    "expirationDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The notification content displays the expiration time."
                    }
                },
                "required": [
                    "content",
                    "expirationDate",
                    "scope",
                    "sendType"
                ]
            },
            "Attachment": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Attachment file name",
                        "maxLength": 200
                    },
                    "url": {
                        "type": "string",
                        "description": "Attachment file URL address",
                        "maxLength": 800
                    }
                }
            },
            "SendEmailParam": {
                "type": "object",
                "properties": {
                    "outId": {
                        "type": "string",
                        "description": "Out business id, used to establish associations with external businesses.",
                        "maxLength": 80
                    },
                    "bizKey": {
                        "type": "string",
                        "description": "Email business key, it is required when type=TEMPLATE.",
                        "enum": [
                            "EVENT_NOTICE",
                            "SIGNUP",
                            "SIGNIN",
                            "PASSWORD_FORGET",
                            "PASSWORD_UPDATE",
                            "SIGN_CANCEL",
                            "MODIFY_EMAIL",
                            "BIND_EMAIL",
                            "PAY_PASSWORD_UPDATE",
                            "REALNAME_AUTH_SUBMIT",
                            "REALNAME_AUTH_PASSED",
                            "REALNAME_AUDIT_FAILURE",
                            "SYS_EXCEPTION_NOTICE",
                            "SYS_RECOVERY_NOTICE",
                            "SYS_SECURITY_NOTICE",
                            "LICENSE_SENT",
                            "CHANNEL_TEST",
                            "TODO_REALNAME_AUTH",
                            "TODO_BUSINESS_CONSULTATION",
                            "TODO_OFFLINE_SERVICE",
                            "TODO_WORKORDER",
                            "TODO_TRANSFER_CONFIRM",
                            "TODO_INVOICE_CONFIRM",
                            "TODO_WITHDRAW_CONFIRM",
                            "RECHARGE_SUCCESS",
                            "WITHDRAW_SUCCESS",
                            "ORDER_PAY_SUCCESS",
                            "ORDER_PAY_PENDING",
                            "ORDER_PAY_TIMEOUT",
                            "ORDER_TO_EXPIRE",
                            "ORDER_CHANGE_SUCCESS",
                            "WORKORDER_REPLY_REMINDER",
                            "INVOICE_APPLY_SUCCESS",
                            "COUPON_DISTRIBUTION",
                            "COUPON_TO_EXPIRE",
                            "BLOG_SUBSCRIPTION_NOTICE",
                            "TESTING_EXEC_STARTED",
                            "TESTING_EXEC_FINISHED",
                            "TESTING_EXEC_FAILED",
                            "TESTING_TASK_OVERDUE",
                            "INDICATOR_MODIFY_SUBMIT",
                            "INDICATOR_AUDIT_PASSED",
                            "INDICATOR_AUDIT_FAILED"
                        ],
                        "example": "SIGNUP"
                    },
                    "language": {
                        "type": "string",
                        "default": "zh_CN",
                        "description": "Use language to send email content.",
                        "example": "zh_CN",
                        "maxLength": 8
                    },
                    "type": {
                        "type": "string",
                        "description": "Email type.",
                        "enum": [
                            "TEMPLATE",
                            "CUSTOM"
                        ],
                        "example": "CUSTOM"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Email subject.",
                        "example": "subject",
                        "maxLength": 200
                    },
                    "toAddress": {
                        "type": "array",
                        "description": "List of email receiving addresses, supporting up to `500` addresses. Parameter toAddress and objectIds are required to choose one, if both are passed, toAddress is used by default.",
                        "example": [
                            "user1@xcancloud.com",
                            "user2@xcancloud.com"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of email receiving addresses, supporting up to `500` addresses. Parameter toAddress and objectIds are required to choose one, if both are passed, toAddress is used by default.",
                            "example": "[\"user1@xcancloud.com\",\"user2@xcancloud.com\"]"
                        },
                        "maxItems": 500,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "ccAddress": {
                        "type": "array",
                        "description": "List of email CC addresses, supporting up to `500` addresses. ",
                        "example": [
                            "demo@xcancloud.com"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of email CC addresses, supporting up to `500` addresses. ",
                            "example": "[\"demo@xcancloud.com\"]"
                        },
                        "maxItems": 500,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "verificationCode": {
                        "type": "boolean",
                        "description": "Whether or not verification code email flag."
                    },
                    "verificationCodeValidSecond": {
                        "type": "integer",
                        "format": "int32",
                        "default": "300",
                        "description": "Validity period of verification code, in seconds, it is required when verificationCode=true.",
                        "maximum": 86400
                    },
                    "sendTenantId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Non user operation (job or innerapi) is required."
                    },
                    "sendUserId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Non user operation (job or innerapi) is required."
                    },
                    "html": {
                        "type": "boolean",
                        "description": "Whether or not html content email flag."
                    },
                    "content": {
                        "type": "string",
                        "description": "Email content, it is required when type=CUSTOM.",
                        "maxLength": 200000,
                        "minLength": 0
                    },
                    "templateParams": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "description": "Email template parameters, it is required when type=TEMPLATE and there are template variables. Key is email address and value is template parameter, when all email template parameters are the same, only one value is set."
                    },
                    "attachments": {
                        "type": "array",
                        "description": "The attachments of the email, maximum support for `10`.",
                        "items": {
                            "$ref": "#/components/schemas/Attachment"
                        },
                        "maxItems": 10,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "description": "Email recipient object type, the receiveObjectType is required when sending via receiveObjectIds.",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "POLICY",
                            "TO_POLICY",
                            "ALL"
                        ]
                    },
                    "receiveObjectIds": {
                        "type": "array",
                        "description": "Email recipient object ids, maximum support for `500`. Parameter toAddress and receiveObjectIds are required to choose one, if both are passed, toAddress is used by default",
                        "items": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Email recipient object ids, maximum support for `500`. Parameter toAddress and receiveObjectIds are required to choose one, if both are passed, toAddress is used by default"
                        },
                        "maxItems": 500,
                        "minItems": 0
                    },
                    "receivePolicyCodes": {
                        "type": "array",
                        "description": "Email recipient TOP policy codes, maximum support for `500`. ",
                        "items": {
                            "type": "string",
                            "description": "Email recipient TOP policy codes, maximum support for `500`. "
                        },
                        "maxItems": 500,
                        "minItems": 0
                    },
                    "batch": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether or not batch sending flag, multiple receiving addresses will be displayed in the mail."
                    }
                },
                "required": [
                    "html",
                    "type",
                    "verificationCode"
                ]
            },
            "SendInsiteParam": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "Out biz id, generate UUID when not specified"
                    },
                    "pushMediaType": {
                        "type": "string",
                        "enum": [
                            "PLAIN_TEXT",
                            "PICTURE",
                            "EMO",
                            "VOICE",
                            "VIDEO"
                        ]
                    },
                    "sendUserId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sendUserName": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string",
                        "minLength": 1
                    },
                    "content": {
                        "type": "string",
                        "description": "Max length 8000",
                        "minLength": 1
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "POLICY",
                            "TO_POLICY",
                            "ALL"
                        ]
                    },
                    "receiveObjectIds": {
                        "type": "array",
                        "description": "Max size 10000",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 10000,
                        "minItems": 0
                    }
                },
                "required": [
                    "content",
                    "pushMediaType",
                    "receiveObjectType",
                    "title"
                ]
            },
            "SendNoticeDto": {
                "type": "object",
                "properties": {
                    "noticeTypes": {
                        "type": "array",
                        "description": "Notification method type",
                        "items": {
                            "type": "string",
                            "enum": [
                                "SMS",
                                "EMAIL",
                                "IN_SITE"
                            ]
                        },
                        "maxItems": 3,
                        "minItems": 1
                    },
                    "sendSmsParam": {
                        "$ref": "#/components/schemas/SendSmsParam",
                        "description": "Required when NoticeType is SMS"
                    },
                    "sendEmailParam": {
                        "$ref": "#/components/schemas/SendEmailParam",
                        "description": "Required when NoticeType is EMAIL"
                    },
                    "sendInsiteParam": {
                        "$ref": "#/components/schemas/SendInsiteParam",
                        "description": "Required when NoticeType is IN_SITE"
                    }
                },
                "required": [
                    "noticeTypes"
                ]
            },
            "SendSmsParam": {
                "type": "object",
                "properties": {
                    "outId": {
                        "type": "string",
                        "description": "Out business id, used to establish associations with external businesses.",
                        "maxLength": 80
                    },
                    "bizKey": {
                        "type": "string",
                        "description": "Sms business key.",
                        "enum": [
                            "SIGNUP",
                            "SIGNIN",
                            "PASSWORD_FORGET",
                            "PASSWORD_UPDATE",
                            "SIGN_CANCEL",
                            "MODIFY_MOBILE",
                            "BIND_MOBILE",
                            "PAY_PASSWORD_UPDATE",
                            "REALNAME_AUTH_SUBMIT",
                            "REALNAME_AUTH_PASSED",
                            "REALNAME_AUDIT_FAILURE",
                            "SYS_EXCEPTION_NOTICE",
                            "SYS_RECOVERY_NOTICE",
                            "SYS_SECURITY_NOTICE",
                            "LICENSE_SENT",
                            "CHANNEL_TEST",
                            "TODO_REALNAME_AUTH",
                            "TODO_BUSINESS_CONSULTATION",
                            "TODO_OFFLINE_SERVICE",
                            "TODO_WORKORDER",
                            "TODO_TRANSFER_CONFIRM",
                            "TODO_INVOICE_CONFIRM",
                            "TODO_WITHDRAW_CONFIRM",
                            "RECHARGE_SUCCESS",
                            "WITHDRAW_SUCCESS",
                            "ORDER_PAY_SUCCESS",
                            "ORDER_PAY_PENDING",
                            "ORDER_PAY_TIMEOUT",
                            "ORDER_TO_EXPIRE",
                            "ORDER_CHANGE_SUCCESS",
                            "WORKORDER_REPLY_REMINDER",
                            "TESTING_EXEC_STARTED",
                            "TESTING_EXEC_FINISHED",
                            "TESTING_EXEC_FAILED",
                            "TESTING_TASK_OVERDUE",
                            "INDICATOR_MODIFY_SUBMIT",
                            "INDICATOR_AUDIT_PASSED",
                            "INDICATOR_AUDIT_FAILED",
                            "EVENT_NOTICE"
                        ],
                        "example": "SIGNUP"
                    },
                    "urgent": {
                        "type": "boolean",
                        "description": "Whether or not urgent sent flag."
                    },
                    "language": {
                        "type": "string",
                        "default": "zh_CN",
                        "description": "Use language to send sms content.",
                        "example": "zh_CN",
                        "maxLength": 8
                    },
                    "mobiles": {
                        "type": "array",
                        "description": "Receive SMS mobiles, maximum support for `500`. the mobiles and receiveObjectIds must have one of the parameters.",
                        "items": {
                            "type": "string"
                        },
                        "maxItems": 500,
                        "minItems": 0
                    },
                    "templateParams": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Sms template parameters, maximum support for `50`."
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "description": "Sms recipient object type. The receiveObjectType is required when sending via receiveObjectIds, receiveObjectIds and mobile must have one of the parameters.",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "POLICY",
                            "TO_POLICY",
                            "ALL"
                        ]
                    },
                    "receiveObjectIds": {
                        "type": "array",
                        "description": "Sms recipient object ids, maximum support for `500`. Parameter mobiles and receiveObjectIds are required to choose one, if both are passed, mobiles is used by default",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 500,
                        "minItems": 0
                    },
                    "receivePolicyCodes": {
                        "type": "array",
                        "description": "Sms recipient policy codes, maximum support for `500`.",
                        "items": {
                            "type": "string"
                        },
                        "maxItems": 500,
                        "minItems": 0
                    }
                },
                "required": [
                    "bizKey"
                ]
            },
            "MessageAddDto": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Message title.",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "content": {
                        "type": "string",
                        "description": "Message content.",
                        "maxLength": 8000,
                        "minLength": 1
                    },
                    "receiveType": {
                        "type": "string",
                        "description": "Message receive type.",
                        "enum": [
                            "SITE",
                            "EMAIL"
                        ]
                    },
                    "sendType": {
                        "type": "string",
                        "description": "Message send type.",
                        "enum": [
                            "SEND_NOW",
                            "TIMING_SEND"
                        ]
                    },
                    "timingDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Scheduled send message date."
                    },
                    "receiveTenantId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Receive message tenant id."
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "description": "Receive message object type.",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "ALL"
                        ]
                    },
                    "receiveObjects": {
                        "type": "array",
                        "description": "Receive message objects, the maximum support is `2000`. Note: The value is empty when receiveObjectType=ALL.",
                        "items": {
                            "$ref": "#/components/schemas/ReceiveObject"
                        },
                        "maxItems": 2000,
                        "minItems": 0
                    }
                },
                "required": [
                    "content",
                    "receiveObjectType",
                    "receiveType",
                    "sendType",
                    "title"
                ]
            },
            "ReceiveObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "MessageCenterPushDto": {
                "type": "object",
                "properties": {
                    "broadcast": {
                        "type": "boolean",
                        "description": "Send messages to other instances of the service."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Out message id, used to establish associations with external businesses.",
                        "maxLength": 80
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "Push message media type.",
                        "enum": [
                            "PLAIN_TEXT",
                            "PICTURE",
                            "EMO",
                            "VOICE",
                            "VIDEO"
                        ]
                    },
                    "sendBy": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Send message user id."
                    },
                    "sendByName": {
                        "type": "string",
                        "description": "Send message user full name.",
                        "maxLength": 100
                    },
                    "title": {
                        "type": "string",
                        "description": "Send message short title.",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "content": {
                        "type": "string",
                        "description": "Send message content.",
                        "maxLength": 8000,
                        "minLength": 1
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "description": "Message recipient object type.",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "POLICY",
                            "TO_POLICY",
                            "ALL"
                        ]
                    },
                    "receiveObjectIds": {
                        "type": "array",
                        "description": "Message recipient object ids, maximum support for `10000`. Note: Send to everyone when not specified.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 10000,
                        "minItems": 0
                    }
                },
                "required": [
                    "broadcast",
                    "content",
                    "mediaType",
                    "receiveObjectType",
                    "title"
                ]
            },
            "MessageCenterOfflineDto": {
                "type": "object",
                "properties": {
                    "broadcast": {
                        "type": "boolean",
                        "description": "Send messages to other instances of the service."
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "description": "Receive message object type.",
                        "enum": [
                            "TENANT",
                            "USER"
                        ]
                    },
                    "receiveObjectIds": {
                        "type": "array",
                        "description": "Receive message object ids, the maximum support is `10000`. ",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 10000,
                        "minItems": 0
                    }
                },
                "required": [
                    "broadcast",
                    "receiveObjectType"
                ]
            },
            "GroupAddDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Group name.",
                        "example": "Product Group",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Group code.",
                        "example": "PRODUCT_001",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "remark": {
                        "type": "string",
                        "description": "Group remark.",
                        "maxLength": 200
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Group association tag ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0
                    }
                },
                "required": [
                    "code",
                    "name"
                ]
            },
            "EventTemplateAddDto": {
                "type": "object",
                "properties": {
                    "appCode": {
                        "type": "string",
                        "description": "Application code of the event.",
                        "maxLength": 40,
                        "minLength": 1
                    },
                    "eventCode": {
                        "type": "string",
                        "description": "Template event code.",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "eventName": {
                        "type": "string",
                        "description": "Template event name.",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "eventType": {
                        "type": "string",
                        "description": "Template event type.",
                        "enum": [
                            "BUSINESS",
                            "SECURITY",
                            "QUOTA",
                            "SYSTEM",
                            "OPERATION",
                            "PROTOCOL",
                            "API",
                            "NOTICE",
                            "OTHER"
                        ]
                    },
                    "targetType": {
                        "type": "string",
                        "description": "Resource type of the event.",
                        "maxLength": 40
                    },
                    "private0": {
                        "type": "boolean",
                        "description": "Whether or not privatized edition template flag."
                    },
                    "allowedChannelTypes": {
                        "type": "array",
                        "description": "Receiving channels allowed or supported by the event template.",
                        "items": {
                            "type": "string",
                            "enum": [
                                "WEBHOOK",
                                "EMAIL",
                                "DINGTALK",
                                "WECHAT"
                            ]
                        },
                        "uniqueItems": true
                    }
                },
                "required": [
                    "appCode",
                    "eventCode",
                    "eventName",
                    "eventType",
                    "private0"
                ]
            },
            "EventChannelAddDto": {
                "type": "object",
                "properties": {
                    "channelType": {
                        "type": "string",
                        "description": "Event channel type.",
                        "enum": [
                            "WEBHOOK",
                            "EMAIL",
                            "DINGTALK",
                            "WECHAT"
                        ],
                        "example": "WECHAT"
                    },
                    "name": {
                        "type": "string",
                        "description": "Event channel name.",
                        "example": "WeChat Reboot",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "address": {
                        "type": "string",
                        "description": "Event channel address. When it is `EMAIL` type, multiple addresses are separated by English commas.",
                        "example": "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=9e3b6ca1-2d3d-4cc2-8314-153871c7ccaf",
                        "maxLength": 4000,
                        "minLength": 1
                    }
                },
                "required": [
                    "address",
                    "channelType",
                    "name"
                ]
            },
            "EventChannelTestDto": {
                "type": "object",
                "properties": {
                    "channelType": {
                        "type": "string",
                        "description": "Event channel type.",
                        "enum": [
                            "WEBHOOK",
                            "EMAIL",
                            "DINGTALK",
                            "WECHAT"
                        ],
                        "example": "WECHAT"
                    },
                    "name": {
                        "type": "string",
                        "description": "Event channel name.",
                        "example": "WeChat Reboot",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "address": {
                        "type": "string",
                        "description": "Event channel address. When it is `EMAIL` type, multiple addresses are separated by English commas.",
                        "example": "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=9e3b6ca1-2d3d-4cc2-8314-153871c7ccaf",
                        "maxLength": 4000,
                        "minLength": 1
                    }
                },
                "required": [
                    "address",
                    "channelType",
                    "name"
                ]
            },
            "EmailSendDto": {
                "type": "object",
                "properties": {
                    "outId": {
                        "type": "string",
                        "description": "Out business id, used to establish associations with external businesses.",
                        "maxLength": 80
                    },
                    "bizKey": {
                        "type": "string",
                        "description": "Email business key, it is required when type=TEMPLATE.",
                        "enum": [
                            "EVENT_NOTICE",
                            "SIGNUP",
                            "SIGNIN",
                            "PASSWORD_FORGET",
                            "PASSWORD_UPDATE",
                            "SIGN_CANCEL",
                            "MODIFY_EMAIL",
                            "BIND_EMAIL",
                            "PAY_PASSWORD_UPDATE",
                            "REALNAME_AUTH_SUBMIT",
                            "REALNAME_AUTH_PASSED",
                            "REALNAME_AUDIT_FAILURE",
                            "SYS_EXCEPTION_NOTICE",
                            "SYS_RECOVERY_NOTICE",
                            "SYS_SECURITY_NOTICE",
                            "LICENSE_SENT",
                            "CHANNEL_TEST",
                            "TODO_REALNAME_AUTH",
                            "TODO_BUSINESS_CONSULTATION",
                            "TODO_OFFLINE_SERVICE",
                            "TODO_WORKORDER",
                            "TODO_TRANSFER_CONFIRM",
                            "TODO_INVOICE_CONFIRM",
                            "TODO_WITHDRAW_CONFIRM",
                            "RECHARGE_SUCCESS",
                            "WITHDRAW_SUCCESS",
                            "ORDER_PAY_SUCCESS",
                            "ORDER_PAY_PENDING",
                            "ORDER_PAY_TIMEOUT",
                            "ORDER_TO_EXPIRE",
                            "ORDER_CHANGE_SUCCESS",
                            "WORKORDER_REPLY_REMINDER",
                            "INVOICE_APPLY_SUCCESS",
                            "COUPON_DISTRIBUTION",
                            "COUPON_TO_EXPIRE",
                            "BLOG_SUBSCRIPTION_NOTICE",
                            "TESTING_EXEC_STARTED",
                            "TESTING_EXEC_FINISHED",
                            "TESTING_EXEC_FAILED",
                            "TESTING_TASK_OVERDUE",
                            "INDICATOR_MODIFY_SUBMIT",
                            "INDICATOR_AUDIT_PASSED",
                            "INDICATOR_AUDIT_FAILED"
                        ],
                        "example": "SIGNUP"
                    },
                    "language": {
                        "type": "string",
                        "default": "zh_CN",
                        "description": "Use language to send email content.",
                        "example": "zh_CN",
                        "maxLength": 8
                    },
                    "type": {
                        "type": "string",
                        "description": "Email type.",
                        "enum": [
                            "TEMPLATE",
                            "CUSTOM"
                        ],
                        "example": "CUSTOM"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Email subject.",
                        "example": "subject",
                        "maxLength": 200
                    },
                    "fromAddress": {
                        "type": "string",
                        "description": "Email sent address.",
                        "example": "cloud@xcan.cloud",
                        "maxLength": 100
                    },
                    "toAddress": {
                        "type": "array",
                        "description": "List of email receiving addresses, supporting up to `500` addresses. Parameter toAddress and objectIds are required to choose one, if both are passed, toAddress is used by default.",
                        "example": [
                            "user1@xcancloud.com",
                            "user2@xcancloud.com"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of email receiving addresses, supporting up to `500` addresses. Parameter toAddress and objectIds are required to choose one, if both are passed, toAddress is used by default.",
                            "example": "[\"user1@xcancloud.com\",\"user2@xcancloud.com\"]"
                        },
                        "maxItems": 500,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "ccAddress": {
                        "type": "array",
                        "description": "List of email CC addresses, supporting up to `500` addresses.",
                        "example": [
                            "demo@xcancloud.com"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of email CC addresses, supporting up to `500` addresses.",
                            "example": "[\"demo@xcancloud.com\"]"
                        },
                        "maxItems": 500,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "verificationCode": {
                        "type": "boolean",
                        "description": "Whether or not verification code email flag."
                    },
                    "verificationCodeValidSecond": {
                        "type": "integer",
                        "format": "int32",
                        "default": "300",
                        "description": "Validity period of verification code, in seconds. It is required when verificationCode=true.",
                        "maximum": 86400
                    },
                    "sendTenantId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Send email tenant id. Non user operation (job or innerapi) is required."
                    },
                    "sendUserId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Send email user id. Non user operation (job or innerapi) is required."
                    },
                    "html": {
                        "type": "boolean",
                        "description": "Whether or not html content email flag."
                    },
                    "content": {
                        "type": "string",
                        "description": "Email content, it is required when type=CUSTOM.",
                        "maxLength": 200000,
                        "minLength": 0
                    },
                    "templateParams": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "description": "Email template parameters, it is required when type=TEMPLATE and there are template variables. Key is email address and value is template parameter, when all email template parameters are the same, only one value is set."
                            },
                            "description": "Email template parameters, it is required when type=TEMPLATE and there are template variables. Key is email address and value is template parameter, when all email template parameters are the same, only one value is set."
                        },
                        "description": "Email template parameters, it is required when type=TEMPLATE and there are template variables. Key is email address and value is template parameter, when all email template parameters are the same, only one value is set."
                    },
                    "attachments": {
                        "type": "array",
                        "description": "The attachments of the email, maximum support for `10`.",
                        "items": {
                            "$ref": "#/components/schemas/Attachment"
                        },
                        "maxItems": 10,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "expectedSendDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Expected SMS sending time."
                    },
                    "urgent": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Whether or not urgent sent flag."
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "description": "Email recipient object type, the receiveObjectType is required when sending via receiveObjectIds.",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "POLICY",
                            "TO_POLICY",
                            "ALL"
                        ]
                    },
                    "receiveObjectIds": {
                        "type": "array",
                        "description": "Email recipient object ids, maximum support for `500`. Parameter toAddress and receiveObjectIds are required to choose one, if both are passed, toAddress is used by default.",
                        "items": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Email recipient object ids, maximum support for `500`. Parameter toAddress and receiveObjectIds are required to choose one, if both are passed, toAddress is used by default."
                        },
                        "maxItems": 500,
                        "minItems": 0
                    },
                    "receivePolicyCodes": {
                        "type": "array",
                        "description": "Email recipient TOP policy codes, maximum support for `500`.",
                        "items": {
                            "type": "string",
                            "description": "Email recipient TOP policy codes, maximum support for `500`."
                        },
                        "maxItems": 500,
                        "minItems": 0
                    },
                    "batch": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether or not batch sending flag, multiple receiving addresses will be displayed in the mail."
                    }
                },
                "required": [
                    "html",
                    "type",
                    "urgent",
                    "verificationCode"
                ]
            },
            "ServerAddDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Mail server name.",
                        "example": "XCan Email Server",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Mail server protocol, only `SMTP` is supported.",
                        "enum": [
                            "SMTP"
                        ]
                    },
                    "remark": {
                        "type": "string",
                        "description": "Email server remark.",
                        "maxLength": 100
                    },
                    "host": {
                        "type": "string",
                        "description": "Email server hostname, ip or domain.",
                        "example": "smtp.xcancloud.com",
                        "maxLength": 200,
                        "minLength": 1
                    },
                    "port": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Email server port.",
                        "example": 465,
                        "maximum": 65535,
                        "minimum": 1
                    },
                    "startTlsEnabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether to enable starttls when connecting to the mail server."
                    },
                    "sslEnabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether to enable socket when communicating with the mail server."
                    },
                    "authEnabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Whether mail server authentication is required."
                    },
                    "authAccount": {
                        "$ref": "#/components/schemas/AuthAccountTo",
                        "description": "Email server authentication account information."
                    },
                    "subjectPrefix": {
                        "type": "string",
                        "description": "Email subject prefix.",
                        "maxLength": 80
                    }
                },
                "required": [
                    "host",
                    "name",
                    "port",
                    "protocol"
                ]
            },
            "EmailTestDto": {
                "type": "object",
                "properties": {
                    "serverId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Test email server id."
                    },
                    "toAddress": {
                        "type": "array",
                        "description": "List of email receiving addresses, supporting up to `500` addresses. ",
                        "example": [
                            "james@xcan.cloud"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of email receiving addresses, supporting up to `500` addresses. ",
                            "example": "[\"james@xcan.cloud\"]"
                        },
                        "maxItems": 500,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "sendTenantId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Send tenant id. Non user operation (job or innerapi) is required."
                    },
                    "sendUserId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Send user id. Non user operation (job or innerapi) is required."
                    }
                },
                "required": [
                    "serverId",
                    "toAddress"
                ]
            },
            "DeptAddDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Department name.",
                        "example": "MarketingDepartment",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Department code.",
                        "example": "HR",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Parent department id.",
                        "minimum": -1
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Department association tag ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0
                    }
                },
                "required": [
                    "code",
                    "name"
                ]
            },
            "ClientAddDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Client primary key id. Automatically generate a UUID string value if not specified.",
                        "maxLength": 40
                    },
                    "clientId": {
                        "type": "string",
                        "description": "OAuth2 registered client identifier. The clientId uniquely identifies an application to the OAuth2 server, enabling authorization and token requests.",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "OAuth2 registered client secret or null if not available. The client secret securely authenticates the application's identity, ensuring only trusted clients access protected resources.",
                        "maxLength": 200
                    },
                    "clientSecretExpiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time at which the client secret expires or null if it does not expire.."
                    },
                    "clientName": {
                        "type": "string",
                        "description": "OAuth2 registered client name.",
                        "maxLength": 200,
                        "minLength": 1
                    },
                    "clientAuthenticationMethods": {
                        "type": "array",
                        "description": "The authentication method(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "uniqueItems": true
                    },
                    "authorizationGrantTypes": {
                        "type": "array",
                        "description": "The authorization grant type(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "uniqueItems": true
                    },
                    "redirectUris": {
                        "type": "array",
                        "description": "The redirect URI(s) that the client may use in redirect-based flows.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "postLogoutRedirectUris": {
                        "type": "array",
                        "description": "The post logout redirect URI(s) that the client may use for logout. The post_logout_redirect_uri parameter is used by the client when requesting that the End-User's User Agent be redirected to after a logout has been performed.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "scopes": {
                        "type": "array",
                        "description": "The scope(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "uniqueItems": true
                    },
                    "clientSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The client configuration settings.",
                        "minProperties": 1
                    },
                    "tokenSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The token configuration settings.",
                        "minProperties": 1
                    },
                    "description": {
                        "type": "string",
                        "description": "Client description.",
                        "maxLength": 200
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Client enabled or disabled status."
                    },
                    "platform": {
                        "type": "string",
                        "default": "XCAN_TP",
                        "description": "The platform used by the client.",
                        "enum": [
                            "XCAN_TP",
                            "XCAN_OP",
                            "XCAN_2P",
                            "XCAN_3RD",
                            "XCAN_INNER"
                        ]
                    },
                    "source": {
                        "type": "string",
                        "default": "XCAN_USER_TOKEN",
                        "description": "The registered source of client.",
                        "enum": [
                            "XCAN_TP_SIGNIN",
                            "XCAN_OP_SIGNIN",
                            "XCAN_SYS_INTROSPECT",
                            "XCAN_SYS_TOKEN",
                            "XCAN_2P_SIGNIN"
                        ]
                    },
                    "bizTag": {
                        "type": "string",
                        "description": "The business tag of client.",
                        "maxLength": 80
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The client used by the tenant (id), effective for all tenants when the value is empty."
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "The client used by the tenant (name).",
                        "maxLength": 100
                    }
                },
                "required": [
                    "authorizationGrantTypes",
                    "clientAuthenticationMethods",
                    "clientId",
                    "clientName",
                    "clientSettings",
                    "scopes",
                    "tokenSettings"
                ]
            },
            "UserTokenAddDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "User access token name. The identifier must be unique.",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "expiredDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Access token expire date, valid within `24` hours by default.",
                        "example": "2025-06-28 19:00:00"
                    },
                    "password": {
                        "type": "string",
                        "example": "Current user password."
                    }
                },
                "required": [
                    "name",
                    "password"
                ]
            },
            "ApiLocaleResultUserTokenValueVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/UserTokenValueVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "UserTokenValueVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User access token id."
                    },
                    "value": {
                        "type": "string",
                        "description": "User access token value."
                    },
                    "expiredDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "User access token expired date."
                    }
                }
            },
            "AuthPolicyAddDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Authorization policy name.",
                        "example": "System administrator",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "code": {
                        "type": "string",
                        "description": "Authorization policy code.",
                        "example": "admin",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "Authorization policy type.",
                        "enum": [
                            "PRE_DEFINED",
                            "USER_DEFINED"
                        ]
                    },
                    "default0": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Default authorization policy flag.",
                        "example": false
                    },
                    "description": {
                        "type": "string",
                        "description": "Authorization policy description.",
                        "example": "System management policy",
                        "maxLength": 200
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The application id of authorization policy.",
                        "example": 1
                    },
                    "funcIds": {
                        "type": "array",
                        "description": "The application function ids of authorization policy, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "appId",
                    "code",
                    "default0",
                    "name",
                    "type"
                ]
            },
            "AuthPolicyInitDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Authorization policy id.",
                        "example": 1
                    }
                },
                "required": [
                    "id"
                ]
            },
            "AppOpenDto": {
                "type": "object",
                "properties": {
                    "appCode": {
                        "type": "string",
                        "description": "Open application code.",
                        "minLength": 1,
                        "pattern": "^[A-Za-z0-9_:\\-.]{1,80}$"
                    },
                    "editionType": {
                        "type": "string",
                        "description": "Open application edition type.",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "version": {
                        "type": "string",
                        "description": "Open application version.",
                        "minLength": 1,
                        "pattern": "^([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?(?:\\+[0-9A-Za-z-]+)?$"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Open tenant id."
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Open user id."
                    },
                    "openDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Open date."
                    },
                    "expirationDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Open application expired date."
                    }
                },
                "required": [
                    "appCode",
                    "editionType",
                    "expirationDate",
                    "openDate",
                    "tenantId",
                    "version"
                ]
            },
            "AppAddDto": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Application code.",
                        "example": "AngusTester",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Application name.",
                        "example": "AngusTester",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "showName": {
                        "type": "string",
                        "description": "Application short name for web display.",
                        "example": "AngusTester",
                        "maxLength": 40,
                        "minLength": 1
                    },
                    "icon": {
                        "type": "string",
                        "description": "Application icon.",
                        "example": "http://dev-files.xcan.cloud/storage/api/v1/file/AngusTester.icon",
                        "maxLength": 200,
                        "minLength": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "Application type. \n***CLOUD_APP (Cloud Applications)***: Deliver scalable, on-demand services via cloud infrastructure, enabling remote access and elastic resource allocation.\n***BASE_APP (Core Base Applications)***: Provide essential system functionalities and foundational services (e.g., authentication, data storage, system management) critical for platform operations.\n***OP_APP (Operational Applications)***: The operations platform centralizes and orchestrates business processes, real-time analytics, and system monitoring to enhance operational efficiency.",
                        "enum": [
                            "CLOUD_APP",
                            "BASE_APP",
                            "OP_APP"
                        ]
                    },
                    "editionType": {
                        "type": "string",
                        "description": "Application edition type.",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "description": {
                        "type": "string",
                        "description": "Application detailed introduction.",
                        "maxLength": 200
                    },
                    "authCtrl": {
                        "type": "boolean",
                        "description": "Authorization control for applications. If enabled, users must be granted corresponding access policies to use the application."
                    },
                    "url": {
                        "type": "string",
                        "description": "Application access url. The URL used to access the application.",
                        "example": "http://dev-tester.xcan.cloud/",
                        "minLength": 1
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32",
                        "default": "1000",
                        "description": "Application sorting sequence value. Supports positive integers, smaller numbers appear earlier in the list.",
                        "example": 1000,
                        "minimum": 1
                    },
                    "apiIds": {
                        "type": "array",
                        "description": "Authorization apis for application homepage access. The API endpoint invoked when accessing the application to validate permissions. Supports a maximum quantity of `50`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Application software version."
                    },
                    "openStage": {
                        "type": "string",
                        "description": "Application open or activation stage:\n\n***SIGNUP***: Automatically activates the application upon successful user registration.\n***AUTH_PASSED***: Activates the application after real-name authentication is verified.\n***OPEN_SUCCESS***: Activates the application once manually enabled by the user.",
                        "enum": [
                            "SIGNUP",
                            "AUTH_PASSED",
                            "OPEN_SUCCESS"
                        ]
                    },
                    "clientId": {
                        "type": "string",
                        "description": "OAuh2 client id.",
                        "example": "xcan_tp",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Application tag ids. Use tags to organize applications and functions. Supports a maximum quantity of `10`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 10,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "authCtrl",
                    "clientId",
                    "code",
                    "editionType",
                    "icon",
                    "name",
                    "openStage",
                    "showName",
                    "type",
                    "url",
                    "version"
                ]
            },
            "AuthOrgPolicyAuthDto": {
                "type": "object",
                "properties": {
                    "orgIds": {
                        "type": "array",
                        "description": "Need to authorize organization ids, supports a maximum of `500`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 200,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "policyIds": {
                        "type": "array",
                        "description": "Authorize policy ids, supports a maximum of `500`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 200,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "orgIds",
                    "policyIds"
                ]
            },
            "AppFuncAddDto": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "example": "script:add",
                        "minLength": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Add angus script",
                        "minLength": 1
                    },
                    "showName": {
                        "type": "string",
                        "example": "Add script",
                        "minLength": 1
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64",
                        "minimum": -1
                    },
                    "icon": {
                        "type": "string",
                        "example": "http://dev-files.xcan.cloud/storage/api/v1/file/Menu01.icon"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "description": {
                        "type": "string",
                        "example": "Add angus script"
                    },
                    "authCtrl": {
                        "type": "boolean",
                        "example": true
                    },
                    "url": {
                        "type": "string",
                        "example": "http://dev-tester.xcan.cloud/scripts"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10000
                    },
                    "apiIds": {
                        "type": "array",
                        "description": "Function associated api ids",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Function tag ids",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 10,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "authCtrl",
                    "code",
                    "icon",
                    "name",
                    "showName",
                    "type"
                ]
            },
            "AppImportDto": {
                "type": "object",
                "properties": {
                    "importType": {
                        "type": "string",
                        "description": "Import application file format type.",
                        "enum": [
                            "JSON",
                            "CSV",
                            "EXCEL"
                        ]
                    }
                },
                "required": [
                    "importType"
                ]
            },
            "ApiAddDto": {
                "type": "object",
                "properties": {
                    "serviceId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Api service id. Note: Modification is not allowed.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Api summary or name.",
                        "example": "Add user api",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "operationId": {
                        "type": "string",
                        "description": "Api code or OAS operation id.",
                        "example": "user:add",
                        "maxLength": 80,
                        "minLength": 1
                    },
                    "uri": {
                        "type": "string",
                        "description": "Api http URI.",
                        "example": "/api/v1/user",
                        "maxLength": 800,
                        "minLength": 1
                    },
                    "method": {
                        "type": "string",
                        "description": "Api http request method.",
                        "enum": [
                            "GET",
                            "HEAD",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "TRACE"
                        ],
                        "example": "POST"
                    },
                    "type": {
                        "type": "string",
                        "description": "Angus platform API type. If the value is empty, automatically determine based on URI.",
                        "enum": [
                            "API",
                            "OPEN_API",
                            "OPEN_API_2P",
                            "DOOR_API",
                            "PUB_API",
                            "VIEW",
                            "PUB_VIEW"
                        ],
                        "example": "API"
                    },
                    "description": {
                        "type": "string",
                        "description": "API detailed description.",
                        "maxLength": 20000
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Api resource name or OAS tag name. If the value is empty, automatically determine based on URI.",
                        "example": "user"
                    },
                    "resourceDescription": {
                        "type": "string",
                        "description": "Api resource description.",
                        "example": "User",
                        "maxLength": 200
                    }
                },
                "required": [
                    "method",
                    "name",
                    "operationId",
                    "serviceId",
                    "uri"
                ]
            },
            "WebTagUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Web application tag id.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Web application tag name.",
                        "example": "dev",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "description": {
                        "type": "string",
                        "description": "Web application tag description.",
                        "maxLength": 200,
                        "minLength": 1
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "UserUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User id."
                    },
                    "username": {
                        "type": "string",
                        "description": "Username, unique user identification.",
                        "maxLength": 100
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User first name.",
                        "example": "James",
                        "maxLength": 100
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name.",
                        "example": "Jones",
                        "maxLength": 100
                    },
                    "fullName": {
                        "type": "string",
                        "description": "User full name.",
                        "example": "James Jones",
                        "maxLength": 100
                    },
                    "country": {
                        "type": "string",
                        "description": "User country code.",
                        "example": "CN",
                        "maxLength": 16
                    },
                    "itc": {
                        "type": "string",
                        "description": "International telephone area code.",
                        "example": 86,
                        "maxLength": 8
                    },
                    "mobile": {
                        "type": "string",
                        "description": "User mobile.",
                        "example": 13813000000,
                        "maxLength": 16
                    },
                    "email": {
                        "type": "string",
                        "description": "User e-mail.",
                        "example": "james@xcan.cloud",
                        "maxLength": 100
                    },
                    "landline": {
                        "type": "string",
                        "description": "User landline.",
                        "example": "010-88287890",
                        "maxLength": 40
                    },
                    "avatar": {
                        "type": "string",
                        "description": "User avatar.",
                        "example": "http://prod-files.xcan.cloud/storage/pubapi/v1/file/logo.png",
                        "maxLength": 400
                    },
                    "title": {
                        "type": "string",
                        "description": "User title.",
                        "example": "CTO",
                        "maxLength": 100
                    },
                    "gender": {
                        "type": "string",
                        "default": "UNKNOWN",
                        "description": "User gender.",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "UNKNOWN"
                        ],
                        "example": "MALE"
                    },
                    "address": {
                        "type": "string",
                        "example": "User's residence or contact address.",
                        "maxLength": 200
                    },
                    "depts": {
                        "type": "array",
                        "description": "User's departments information, the maximum support is `2000`.",
                        "items": {
                            "$ref": "#/components/schemas/UserDeptTo"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "groupIds": {
                        "type": "array",
                        "description": "User's group ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "User association tag ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "id"
                ]
            },
            "UserSysAdminSetDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User id.",
                        "example": 1
                    },
                    "sysAdmin": {
                        "type": "boolean",
                        "description": "Whether or not system administrator flag.",
                        "example": false
                    }
                },
                "required": [
                    "id",
                    "sysAdmin"
                ]
            },
            "UserLockedDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User id.",
                        "example": 1
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Whether or not lock user flag."
                    },
                    "lockStartDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start lock time."
                    },
                    "lockEndDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "DistributedLock end time, permanently locked when value is empty."
                    }
                },
                "required": [
                    "id",
                    "locked"
                ]
            },
            "EnabledOrDisabledDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Resource id.",
                        "example": 1
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Resource enabled or disabled flag.",
                        "example": true
                    }
                },
                "required": [
                    "enabled",
                    "id"
                ]
            },
            "UserDirectoryReorderDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Directory id."
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Sorting value, the synchronization priority is high if the value is small."
                    }
                },
                "required": [
                    "id",
                    "sequence"
                ]
            },
            "UserCurrentUpdateDto": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username, unique identification.",
                        "example": "U33730000",
                        "maxLength": 100
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User first name.",
                        "example": "James",
                        "maxLength": 100
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name.",
                        "example": "Jones",
                        "maxLength": 100
                    },
                    "fullName": {
                        "type": "string",
                        "description": "User full name.",
                        "example": "James Jones",
                        "maxLength": 100
                    },
                    "landline": {
                        "type": "string",
                        "description": "User landline.",
                        "example": "010-88287890",
                        "maxLength": 100
                    },
                    "avatar": {
                        "type": "string",
                        "description": "User avatar",
                        "example": "http://prod-apis.xcan.cloud/storage/pubapi/v1/file/logo.png",
                        "maxLength": 100
                    },
                    "title": {
                        "type": "string",
                        "description": "User title.",
                        "example": "CTO",
                        "maxLength": 100
                    },
                    "gender": {
                        "type": "string",
                        "default": "UNKNOWN",
                        "description": "User gender.",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "UNKNOWN"
                        ],
                        "example": "MALE"
                    },
                    "address": {
                        "type": "string"
                    }
                }
            },
            "CurrentMobileUpdateDto": {
                "type": "object",
                "properties": {
                    "bizKey": {
                        "type": "string",
                        "description": "Sms business type key.",
                        "enum": [
                            "MODIFY_MOBILE"
                        ],
                        "example": "MODIFY_MOBILE"
                    },
                    "mobile": {
                        "type": "string",
                        "description": "User mobile.",
                        "example": 13813000000,
                        "minLength": 1
                    },
                    "country": {
                        "type": "string",
                        "description": "User country code.",
                        "example": "CN",
                        "maxLength": 16,
                        "minLength": 1
                    },
                    "itc": {
                        "type": "string",
                        "description": "International telephone area code.",
                        "example": 86,
                        "maxLength": 8,
                        "minLength": 1
                    },
                    "verificationCode": {
                        "type": "string",
                        "description": "Sms verification code.",
                        "example": 778717,
                        "maxLength": 20
                    },
                    "linkSecret": {
                        "type": "string",
                        "description": "Sms linkSecret.",
                        "maxLength": 80,
                        "minLength": 1
                    }
                },
                "required": [
                    "bizKey",
                    "country",
                    "itc",
                    "linkSecret",
                    "mobile",
                    "verificationCode"
                ]
            },
            "CurrentEmailUpdateDto": {
                "type": "object",
                "properties": {
                    "bizKey": {
                        "type": "string",
                        "description": "Email business type key.",
                        "enum": [
                            "EVENT_NOTICE",
                            "SIGNUP",
                            "SIGNIN",
                            "PASSWORD_FORGET",
                            "PASSWORD_UPDATE",
                            "SIGN_CANCEL",
                            "MODIFY_EMAIL",
                            "BIND_EMAIL",
                            "PAY_PASSWORD_UPDATE",
                            "REALNAME_AUTH_SUBMIT",
                            "REALNAME_AUTH_PASSED",
                            "REALNAME_AUDIT_FAILURE",
                            "SYS_EXCEPTION_NOTICE",
                            "SYS_RECOVERY_NOTICE",
                            "SYS_SECURITY_NOTICE",
                            "LICENSE_SENT",
                            "CHANNEL_TEST",
                            "TODO_REALNAME_AUTH",
                            "TODO_BUSINESS_CONSULTATION",
                            "TODO_OFFLINE_SERVICE",
                            "TODO_WORKORDER",
                            "TODO_TRANSFER_CONFIRM",
                            "TODO_INVOICE_CONFIRM",
                            "TODO_WITHDRAW_CONFIRM",
                            "RECHARGE_SUCCESS",
                            "WITHDRAW_SUCCESS",
                            "ORDER_PAY_SUCCESS",
                            "ORDER_PAY_PENDING",
                            "ORDER_PAY_TIMEOUT",
                            "ORDER_TO_EXPIRE",
                            "ORDER_CHANGE_SUCCESS",
                            "WORKORDER_REPLY_REMINDER",
                            "INVOICE_APPLY_SUCCESS",
                            "COUPON_DISTRIBUTION",
                            "COUPON_TO_EXPIRE",
                            "BLOG_SUBSCRIPTION_NOTICE",
                            "TESTING_EXEC_STARTED",
                            "TESTING_EXEC_FINISHED",
                            "TESTING_EXEC_FAILED",
                            "TESTING_TASK_OVERDUE",
                            "INDICATOR_MODIFY_SUBMIT",
                            "INDICATOR_AUDIT_PASSED",
                            "INDICATOR_AUDIT_FAILED"
                        ]
                    },
                    "email": {
                        "type": "string",
                        "description": "User email.",
                        "example": "james@xcan.cloud",
                        "maxLength": 100,
                        "minLength": 1
                    },
                    "verificationCode": {
                        "type": "string",
                        "description": "Email verification code.",
                        "example": 778717,
                        "maxLength": 8,
                        "minLength": 1
                    },
                    "linkSecret": {
                        "type": "string",
                        "description": "Email linkSecret.",
                        "maxLength": 80,
                        "minLength": 1
                    }
                },
                "required": [
                    "bizKey",
                    "email",
                    "linkSecret",
                    "verificationCode"
                ]
            },
            "TORoleUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Operation role id.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Operation role name.",
                        "example": "System administrator",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string",
                        "description": "Operation role description.",
                        "example": "System management policy",
                        "maxLength": 200
                    }
                },
                "required": [
                    "id"
                ]
            },
            "TenantUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Tenant id.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Tenant name.",
                        "example": "XCan Company",
                        "maxLength": 100
                    },
                    "type": {
                        "type": "string",
                        "description": "Tenant type.",
                        "enum": [
                            "PERSONAL",
                            "ENTERPRISE",
                            "GOVERNMENT",
                            "UNKNOWN"
                        ]
                    },
                    "remark": {
                        "type": "string",
                        "description": "Tenant remark.",
                        "maxLength": 200
                    },
                    "address": {
                        "type": "string",
                        "description": "Tenant contact address.",
                        "maxLength": 200
                    },
                    "firstName": {
                        "type": "string",
                        "description": "System administer first name.",
                        "example": "James"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name.",
                        "example": "Jones"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "System administer full name.",
                        "example": "James Jones"
                    },
                    "title": {
                        "type": "string",
                        "description": "System administer title.",
                        "example": "CTO",
                        "maxLength": 100
                    },
                    "itc": {
                        "type": "string",
                        "description": "International telephone area code.",
                        "example": 86,
                        "maxLength": 8
                    },
                    "country": {
                        "type": "string",
                        "description": "User country code",
                        "example": "CN",
                        "maxLength": 16,
                        "minLength": 1
                    },
                    "mobile": {
                        "type": "string",
                        "description": "System administer mobile. There must be one mobile and email address",
                        "example": 13813000000,
                        "maxLength": 16
                    },
                    "email": {
                        "type": "string",
                        "description": "System administer email. There must be one mobile and email address",
                        "example": "james@xcan.cloud",
                        "maxLength": 100
                    },
                    "personalCert": {
                        "$ref": "#/components/schemas/PersonalCert"
                    },
                    "enterpriseCert": {
                        "$ref": "#/components/schemas/EnterpriseCert"
                    },
                    "enterpriseLegalPersonCert": {
                        "$ref": "#/components/schemas/EnterpriseLegalPersonCert"
                    },
                    "governmentCert": {
                        "$ref": "#/components/schemas/GovernmentCert"
                    },
                    "certSubmitted": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "TenantLockedDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Tenant id.",
                        "example": 1
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Tenant locked or unlocked flag.",
                        "example": true
                    },
                    "lockStartDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Tenant account locking start date.",
                        "example": "2022-04-01 12:00:00"
                    },
                    "lockEndDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Tenant account locking end date.",
                        "example": "2023-06-01 12:00:00"
                    }
                },
                "required": [
                    "id",
                    "locked"
                ]
            },
            "TenantRealNameAuditDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Tenant id.",
                        "example": 1
                    },
                    "status": {
                        "type": "string",
                        "description": "Tenant real name status.",
                        "enum": [
                            "AUDITED,FAILED_AUDIT"
                        ],
                        "example": "AUDITED"
                    },
                    "reason": {
                        "type": "string",
                        "example": "Reason for tenant's real name approval or rejection.",
                        "maxLength": 200
                    }
                },
                "required": [
                    "id",
                    "status"
                ]
            },
            "SmsTemplateUpdateDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Sms template name.",
                        "maxLength": 100
                    },
                    "content": {
                        "type": "string",
                        "example": "content"
                    },
                    "verificationCode": {
                        "type": "boolean",
                        "description": "Whether or not verification code sms flag."
                    },
                    "verificationCodeValidSecond": {
                        "type": "integer",
                        "format": "int32",
                        "example": "Validity of verification code, in seconds"
                    },
                    "thirdCode": {
                        "type": "string",
                        "description": "Third template code.",
                        "maxLength": 80
                    },
                    "language": {
                        "type": "string",
                        "description": "Template sms language.",
                        "enum": [
                            "en",
                            "zh_CN"
                        ]
                    }
                },
                "required": [
                    "name",
                    "verificationCode"
                ]
            },
            "SmsChannelUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Sms channel id.",
                        "example": 1
                    },
                    "accessKeySecret": {
                        "type": "string",
                        "description": "The Api accessKey secret of sms channel.",
                        "maxLength": 160
                    },
                    "accessKeyId": {
                        "type": "string",
                        "description": "The Api accessKey id of sms channel.",
                        "maxLength": 160
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The Api endpoint of sms channel.",
                        "maxLength": 200
                    },
                    "thirdChannelNo": {
                        "type": "string",
                        "description": "Third sms channel no.",
                        "maxLength": 80
                    }
                },
                "required": [
                    "id"
                ]
            },
            "UserPreferenceUpdateDto": {
                "type": "object",
                "properties": {
                    "language": {
                        "type": "string",
                        "description": "Language set by user",
                        "enum": [
                            "en",
                            "zh_CN"
                        ],
                        "example": "zh_CN"
                    }
                }
            },
            "UserApiClientProxyUpdateDto": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "User client proxy access address url.",
                        "example": "ws://localhost:6806/angusProxy",
                        "maxLength": 200,
                        "minLength": 1
                    }
                },
                "required": [
                    "url"
                ]
            },
            "UserApiProxyEnabledDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Enable apis proxy name.",
                        "enum": [
                            "NO_PROXY",
                            "CLIENT_PROXY",
                            "SERVER_PROXY",
                            "CLOUD_PROXY"
                        ]
                    }
                },
                "required": [
                    "name"
                ]
            },
            "QuotaCheckDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Quota resource name.",
                        "enum": [
                            "User",
                            "UserDept",
                            "UserGroup",
                            "Dept",
                            "DeptLevel",
                            "DeptUser",
                            "Group",
                            "GroupUser",
                            "OrgTag",
                            "OrgTargetTag",
                            "PolicyCustom",
                            "SystemToken",
                            "UserToken",
                            "FileStore",
                            "DataSpace",
                            "AngusTesterProject",
                            "AngusTesterServices",
                            "AngusTesterApis",
                            "AngusTesterServicesApis",
                            "AngusTesterVariable",
                            "AngusTesterTargetVariable",
                            "AngusTesterDataset",
                            "AngusTesterTargetDataset",
                            "AngusTesterScenario",
                            "AngusTesterScenarioApis",
                            "AngusTesterMockService",
                            "AngusTesterMockServiceApis",
                            "AngusTesterMockApisResponse",
                            "AngusTesterMockIterations",
                            "AngusTesterMockDatasource",
                            "AngusTesterNode",
                            "AngusTesterConcurrency",
                            "AngusTesterConcurrentTask",
                            "AngusTesterScript",
                            "AngusTesterExecution",
                            "AngusTesterExecutionDebug",
                            "AngusTesterReport",
                            "AngusTesterSprint",
                            "AngusTesterTask",
                            "AngusTesterSprintTask",
                            "AngusTesterFuncPlan",
                            "AngusTesterFuncCase",
                            "AngusTesterFuncPlanCase",
                            "AngusTesterTag",
                            "AngusTesterModule"
                        ]
                    },
                    "quota": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Quota value, storage disk must be converted to bytes."
                    }
                },
                "required": [
                    "name",
                    "quota"
                ]
            },
            "QuotaReplaceByOrderDto": {
                "type": "object",
                "properties": {
                    "orderId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Order id."
                    },
                    "quotas": {
                        "type": "array",
                        "description": "Order resource quotas.",
                        "items": {
                            "$ref": "#/components/schemas/QuotaReplaceDto"
                        },
                        "minItems": 1,
                        "uniqueItems": true
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Order tenant id."
                    },
                    "status": {
                        "type": "string",
                        "description": "Order status.",
                        "minLength": 1
                    },
                    "expired": {
                        "type": "boolean",
                        "description": "Order expired flag."
                    }
                },
                "required": [
                    "expired",
                    "orderId",
                    "quotas",
                    "status",
                    "tenantId"
                ]
            },
            "ServiceUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Service id.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Service name.",
                        "example": "User center service",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string",
                        "description": "Service description.",
                        "example": "User center service, providing complete tenant, organization, and user management service capabilities, etc.",
                        "maxLength": 200
                    },
                    "source": {
                        "type": "string",
                        "description": "Service source.",
                        "enum": [
                            "BACK_ADD",
                            "EUREKA"
                        ]
                    },
                    "routePath": {
                        "type": "string",
                        "description": "The route path in api gateway of service.",
                        "example": "/uc",
                        "maxLength": 80
                    },
                    "url": {
                        "type": "string",
                        "description": "The access url of service.",
                        "example": "http://local-api.xcan.cloud:1806",
                        "maxLength": 400
                    },
                    "healthUrl": {
                        "type": "string",
                        "description": "The health checking url of service.",
                        "example": "http://local-api.xcan.cloud:1806/actuator/health",
                        "maxLength": 400
                    },
                    "apiDocUrl": {
                        "type": "string",
                        "description": "The OpenAPI doc url of service.",
                        "example": "http://local-api.xcan.cloud:1806/v3/api-docs?group=Api",
                        "maxLength": 400
                    }
                },
                "required": [
                    "id"
                ]
            },
            "OrgTagUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Organization tag id.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Organization tag name.",
                        "example": "dev",
                        "maxLength": 100,
                        "minLength": 1
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "GroupUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Group Id.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Group name.",
                        "example": "Product Group",
                        "maxLength": 100
                    },
                    "code": {
                        "type": "string",
                        "description": "Group code.",
                        "example": "PRODUCT_001",
                        "maxLength": 80
                    },
                    "remark": {
                        "type": "string",
                        "description": "Group remark.",
                        "example": "This a group remark ...",
                        "maxLength": 200
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Group association tag ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0
                    }
                },
                "required": [
                    "id"
                ]
            },
            "EmailTemplateUpdateDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Template name.",
                        "maxLength": 100
                    },
                    "content": {
                        "type": "string",
                        "description": "Template content.",
                        "maxLength": 200000
                    },
                    "verificationCode": {
                        "type": "boolean",
                        "description": "Whether or not verification code email flag."
                    },
                    "verificationCodeValidSecond": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Validity of verification code, in seconds."
                    },
                    "subjectPrefix": {
                        "type": "string",
                        "description": "Template email subject prefix.",
                        "maxLength": 80
                    },
                    "language": {
                        "type": "string",
                        "description": "Template email language.",
                        "enum": [
                            "en",
                            "zh_CN"
                        ]
                    }
                }
            },
            "ServerUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Mail server id."
                    },
                    "name": {
                        "type": "string",
                        "description": "Mail server name.",
                        "example": "XCan Email Server",
                        "maxLength": 100
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Mail server protocol, only `SMTP` is supported.",
                        "enum": [
                            "SMTP"
                        ]
                    },
                    "remark": {
                        "type": "string",
                        "description": "Email server remark.",
                        "maxLength": 100
                    },
                    "host": {
                        "type": "string",
                        "description": "Email server hostname, ip or domain.",
                        "example": "smtp.xcancloud.com",
                        "maxLength": 200
                    },
                    "port": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Email server port.",
                        "example": 465,
                        "maximum": 65535,
                        "minimum": 1
                    },
                    "startTlsEnabled": {
                        "type": "boolean",
                        "description": "Whether to enable starttls when connecting to the mail server."
                    },
                    "sslEnabled": {
                        "type": "boolean",
                        "description": "Whether to enable socket when communicating with the mail server."
                    },
                    "authEnabled": {
                        "type": "boolean",
                        "description": "Whether mail server authentication is required."
                    },
                    "authAccount": {
                        "$ref": "#/components/schemas/AuthAccountTo",
                        "description": "Email server authentication account information."
                    },
                    "subjectPrefix": {
                        "type": "string",
                        "description": "Email subject prefix.",
                        "maxLength": 80
                    }
                },
                "required": [
                    "id"
                ]
            },
            "DeptUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Department name",
                        "example": "MarketingDepartment",
                        "maxLength": 100
                    },
                    "code": {
                        "type": "string",
                        "description": "Department code",
                        "example": "HR",
                        "maxLength": 80
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Parent department id",
                        "example": "DEFAULT_ROOT_PID"
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Department association tag ids, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0
                    }
                },
                "required": [
                    "id"
                ]
            },
            "ClientUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Client primary key id. ",
                        "maxLength": 40,
                        "minLength": 1
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "OAuth2 registered client secret or null if not available. The client secret securely authenticates the application's identity, ensuring only trusted clients access protected resources.",
                        "maxLength": 200
                    },
                    "clientSecretExpiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time at which the client secret expires or null if it does not expire.."
                    },
                    "clientName": {
                        "type": "string",
                        "description": "OAuth2 registered client name.",
                        "maxLength": 200
                    },
                    "clientAuthenticationMethods": {
                        "type": "array",
                        "description": "The authentication method(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "authorizationGrantTypes": {
                        "type": "array",
                        "description": "The authorization grant type(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "redirectUris": {
                        "type": "array",
                        "description": "The redirect URI(s) that the client may use in redirect-based flows.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "postLogoutRedirectUris": {
                        "type": "array",
                        "description": "The post logout redirect URI(s) that the client may use for logout. The post_logout_redirect_uri parameter is used by the client when requesting that the End-User's User Agent be redirected to after a logout has been performed.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "scopes": {
                        "type": "array",
                        "description": "The scope(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "clientSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The client configuration settings."
                    },
                    "tokenSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The token configuration settings."
                    },
                    "description": {
                        "type": "string",
                        "description": "Client description.",
                        "maxLength": 200
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Client enabled or disabled status."
                    },
                    "bizTag": {
                        "type": "string",
                        "description": "The business tag of client.",
                        "maxLength": 80
                    }
                },
                "required": [
                    "id"
                ]
            },
            "AuthUserRealNameUpdateDto": {
                "type": "object",
                "properties": {
                    "tenantId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Real name tenant id.",
                        "example": 1
                    },
                    "realNameStatus": {
                        "type": "string",
                        "description": "Tenant real name status.",
                        "enum": [
                            "NOT_SUBMITTED",
                            "AUDITING",
                            "AUDITED",
                            "FAILED_AUDIT"
                        ]
                    }
                },
                "required": [
                    "realNameStatus",
                    "tenantId"
                ]
            },
            "AuthUserPasswordUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Update password user id.",
                        "example": 100
                    },
                    "newPassword": {
                        "type": "string",
                        "description": "User new password.",
                        "example": "xcan@123"
                    }
                },
                "required": [
                    "id",
                    "newPassword"
                ]
            },
            "CurrentAuthUserPasswordInitDto": {
                "type": "object",
                "properties": {
                    "newPassword": {
                        "type": "string",
                        "description": "Current user initialization password.",
                        "example": "876@4321_"
                    }
                },
                "required": [
                    "newPassword"
                ]
            },
            "CurrentAuthUserPasswordUpdateDto": {
                "type": "object",
                "properties": {
                    "oldPassword": {
                        "type": "string",
                        "description": "User old password.",
                        "example": "123@5678_"
                    },
                    "newPassword": {
                        "type": "string",
                        "description": "User new password.",
                        "example": "876@4321_"
                    }
                },
                "required": [
                    "newPassword",
                    "oldPassword"
                ]
            },
            "AuthPolicyUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Authorization policy id.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Authorization policy name.",
                        "example": "System administrator",
                        "maxLength": 100
                    },
                    "default0": {
                        "type": "boolean",
                        "default": "false",
                        "description": "Default authorization policy flag.",
                        "example": false
                    },
                    "description": {
                        "type": "string",
                        "description": "Authorization policy description.",
                        "example": "System management policy"
                    },
                    "funcIds": {
                        "type": "array",
                        "description": "The application function ids of authorization policy, the maximum support is `2000`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 2000,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "id"
                ]
            },
            "AppOpenRenewDto": {
                "type": "object",
                "properties": {
                    "appCode": {
                        "type": "string",
                        "description": "Open application code.",
                        "minLength": 1,
                        "pattern": "^[A-Za-z0-9_:\\-.]{1,80}$"
                    },
                    "editionType": {
                        "type": "string",
                        "description": "Open application edition type.",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "version": {
                        "type": "string",
                        "description": "Open application version.",
                        "minLength": 1,
                        "pattern": "^([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?(?:\\+[0-9A-Za-z-]+)?$"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Open tenant id."
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Open user id."
                    },
                    "openDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Open date."
                    },
                    "expirationDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Open application expired date."
                    }
                },
                "required": [
                    "appCode",
                    "editionType",
                    "expirationDate",
                    "openDate",
                    "tenantId",
                    "version"
                ]
            },
            "AppUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string",
                        "description": "Application code.",
                        "example": "AngusTester",
                        "maxLength": 80
                    },
                    "name": {
                        "type": "string",
                        "description": "Application name.",
                        "example": "AngusTester",
                        "maxLength": 100
                    },
                    "showName": {
                        "type": "string",
                        "description": "Application short name for web display.",
                        "example": "AngusTester",
                        "maxLength": 40
                    },
                    "icon": {
                        "type": "string",
                        "description": "Application icon.",
                        "example": "http://dev-files.xcan.cloud/storage/api/v1/file/AngusTester.icon",
                        "maxLength": 200
                    },
                    "type": {
                        "type": "string",
                        "description": "Application type. \n***CLOUD_APP (Cloud Applications)***: Deliver scalable, on-demand services via cloud infrastructure, enabling remote access and elastic resource allocation.\n***BASE_APP (Core Base Applications)***: Provide essential system functionalities and foundational services (e.g., authentication, data storage, system management) critical for platform operations.\n***OP_APP (Operational Applications)***: The operations platform centralizes and orchestrates business processes, real-time analytics, and system monitoring to enhance operational efficiency.",
                        "enum": [
                            "CLOUD_APP",
                            "BASE_APP",
                            "OP_APP"
                        ]
                    },
                    "editionType": {
                        "type": "string",
                        "description": "Application edition type.",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "description": {
                        "type": "string",
                        "description": "Application detailed introduction.",
                        "maxLength": 200
                    },
                    "authCtrl": {
                        "type": "boolean",
                        "description": "Authorization control for applications. If enabled, users must be granted corresponding access policies to use the application."
                    },
                    "url": {
                        "type": "string",
                        "description": "Application access url. The URL used to access the application.",
                        "example": "http://dev-tester.xcan.cloud/"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32",
                        "default": "1000",
                        "description": "Application sorting sequence value. Supports positive integers, smaller numbers appear earlier in the list.",
                        "example": 1000,
                        "minimum": 1
                    },
                    "apiIds": {
                        "type": "array",
                        "description": "Authorization apis for application homepage access. The API endpoint invoked when accessing the application to validate permissions. Supports a maximum quantity of `50`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Application software version."
                    },
                    "openStage": {
                        "type": "string",
                        "description": "Application open or activation stage:\n\n***SIGNUP***: Automatically activates the application upon successful user registration.\n***AUTH_PASSED***: Activates the application after real-name authentication is verified.\n***OPEN_SUCCESS***: Activates the application once manually enabled by the user.",
                        "enum": [
                            "SIGNUP",
                            "AUTH_PASSED",
                            "OPEN_SUCCESS"
                        ]
                    },
                    "clientId": {
                        "type": "string",
                        "description": "OAuh2 client id.",
                        "example": "xcan_tp",
                        "maxLength": 80
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Application tag ids. Use tags to organize applications and functions. Supports a maximum quantity of `10`.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 10,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "id"
                ]
            },
            "AppFuncUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "code": {
                        "type": "string",
                        "example": "script:add"
                    },
                    "name": {
                        "type": "string",
                        "example": "Add angus script"
                    },
                    "showName": {
                        "type": "string",
                        "example": "Add script"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64",
                        "minimum": -1
                    },
                    "icon": {
                        "type": "string",
                        "example": "http://dev-files.xcan.cloud/storage/api/v1/file/Menu01.icon"
                    },
                    "description": {
                        "type": "string",
                        "example": "Add angus script"
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string",
                        "example": "http://dev-tester.xcan.cloud/scripts"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10000
                    },
                    "apiIds": {
                        "type": "array",
                        "description": "Application homepage associated api ids",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "tagIds": {
                        "type": "array",
                        "description": "Application tag ids",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 10,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "id"
                ]
            },
            "AppSiteInfoUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Application id."
                    },
                    "showName": {
                        "type": "string",
                        "description": "Application short name for web display.",
                        "example": "AngusTester",
                        "maxLength": 40
                    },
                    "icon": {
                        "type": "string",
                        "description": "Application icon.",
                        "example": "http://dev-files.xcan.cloud/storage/api/v1/file/AngusTester.icon",
                        "maxLength": 200
                    },
                    "url": {
                        "type": "string",
                        "description": "Application access url. The URL used to access the application.",
                        "example": "http://dev-tester.xcan.cloud/"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "ApiUpdateDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Api id.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Api summary or name.",
                        "example": "Add user api",
                        "maxLength": 400
                    },
                    "operationId": {
                        "type": "string",
                        "description": "Api code or OAS operation id.",
                        "example": "user:add",
                        "maxLength": 80
                    },
                    "uri": {
                        "type": "string",
                        "description": "Api http URI.",
                        "example": "/api/v1/user",
                        "maxLength": 200
                    },
                    "method": {
                        "type": "string",
                        "description": "Api http request method.",
                        "enum": [
                            "GET",
                            "HEAD",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "TRACE"
                        ],
                        "example": "POST"
                    },
                    "type": {
                        "type": "string",
                        "description": "Angus platform API type. If the value is empty, automatically determine based on URI.",
                        "enum": [
                            "API",
                            "OPEN_API",
                            "OPEN_API_2P",
                            "DOOR_API",
                            "PUB_API",
                            "VIEW",
                            "PUB_VIEW"
                        ],
                        "example": "API"
                    },
                    "description": {
                        "type": "string",
                        "description": "API detailed description.",
                        "maxLength": 20000
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Api resource name or OAS tag name. If the value is empty, automatically determine based on URI.",
                        "example": "user"
                    },
                    "resourceDescription": {
                        "type": "string",
                        "description": "Api resource description.",
                        "example": "User",
                        "maxLength": 200
                    }
                },
                "required": [
                    "id"
                ]
            },
            "SearchCriteria": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Filter field name"
                    },
                    "value": {
                        "type": "object",
                        "description": "Filter value"
                    },
                    "op": {
                        "type": "string",
                        "description": "Filter condition",
                        "enum": [
                            "GREATER_THAN",
                            "LESS_THAN",
                            "GREATER_THAN_EQUAL",
                            "LESS_THAN_EQUAL",
                            "EQUAL",
                            "NOT_EQUAL",
                            "MATCH",
                            "MATCH_END",
                            "NOT_MATCH",
                            "NOT_MATCH_END",
                            "IN",
                            "NOT_IN",
                            "IS_NULL",
                            "IS_NOT_NULL"
                        ]
                    }
                }
            },
            "ApiLocaleResultPageResultWebTagDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultWebTagDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultWebTagDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/WebTagDetailVo"
                        }
                    }
                }
            },
            "WebTagDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultWebTagDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/WebTagDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPageResultWebTagTargetDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultWebTagTargetDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultWebTagTargetDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/WebTagTargetDetailVo"
                        }
                    }
                }
            },
            "WebTagTargetDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "APP",
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "targetId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "targetName": {
                        "type": "string"
                    },
                    "tagId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tagName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "targetCreatedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "targetCreatedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "targetCreatedByName": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultPageResultUserListVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultUserListVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultUserListVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/UserListVo"
                        }
                    }
                }
            },
            "UserListVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "username": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "itc": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "mobile": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "landline": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "gender": {
                        "type": "string",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "UNKNOWN"
                        ]
                    },
                    "address": {
                        "type": "string"
                    },
                    "sysAdmin": {
                        "type": "boolean"
                    },
                    "deptHead": {
                        "type": "boolean"
                    },
                    "mainDeptId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "PLATFORM_SIGNUP",
                            "INVITATION_CODE_SIGNUP",
                            "BACKGROUND_SIGNUP",
                            "BACKGROUND_ADDED",
                            "THIRD_PARTY_LOGIN",
                            "LDAP_SYNCHRONIZE"
                        ]
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "lockStartDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lockEndDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "online": {
                        "type": "boolean"
                    },
                    "onlineDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "offlineDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultUserDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/UserDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "IdAndName": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "UserDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "username": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "itc": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "mobile": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "landline": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "gender": {
                        "type": "string",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "UNKNOWN"
                        ]
                    },
                    "address": {
                        "type": "string"
                    },
                    "sysAdmin": {
                        "type": "boolean"
                    },
                    "deptHead": {
                        "type": "boolean"
                    },
                    "mainDeptId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "PLATFORM_SIGNUP",
                            "INVITATION_CODE_SIGNUP",
                            "BACKGROUND_SIGNUP",
                            "BACKGROUND_ADDED",
                            "THIRD_PARTY_LOGIN",
                            "LDAP_SYNCHRONIZE"
                        ]
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "lockStartDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lockEndDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "passwordStrength": {
                        "type": "string",
                        "enum": [
                            "UNKNOWN",
                            "WEAK",
                            "MEDIUM",
                            "STRONG"
                        ]
                    },
                    "passwordExpired": {
                        "type": "boolean"
                    },
                    "passwordExpiredDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tenantRealNameStatus": {
                        "type": "string",
                        "enum": [
                            "NOT_SUBMITTED",
                            "AUDITING",
                            "AUDITED",
                            "FAILED_AUDIT"
                        ]
                    },
                    "online": {
                        "type": "boolean"
                    },
                    "onlineDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "offlineDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IdAndName"
                        }
                    },
                    "depts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserDeptTo"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupTo"
                        }
                    }
                }
            },
            "UserGroupTo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User group id."
                    },
                    "name": {
                        "type": "string",
                        "description": "User group name."
                    }
                },
                "required": [
                    "id"
                ]
            },
            "ApiLocaleResultPageResultOrgTagTargetVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultOrgTagTargetVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "OrgTagTargetVo": {
                "type": "object",
                "properties": {
                    "tagId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tagName": {
                        "type": "string"
                    },
                    "targetId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "USER",
                            "DEPT",
                            "GROUP"
                        ]
                    },
                    "targetName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "targetCreatedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "targetCreatedByName": {
                        "type": "string"
                    },
                    "targetCreatedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultOrgTagTargetVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/OrgTagTargetVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultUserGroupVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultUserGroupVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultUserGroupVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupVo"
                        }
                    }
                }
            },
            "UserGroupVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "groupId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "groupName": {
                        "type": "string"
                    },
                    "groupCode": {
                        "type": "string"
                    },
                    "groupEnabled": {
                        "type": "boolean"
                    },
                    "groupRemark": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "mobile": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultPageResultUserDeptVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultUserDeptVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultUserDeptVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/UserDeptVo"
                        }
                    }
                }
            },
            "UserDeptVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "deptId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "deptCode": {
                        "type": "string"
                    },
                    "deptName": {
                        "type": "string"
                    },
                    "deptHead": {
                        "type": "boolean"
                    },
                    "mainDept": {
                        "type": "boolean"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "mobile": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "hasSubDept": {
                        "type": "boolean"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultUsernameCheckVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/UsernameCheckVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "UsernameCheckVo": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Existing user id"
                    },
                    "username": {
                        "type": "string",
                        "description": "Existing username"
                    }
                }
            },
            "ApiLocaleResultListUserSysAdminVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/UserSysAdminVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "UserSysAdminVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "itc": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "mobile": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "firstSysAdmin": {
                        "type": "boolean",
                        "description": "The first administrator from register or add in the background"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultListUserDirectoryDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/UserDirectoryDetailVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "UserDirectoryDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "server": {
                        "$ref": "#/components/schemas/DirectoryServer"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/DirectorySchema"
                    },
                    "userSchema": {
                        "$ref": "#/components/schemas/DirectoryUserSchema"
                    },
                    "groupSchema": {
                        "$ref": "#/components/schemas/DirectoryGroupSchema"
                    },
                    "membershipSchema": {
                        "$ref": "#/components/schemas/DirectoryMembershipSchema"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultUserDirectoryDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/UserDirectoryDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultUserCurrentDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/UserCurrentDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "UserCurrentDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "username": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "itc": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "mobile": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "landline": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "gender": {
                        "type": "string",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "UNKNOWN"
                        ]
                    },
                    "address": {
                        "type": "string"
                    },
                    "sysAdmin": {
                        "type": "boolean"
                    },
                    "deptHead": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "PLATFORM_SIGNUP",
                            "INVITATION_CODE_SIGNUP",
                            "BACKGROUND_SIGNUP",
                            "BACKGROUND_ADDED",
                            "THIRD_PARTY_LOGIN",
                            "LDAP_SYNCHRONIZE"
                        ]
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "lockStartDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lockEndDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "passwordStrength": {
                        "type": "string",
                        "enum": [
                            "UNKNOWN",
                            "WEAK",
                            "MEDIUM",
                            "STRONG"
                        ]
                    },
                    "passwordExpired": {
                        "type": "boolean"
                    },
                    "passwordExpiredDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tenantRealNameStatus": {
                        "type": "string",
                        "enum": [
                            "NOT_SUBMITTED",
                            "AUDITING",
                            "AUDITED",
                            "FAILED_AUDIT"
                        ]
                    },
                    "online": {
                        "type": "boolean"
                    },
                    "onlineDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "offlineDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "preference": {
                        "$ref": "#/components/schemas/UserPreferenceVo"
                    }
                }
            },
            "UserPreferenceVo": {
                "type": "object",
                "properties": {
                    "themeCode": {
                        "type": "string",
                        "description": "The code of subject set by user.",
                        "example": "gray"
                    },
                    "language": {
                        "type": "string",
                        "description": "Language set by user.",
                        "enum": [
                            "en",
                            "zh_CN"
                        ],
                        "example": "zh_CN"
                    },
                    "defaultTimeZone": {
                        "type": "string",
                        "description": "Default system time zone.",
                        "example": "Asia/Shanghai"
                    }
                }
            },
            "ApiLocaleResultTenantDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/TenantDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "TenantDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "no": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PERSONAL",
                            "ENTERPRISE",
                            "GOVERNMENT",
                            "UNKNOWN"
                        ]
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "PLATFORM_SIGNUP",
                            "BACKGROUND_SIGNUP",
                            "THIRD_PARTY_LOGIN"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "DISABLED",
                            "CANCELLING",
                            "CANCELED",
                            "ENABLED"
                        ]
                    },
                    "realNameStatus": {
                        "type": "string",
                        "enum": [
                            "NOT_SUBMITTED",
                            "AUDITING",
                            "AUDITED",
                            "FAILED_AUDIT"
                        ]
                    },
                    "address": {
                        "type": "string"
                    },
                    "userCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "lastLockDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lockStartDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lockEndDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "remark": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultCheckSecretVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/CheckSecretVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "CheckSecretVo": {
                "type": "object",
                "properties": {
                    "linkSecret": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultPageResultTOUserVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultTOUserVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultTOUserVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/TOUserVo"
                        }
                    }
                }
            },
            "TOUserVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultTOUserDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/TOUserDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "TOUserDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "toRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TOUserRoleVo"
                        }
                    }
                }
            },
            "TOUserRoleVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultPageResultTORoleVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultTORoleVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultTORoleVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/TORoleVo"
                        }
                    }
                }
            },
            "TORoleVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultTORoleDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/TORoleDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "TORoleDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "toUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TORoleUserVo"
                        }
                    }
                }
            },
            "TORoleUserVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "username": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "mobile": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultPageResultTenantVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultTenantVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultTenantVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/TenantVo"
                        }
                    }
                }
            },
            "TenantVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "no": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PERSONAL",
                            "ENTERPRISE",
                            "GOVERNMENT",
                            "UNKNOWN"
                        ]
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "PLATFORM_SIGNUP",
                            "BACKGROUND_SIGNUP",
                            "THIRD_PARTY_LOGIN"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "DISABLED",
                            "CANCELLING",
                            "CANCELED",
                            "ENABLED"
                        ]
                    },
                    "realNameStatus": {
                        "type": "string",
                        "enum": [
                            "NOT_SUBMITTED",
                            "AUDITING",
                            "AUDITED",
                            "FAILED_AUDIT"
                        ]
                    },
                    "address": {
                        "type": "string"
                    },
                    "userCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "lastLockDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lockStartDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lockEndDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "remark": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "SignCancelSmsConfirmDto": {
                "type": "object",
                "properties": {
                    "verificationCode": {
                        "type": "string",
                        "description": "Sms verification code.",
                        "example": 778717,
                        "minLength": 1
                    }
                },
                "required": [
                    "verificationCode"
                ]
            },
            "ApiLocaleResultTenantAuditDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/TenantAuditDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AuditRecordTo": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string"
                    },
                    "auditDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "auditUserId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "auditUserName": {
                        "type": "string"
                    }
                }
            },
            "TenantAuditDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "NOT_SUBMITTED",
                            "AUDITING",
                            "AUDITED",
                            "FAILED_AUDIT"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PERSONAL",
                            "ENTERPRISE",
                            "GOVERNMENT",
                            "UNKNOWN"
                        ]
                    },
                    "personalCert": {
                        "$ref": "#/components/schemas/PersonalCert"
                    },
                    "enterpriseCert": {
                        "$ref": "#/components/schemas/EnterpriseCert"
                    },
                    "enterpriseLegalPersonCert": {
                        "$ref": "#/components/schemas/EnterpriseLegalPersonCert"
                    },
                    "governmentCert": {
                        "$ref": "#/components/schemas/GovernmentCert"
                    },
                    "autoAudit": {
                        "type": "boolean"
                    },
                    "auditRecord": {
                        "$ref": "#/components/schemas/AuditRecordTo"
                    }
                }
            },
            "ApiLocaleResultListString": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "type": "string"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultString": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "string",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultListSystemTokenInfoVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/SystemTokenInfoVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "SystemTokenInfoVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "expiredDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "authType": {
                        "type": "string",
                        "enum": [
                            "API",
                            "ACL"
                        ]
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultSystemTokenDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/SystemTokenDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AuthorizedResourceApiVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "AuthorizedResourceVo": {
                "type": "object",
                "properties": {
                    "resource": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthorizedResourceApiVo"
                        }
                    },
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "ALL",
                                "ONLY_READ",
                                "ONLY_WRITE",
                                "READ_WRITE",
                                "DELETE"
                            ]
                        }
                    }
                }
            },
            "AuthorizedServiceResourceVo": {
                "type": "object",
                "properties": {
                    "serviceCode": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthorizedResourceVo"
                        }
                    }
                }
            },
            "SystemTokenDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "expiredDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "authType": {
                        "type": "string",
                        "enum": [
                            "API",
                            "ACL"
                        ]
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthorizedServiceResourceVo"
                        }
                    }
                }
            },
            "SmsFindDto": {
                "type": "object",
                "properties": {
                    "infoScope": {
                        "type": "string",
                        "description": "Query information scope",
                        "enum": [
                            "BASIC",
                            "DETAIL"
                        ]
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Sort field"
                    },
                    "orderSort": {
                        "type": "string",
                        "description": "Sorting method",
                        "enum": [
                            "ASC",
                            "DESC"
                        ]
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchCriteria"
                        },
                        "maxItems": 20,
                        "minItems": 0
                    },
                    "pageNo": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 1, maximum 100000",
                        "maximum": 100000,
                        "minimum": 1
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 10, maximum 2000",
                        "maximum": 2000,
                        "minimum": 1
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "templateCode": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string"
                    },
                    "bizKey": {
                        "type": "string",
                        "enum": [
                            "SIGNUP",
                            "SIGNIN",
                            "PASSWORD_FORGET",
                            "PASSWORD_UPDATE",
                            "SIGN_CANCEL",
                            "MODIFY_MOBILE",
                            "BIND_MOBILE",
                            "PAY_PASSWORD_UPDATE",
                            "REALNAME_AUTH_SUBMIT",
                            "REALNAME_AUTH_PASSED",
                            "REALNAME_AUDIT_FAILURE",
                            "SYS_EXCEPTION_NOTICE",
                            "SYS_RECOVERY_NOTICE",
                            "SYS_SECURITY_NOTICE",
                            "LICENSE_SENT",
                            "CHANNEL_TEST",
                            "TODO_REALNAME_AUTH",
                            "TODO_BUSINESS_CONSULTATION",
                            "TODO_OFFLINE_SERVICE",
                            "TODO_WORKORDER",
                            "TODO_TRANSFER_CONFIRM",
                            "TODO_INVOICE_CONFIRM",
                            "TODO_WITHDRAW_CONFIRM",
                            "RECHARGE_SUCCESS",
                            "WITHDRAW_SUCCESS",
                            "ORDER_PAY_SUCCESS",
                            "ORDER_PAY_PENDING",
                            "ORDER_PAY_TIMEOUT",
                            "ORDER_TO_EXPIRE",
                            "ORDER_CHANGE_SUCCESS",
                            "WORKORDER_REPLY_REMINDER",
                            "TESTING_EXEC_STARTED",
                            "TESTING_EXEC_FINISHED",
                            "TESTING_EXEC_FAILED",
                            "TESTING_TASK_OVERDUE",
                            "INDICATOR_MODIFY_SUBMIT",
                            "INDICATOR_AUDIT_PASSED",
                            "INDICATOR_AUDIT_FAILED",
                            "EVENT_NOTICE"
                        ]
                    },
                    "verificationCode": {
                        "type": "boolean"
                    },
                    "batch": {
                        "type": "boolean"
                    },
                    "sendTenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sendUserId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "urgent": {
                        "type": "boolean"
                    },
                    "sendStatus": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "SUCCESS",
                            "FAILURE"
                        ]
                    },
                    "outId": {
                        "type": "string"
                    },
                    "actualSendDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "expectedSendDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultPageResultSmsDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultSmsDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultSmsDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/SmsDetailVo"
                        }
                    }
                }
            },
            "SmsDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "templateCode": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string",
                        "enum": [
                            "en",
                            "zh_CN"
                        ]
                    },
                    "bizKey": {
                        "type": "string",
                        "enum": [
                            "SIGNUP",
                            "SIGNIN",
                            "PASSWORD_FORGET",
                            "PASSWORD_UPDATE",
                            "SIGN_CANCEL",
                            "MODIFY_MOBILE",
                            "BIND_MOBILE",
                            "PAY_PASSWORD_UPDATE",
                            "REALNAME_AUTH_SUBMIT",
                            "REALNAME_AUTH_PASSED",
                            "REALNAME_AUDIT_FAILURE",
                            "SYS_EXCEPTION_NOTICE",
                            "SYS_RECOVERY_NOTICE",
                            "SYS_SECURITY_NOTICE",
                            "LICENSE_SENT",
                            "CHANNEL_TEST",
                            "TODO_REALNAME_AUTH",
                            "TODO_BUSINESS_CONSULTATION",
                            "TODO_OFFLINE_SERVICE",
                            "TODO_WORKORDER",
                            "TODO_TRANSFER_CONFIRM",
                            "TODO_INVOICE_CONFIRM",
                            "TODO_WITHDRAW_CONFIRM",
                            "RECHARGE_SUCCESS",
                            "WITHDRAW_SUCCESS",
                            "ORDER_PAY_SUCCESS",
                            "ORDER_PAY_PENDING",
                            "ORDER_PAY_TIMEOUT",
                            "ORDER_TO_EXPIRE",
                            "ORDER_CHANGE_SUCCESS",
                            "WORKORDER_REPLY_REMINDER",
                            "TESTING_EXEC_STARTED",
                            "TESTING_EXEC_FINISHED",
                            "TESTING_EXEC_FAILED",
                            "TESTING_TASK_OVERDUE",
                            "INDICATOR_MODIFY_SUBMIT",
                            "INDICATOR_AUDIT_PASSED",
                            "INDICATOR_AUDIT_FAILED",
                            "EVENT_NOTICE"
                        ]
                    },
                    "outId": {
                        "type": "string"
                    },
                    "thirdOutputParam": {
                        "type": "string"
                    },
                    "inputParam": {
                        "$ref": "#/components/schemas/SmsInputParamVo"
                    },
                    "verificationCode": {
                        "type": "boolean"
                    },
                    "batch": {
                        "type": "boolean"
                    },
                    "sendTenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sendUserId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "urgent": {
                        "type": "boolean"
                    },
                    "sendStatus": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "SUCCESS",
                            "FAILURE"
                        ]
                    },
                    "actualSendDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "expectedSendDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "SmsInputParamVo": {
                "type": "object",
                "properties": {
                    "mobiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "serviceCode": {
                        "type": "string"
                    },
                    "bizKey": {
                        "type": "string",
                        "enum": [
                            "SIGNUP",
                            "SIGNIN",
                            "PASSWORD_FORGET",
                            "PASSWORD_UPDATE",
                            "SIGN_CANCEL",
                            "MODIFY_MOBILE",
                            "BIND_MOBILE",
                            "PAY_PASSWORD_UPDATE",
                            "REALNAME_AUTH_SUBMIT",
                            "REALNAME_AUTH_PASSED",
                            "REALNAME_AUDIT_FAILURE",
                            "SYS_EXCEPTION_NOTICE",
                            "SYS_RECOVERY_NOTICE",
                            "SYS_SECURITY_NOTICE",
                            "LICENSE_SENT",
                            "CHANNEL_TEST",
                            "TODO_REALNAME_AUTH",
                            "TODO_BUSINESS_CONSULTATION",
                            "TODO_OFFLINE_SERVICE",
                            "TODO_WORKORDER",
                            "TODO_TRANSFER_CONFIRM",
                            "TODO_INVOICE_CONFIRM",
                            "TODO_WITHDRAW_CONFIRM",
                            "RECHARGE_SUCCESS",
                            "WITHDRAW_SUCCESS",
                            "ORDER_PAY_SUCCESS",
                            "ORDER_PAY_PENDING",
                            "ORDER_PAY_TIMEOUT",
                            "ORDER_TO_EXPIRE",
                            "ORDER_CHANGE_SUCCESS",
                            "WORKORDER_REPLY_REMINDER",
                            "TESTING_EXEC_STARTED",
                            "TESTING_EXEC_FINISHED",
                            "TESTING_EXEC_FAILED",
                            "TESTING_TASK_OVERDUE",
                            "INDICATOR_MODIFY_SUBMIT",
                            "INDICATOR_AUDIT_PASSED",
                            "INDICATOR_AUDIT_FAILED",
                            "EVENT_NOTICE"
                        ]
                    },
                    "expire": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "templateParams": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "ApiLocaleResultSmsDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/SmsDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPageResultSmsTemplateDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultSmsTemplateDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultSmsTemplateDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/SmsTemplateDetailVo"
                        }
                    }
                }
            },
            "SmsTemplateDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "channelId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "signature": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "thirdCode": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string",
                        "enum": [
                            "en",
                            "zh_CN"
                        ]
                    },
                    "verificationCode": {
                        "type": "boolean"
                    },
                    "verificationCodeValidSecond": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ApiLocaleResultSmsTemplateDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/SmsTemplateDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPageResultSmsChannelVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultSmsChannelVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultSmsChannelVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/SmsChannelVo"
                        }
                    }
                }
            },
            "SmsChannelVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "logo": {
                        "type": "string"
                    },
                    "accessKeySecret": {
                        "type": "string"
                    },
                    "accessKeyId": {
                        "type": "string"
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "thirdChannelNo": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultSmsChannelVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/SmsChannelVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultSettingValueVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/SettingValueVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "LocaleTo": {
                "type": "object",
                "properties": {
                    "defaultLanguage": {
                        "type": "string",
                        "default": "zh_CN",
                        "description": "Default language.",
                        "enum": [
                            "en",
                            "zh_CN"
                        ],
                        "example": "zh_CN"
                    },
                    "defaultTimeZone": {
                        "type": "string",
                        "description": "The time zone is not allowed to be modified and Load by configuration",
                        "example": "Asia/Shanghai"
                    }
                },
                "required": [
                    "defaultLanguage"
                ]
            },
            "QuotaTo": {
                "type": "object",
                "properties": {
                    "appCode": {
                        "type": "string"
                    },
                    "serviceCode": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "enum": [
                            "User",
                            "UserDept",
                            "UserGroup",
                            "Dept",
                            "DeptLevel",
                            "DeptUser",
                            "Group",
                            "GroupUser",
                            "OrgTag",
                            "OrgTargetTag",
                            "PolicyCustom",
                            "SystemToken",
                            "UserToken",
                            "FileStore",
                            "DataSpace",
                            "AngusTesterProject",
                            "AngusTesterServices",
                            "AngusTesterApis",
                            "AngusTesterServicesApis",
                            "AngusTesterVariable",
                            "AngusTesterTargetVariable",
                            "AngusTesterDataset",
                            "AngusTesterTargetDataset",
                            "AngusTesterScenario",
                            "AngusTesterScenarioApis",
                            "AngusTesterMockService",
                            "AngusTesterMockServiceApis",
                            "AngusTesterMockApisResponse",
                            "AngusTesterMockIterations",
                            "AngusTesterMockDatasource",
                            "AngusTesterNode",
                            "AngusTesterConcurrency",
                            "AngusTesterConcurrentTask",
                            "AngusTesterScript",
                            "AngusTesterExecution",
                            "AngusTesterExecutionDebug",
                            "AngusTesterReport",
                            "AngusTesterSprint",
                            "AngusTesterTask",
                            "AngusTesterSprintTask",
                            "AngusTesterFuncPlan",
                            "AngusTesterFuncCase",
                            "AngusTesterFuncPlanCase",
                            "AngusTesterTag",
                            "AngusTesterModule"
                        ]
                    },
                    "allowChange": {
                        "type": "boolean"
                    },
                    "licenseCtrl": {
                        "type": "boolean"
                    },
                    "quota": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "min": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "max": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "SettingValueVo": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "enum": [
                            "LOCALE",
                            "SECURITY",
                            "SOCIAL",
                            "QUOTA",
                            "FUNC_INDICATOR",
                            "PREF_INDICATOR",
                            "STABILITY_INDICATOR",
                            "OPERATION_LOG_CONFIG",
                            "API_LOG_CONFIG",
                            "SYSTEM_LOG_CONFIG",
                            "MAX_RESOURCE_ACTIVITIES",
                            "MAX_METRICS_DAYS",
                            "TESTER_EVENT",
                            "AI_AGENT"
                        ]
                    },
                    "globalDefault": {
                        "type": "boolean"
                    },
                    "locale": {
                        "$ref": "#/components/schemas/LocaleTo"
                    },
                    "security": {
                        "$ref": "#/components/schemas/SecurityTo"
                    },
                    "social": {
                        "$ref": "#/components/schemas/SocialTo"
                    },
                    "quota": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QuotaTo"
                        }
                    },
                    "func": {
                        "$ref": "#/components/schemas/FuncTo"
                    },
                    "perf": {
                        "$ref": "#/components/schemas/PerfTo"
                    },
                    "stability": {
                        "$ref": "#/components/schemas/StabilityTo"
                    },
                    "testerEvent": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TesterEvent"
                        }
                    },
                    "aiAgent": {
                        "$ref": "#/components/schemas/AIAgent"
                    },
                    "healthCheck": {
                        "$ref": "#/components/schemas/TenantHealthCheckVo"
                    },
                    "apiLog": {
                        "$ref": "#/components/schemas/ApiLogProperties"
                    },
                    "operationLog": {
                        "$ref": "#/components/schemas/OperationLogProperties"
                    },
                    "systemLog": {
                        "$ref": "#/components/schemas/SystemLogProperties"
                    },
                    "maxResourceActivities": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxMetricsDays": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "TenantHealthCheckVo": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable health check flag.",
                        "example": true
                    },
                    "alarmWay": {
                        "type": "array",
                        "description": "Alarm way when abnormal.",
                        "items": {
                            "type": "string",
                            "enum": [
                                "EMAIL",
                                "SMS"
                            ]
                        }
                    },
                    "receiveUser": {
                        "type": "array",
                        "description": "Abnormal alarm recipient.",
                        "items": {
                            "$ref": "#/components/schemas/UserName"
                        }
                    },
                    "healthCheckDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Last health check date."
                    }
                }
            },
            "ApiLocaleResultUserSocialBindingVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/UserSocialBindingVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "UserSocialBindingVo": {
                "type": "object",
                "properties": {
                    "wechatUserId": {
                        "type": "string"
                    },
                    "wechatUserBindDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "githubUserId": {
                        "type": "string"
                    },
                    "githubUserBindDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "googleUserId": {
                        "type": "string"
                    },
                    "googleUserBindDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultUserPreferenceVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/UserPreferenceVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultUserApiProxyVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/UserApiProxyVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiProxy": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Enable apis proxy name",
                        "enum": [
                            "NO_PROXY",
                            "CLIENT_PROXY",
                            "SERVER_PROXY",
                            "CLOUD_PROXY"
                        ]
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not the agent is enabled"
                    },
                    "url": {
                        "type": "string",
                        "description": "User client proxy access address url",
                        "example": "ws://localhost:6806"
                    }
                }
            },
            "UserApiProxyVo": {
                "type": "object",
                "properties": {
                    "noProxy": {
                        "$ref": "#/components/schemas/ApiProxy",
                        "description": "Configuration without proxy."
                    },
                    "clientProxy": {
                        "$ref": "#/components/schemas/ApiProxy",
                        "description": "Configuration of client proxy."
                    },
                    "serverProxy": {
                        "$ref": "#/components/schemas/ApiProxy",
                        "description": "Configuration of server proxy."
                    },
                    "cloudProxy": {
                        "$ref": "#/components/schemas/ApiProxy",
                        "description": "Configuration of cloud proxy."
                    }
                }
            },
            "ApiLocaleResultListTesterEvent": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/TesterEvent"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultSecurityTo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/SecurityTo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPageResultTenantQuotaDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultTenantQuotaDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultTenantQuotaDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/TenantQuotaDetailVo"
                        }
                    }
                }
            },
            "TenantQuotaDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appCode": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "enum": [
                            "User",
                            "UserDept",
                            "UserGroup",
                            "Dept",
                            "DeptLevel",
                            "DeptUser",
                            "Group",
                            "GroupUser",
                            "OrgTag",
                            "OrgTargetTag",
                            "PolicyCustom",
                            "SystemToken",
                            "UserToken",
                            "FileStore",
                            "DataSpace",
                            "AngusTesterProject",
                            "AngusTesterServices",
                            "AngusTesterApis",
                            "AngusTesterServicesApis",
                            "AngusTesterVariable",
                            "AngusTesterTargetVariable",
                            "AngusTesterDataset",
                            "AngusTesterTargetDataset",
                            "AngusTesterScenario",
                            "AngusTesterScenarioApis",
                            "AngusTesterMockService",
                            "AngusTesterMockServiceApis",
                            "AngusTesterMockApisResponse",
                            "AngusTesterMockIterations",
                            "AngusTesterMockDatasource",
                            "AngusTesterNode",
                            "AngusTesterConcurrency",
                            "AngusTesterConcurrentTask",
                            "AngusTesterScript",
                            "AngusTesterExecution",
                            "AngusTesterExecutionDebug",
                            "AngusTesterReport",
                            "AngusTesterSprint",
                            "AngusTesterTask",
                            "AngusTesterSprintTask",
                            "AngusTesterFuncPlan",
                            "AngusTesterFuncCase",
                            "AngusTesterFuncPlanCase",
                            "AngusTesterTag",
                            "AngusTesterModule"
                        ]
                    },
                    "allowChange": {
                        "type": "boolean"
                    },
                    "calcRemaining": {
                        "type": "boolean"
                    },
                    "quota": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Tenant quota value"
                    },
                    "default0": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "min": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "max": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultTenantQuotaDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/TenantQuotaDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultLocaleTo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/LocaleTo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultStabilityTo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/StabilityTo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPerfTo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PerfTo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultFuncTo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/FuncTo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultTenantServerApiProxyTo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/TenantServerApiProxyTo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPageResultServiceVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultServiceVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultServiceVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/ServiceVo"
                        }
                    }
                }
            },
            "ServiceVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "healthUrl": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "BACK_ADD",
                            "EUREKA"
                        ]
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "apiNum": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultServiceVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/ServiceVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultListServiceApiVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/ServiceApiVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ServiceApiVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string",
                        "enum": [
                            "GET",
                            "HEAD",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "TRACE"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "API",
                            "OPEN_API",
                            "OPEN_API_2P",
                            "DOOR_API",
                            "PUB_API",
                            "VIEW",
                            "PUB_VIEW"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "resourceName": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                }
            },
            "ApiLocaleResultListServiceResourceVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/ServiceResourceVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ResourceVo": {
                "type": "object",
                "properties": {
                    "resourceName": {
                        "type": "string"
                    },
                    "resourceDescription": {
                        "type": "string"
                    }
                }
            },
            "ServiceResourceVo": {
                "type": "object",
                "properties": {
                    "serviceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "serviceCode": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "serviceDescription": {
                        "type": "string"
                    },
                    "serviceEnabled": {
                        "type": "boolean"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResourceVo"
                        }
                    }
                }
            },
            "ApiBaseVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultListResourceApiVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/ResourceApiVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ResourceApiVo": {
                "type": "object",
                "properties": {
                    "resourceName": {
                        "type": "string"
                    },
                    "resourceDescription": {
                        "type": "string"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiBaseVo"
                        }
                    }
                }
            },
            "ApiInfoVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "resourceName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "resourceDescription": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultAppDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/AppDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "showName": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "CLOUD_APP",
                            "BASE_APP",
                            "OP_APP"
                        ]
                    },
                    "editionType": {
                        "type": "string",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiInfoVo"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AppTagVo"
                        }
                    },
                    "version": {
                        "type": "string"
                    },
                    "openStage": {
                        "type": "string",
                        "enum": [
                            "SIGNUP",
                            "AUTH_PASSED",
                            "OPEN_SUCCESS"
                        ]
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "clientName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "AppTagVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultListOrgAppAuthVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/OrgAppAuthVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppTagInfoVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "AuthOrgPolicyP": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "policyId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "orgId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "default0": {
                        "type": "boolean"
                    },
                    "orgType": {
                        "type": "string",
                        "enum": [
                            "TENANT",
                            "USER",
                            "DEPT",
                            "GROUP"
                        ]
                    }
                }
            },
            "AuthPolicyOrgVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Policy id"
                    },
                    "name": {
                        "type": "string",
                        "description": "Policy name"
                    },
                    "code": {
                        "type": "string",
                        "description": "Policy code"
                    },
                    "description": {
                        "type": "string",
                        "description": "Policy description"
                    },
                    "authOrgs": {
                        "type": "array",
                        "description": "Authorization policy source",
                        "items": {
                            "$ref": "#/components/schemas/AuthOrgPolicyP"
                        }
                    }
                }
            },
            "OrgAppAuthVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "editionType": {
                        "type": "string",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "showName": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "CLOUD_APP",
                            "BASE_APP",
                            "OP_APP"
                        ]
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "string"
                    },
                    "openStage": {
                        "type": "string",
                        "enum": [
                            "SIGNUP",
                            "AUTH_PASSED",
                            "OPEN_SUCCESS"
                        ]
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthPolicyOrgVo"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AppTagInfoVo"
                        }
                    }
                }
            },
            "ApiLocaleResultBoolean": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "boolean",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPageResultOrgTagDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultOrgTagDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "OrgTagDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultOrgTagDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/OrgTagDetailVo"
                        }
                    }
                }
            },
            "ApiLocaleResultOrgTagDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/OrgTagDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPageResultOrgTagTargetDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultOrgTagTargetDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "OrgTagTargetDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "USER",
                            "DEPT",
                            "GROUP"
                        ]
                    },
                    "targetId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "targetName": {
                        "type": "string"
                    },
                    "tagId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tagName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "targetCreatedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "targetCreatedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "targetCreatedByName": {
                        "type": "string"
                    }
                }
            },
            "PageResultOrgTagTargetDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/OrgTagTargetDetailVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultNoticeVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultNoticeVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "NoticeVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "content": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string",
                        "enum": [
                            "GLOBAL",
                            "APP"
                        ]
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appCode": {
                        "type": "string"
                    },
                    "appName": {
                        "type": "string"
                    },
                    "editionType": {
                        "type": "string",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "sendType": {
                        "type": "string",
                        "enum": [
                            "SEND_NOW",
                            "TIMING_SEND"
                        ]
                    },
                    "timingDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "expirationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultNoticeVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/NoticeVo"
                        }
                    }
                }
            },
            "ApiLocaleResultNoticeVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/NoticeVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultNoticeLatestVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/NoticeLatestVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "NoticeLatestVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "content": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string",
                        "enum": [
                            "GLOBAL",
                            "APP"
                        ]
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appCode": {
                        "type": "string"
                    },
                    "appName": {
                        "type": "string"
                    },
                    "editionType": {
                        "type": "string",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "sendType": {
                        "type": "string",
                        "enum": [
                            "SEND_NOW",
                            "TIMING_SEND"
                        ]
                    },
                    "timingDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "expirationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultPageResultMessageVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultMessageVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "MessageVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "title": {
                        "type": "string"
                    },
                    "receiveType": {
                        "type": "string",
                        "enum": [
                            "SITE",
                            "EMAIL"
                        ]
                    },
                    "sentType": {
                        "type": "string",
                        "enum": [
                            "SEND_NOW",
                            "TIMING_SEND"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "FAILURE",
                            "SENT"
                        ]
                    },
                    "failureReason": {
                        "type": "string"
                    },
                    "sentNum": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "readNum": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "timingDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "POLICY",
                            "TO_POLICY",
                            "ALL"
                        ]
                    },
                    "receiveTenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "receiveTenantName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    }
                }
            },
            "PageResultMessageVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/MessageVo"
                        }
                    }
                }
            },
            "ApiLocaleResultMessageDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/MessageDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "MessageDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "title": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "receiveType": {
                        "type": "string",
                        "enum": [
                            "SITE",
                            "EMAIL"
                        ]
                    },
                    "sentType": {
                        "type": "string",
                        "enum": [
                            "SEND_NOW",
                            "TIMING_SEND"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "FAILURE",
                            "SENT"
                        ]
                    },
                    "failureReason": {
                        "type": "string"
                    },
                    "sentNum": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "readNum": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "timingDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "POLICY",
                            "TO_POLICY",
                            "ALL"
                        ]
                    },
                    "receiveObjects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiveObject"
                        }
                    },
                    "receiveTenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "receiveTenantName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultMessageCurrentDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/MessageCurrentDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "MessageCurrentDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "messageId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "title": {
                        "type": "string"
                    },
                    "read": {
                        "type": "boolean"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "sendDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "content": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultListMessageStatusCountVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/MessageStatusCountVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "MessageStatusCountVo": {
                "type": "object",
                "properties": {
                    "tab": {
                        "type": "string",
                        "enum": [
                            "READ",
                            "UNREAD",
                            "ALL"
                        ]
                    },
                    "read": {
                        "type": "boolean"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "MessageCurrentFindDto": {
                "type": "object",
                "properties": {
                    "infoScope": {
                        "type": "string",
                        "description": "Query information scope",
                        "enum": [
                            "BASIC",
                            "DETAIL"
                        ]
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Sort field"
                    },
                    "orderSort": {
                        "type": "string",
                        "description": "Sorting method",
                        "enum": [
                            "ASC",
                            "DESC"
                        ]
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchCriteria"
                        },
                        "maxItems": 20,
                        "minItems": 0
                    },
                    "pageNo": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 1, maximum 100000",
                        "maximum": 100000,
                        "minimum": 1
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 10, maximum 2000",
                        "maximum": 2000,
                        "minimum": 1
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "read": {
                        "type": "boolean"
                    },
                    "messageId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "delete": {
                        "type": "boolean"
                    },
                    "createDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultPageResultMessageCurrentVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultMessageCurrentVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "MessageCurrentVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "messageId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "title": {
                        "type": "string"
                    },
                    "read": {
                        "type": "boolean"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "sendDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultMessageCurrentVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/MessageCurrentVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultMessageCenterOnlineVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultMessageCenterOnlineVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "MessageCenterOnlineVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "userAgent": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "remoteAddress": {
                        "type": "string"
                    },
                    "online": {
                        "type": "boolean"
                    },
                    "onlineDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "offlineDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultMessageCenterOnlineVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/MessageCenterOnlineVo"
                        }
                    }
                }
            },
            "ApiLocaleResultMessageCenterOnlineVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/MessageCenterOnlineVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPageResultOperationLogVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultOperationLogVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "OperationLogVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "requestId": {
                        "type": "string"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "resource": {
                        "type": "string",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "USER_DIRECTORY",
                            "USER_TOKEN",
                            "ORG_TAG",
                            "AUTH_CLIENT",
                            "AUTH_USER",
                            "SERVICE",
                            "API",
                            "APP",
                            "APP_FUNC",
                            "WEB_TAG",
                            "POLICY",
                            "POLICY_APP",
                            "POLICY_FUNC",
                            "POLICY_TENANT",
                            "POLICY_DEPT",
                            "POLICY_GROUP",
                            "POLICY_USER",
                            "EVENT",
                            "EVENT_CHANNEL",
                            "EVENT_TEMPLATE",
                            "EMAIL",
                            "EMAIL_SERVER",
                            "EMAIL_TEMPLATE",
                            "SMS",
                            "SMS_CHANNEL",
                            "SMS_TEMPLATE",
                            "TO_ROLE",
                            "TO_USER",
                            "MESSAGE",
                            "NOTICE",
                            "SETTING",
                            "SETTING_USER",
                            "SETTING_TENANT",
                            "SETTING_TENANT_QUOTA",
                            "SYSTEM_TOKEN",
                            "OTHER"
                        ]
                    },
                    "resourceName": {
                        "type": "string"
                    },
                    "resourceId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "UPDATED",
                            "ENABLED",
                            "DISABLED",
                            "LOCKED",
                            "UNLOCKED",
                            "DELETED",
                            "SYNC",
                            "CUSTOM",
                            "SIGN_UP",
                            "SIGN_IN_SUCCESS",
                            "SIGN_IN_FAIL",
                            "SIGN_OUT",
                            "UPDATE_PASSWORD",
                            "ADD_USER_DEPT",
                            "ADD_DEPT_USER",
                            "ADD_USER_GROUP",
                            "ADD_GROUP_USER",
                            "UPDATE_USER_DEPT",
                            "UPDATE_DEPT_USER",
                            "UPDATE_USER_GROUP",
                            "UPDATE_GROUP_USER",
                            "DELETE_USER_DEPT",
                            "DELETE_DEPT_USER",
                            "DELETE_USER_GROUP",
                            "DELETE_GROUP_USER",
                            "SET_USER_MAIN_DEPT",
                            "CANCEL_USER_MAIN_DEPT",
                            "SET_SYS_ADMIN",
                            "CANCEL_SYS_ADMIN",
                            "TENANT_CANCEL",
                            "SUBMIT_TENANT_AUDIT",
                            "TENANT_AUDIT",
                            "ADD_USER_POLICY",
                            "ADD_POLICY_USER",
                            "DELETE_USER_POLICY",
                            "DELETE_POLICY_USER",
                            "ADD_DEPT_POLICY",
                            "ADD_POLICY_DEPT",
                            "DELETE_DEPT_POLICY",
                            "DELETE_POLICY_DEPT",
                            "ADD_GROUP_POLICY",
                            "ADD_POLICY_GROUP",
                            "DELETE_GROUP_POLICY",
                            "DELETE_POLICY_GROUP",
                            "SET_DEFAULT_APP_POLICY",
                            "DELETE_DEFAULT_APP_POLICY",
                            "ADD_POLICY_FUNC",
                            "UPDATE_POLICY_FUNC",
                            "DELETE_POLICY_FUNC",
                            "TARGET_TAG_UPDATED",
                            "TARGET_TAG_DELETED",
                            "APP_OPEN",
                            "APP_OPEN_RENEW",
                            "APP_OPEN_CANCEL"
                        ]
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "optDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "description": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "private0": {
                        "type": "boolean"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    }
                }
            },
            "PageResultOperationLogVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/OperationLogVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultApiLogInfoVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultApiLogInfoVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLogInfoVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "clientSource": {
                        "type": "string"
                    },
                    "remote": {
                        "type": "string"
                    },
                    "apiType": {
                        "type": "string",
                        "enum": [
                            "API",
                            "OPEN_API",
                            "OPEN_API_2P",
                            "DOOR_API",
                            "PUB_API",
                            "VIEW",
                            "PUB_VIEW"
                        ]
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "requestId": {
                        "type": "string"
                    },
                    "serviceCode": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "apiCode": {
                        "type": "string"
                    },
                    "apiName": {
                        "type": "string"
                    },
                    "resourceName": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "requestDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "success": {
                        "type": "boolean"
                    },
                    "elapsedMillis": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultApiLogInfoVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/ApiLogInfoVo"
                        }
                    }
                }
            },
            "ApiLocaleResultApiLogDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/ApiLogDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLogDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "clientSource": {
                        "type": "string"
                    },
                    "remote": {
                        "type": "string"
                    },
                    "apiType": {
                        "type": "string",
                        "enum": [
                            "API",
                            "OPEN_API",
                            "OPEN_API_2P",
                            "DOOR_API",
                            "PUB_API",
                            "VIEW",
                            "PUB_VIEW"
                        ]
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "requestId": {
                        "type": "string"
                    },
                    "serviceCode": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "apiCode": {
                        "type": "string"
                    },
                    "apiName": {
                        "type": "string"
                    },
                    "resourceName": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "requestDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "queryParam": {
                        "type": "string"
                    },
                    "requestHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "properties": {
                            "empty": {
                                "type": "boolean"
                            },
                            "all": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "writeOnly": true
                            }
                        }
                    },
                    "requestBody": {
                        "type": "string"
                    },
                    "responseDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "responseSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "responseHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "properties": {
                            "empty": {
                                "type": "boolean"
                            },
                            "all": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "writeOnly": true
                            }
                        }
                    },
                    "requestSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "responseBody": {
                        "type": "string"
                    },
                    "success": {
                        "type": "boolean"
                    },
                    "elapsedMillis": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultPageResultGroupListVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultGroupListVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "GroupListVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "BACKGROUND_ADDED",
                            "LDAP_SYNCHRONIZE"
                        ]
                    },
                    "userNum": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "remark": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultGroupListVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/GroupListVo"
                        }
                    }
                }
            },
            "ApiLocaleResultGroupDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/GroupDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "GroupDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "BACKGROUND_ADDED",
                            "LDAP_SYNCHRONIZE"
                        ]
                    },
                    "userNum": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "remark": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IdAndName"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultEventVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultEventVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "EventVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "BUSINESS",
                            "SECURITY",
                            "QUOTA",
                            "SYSTEM",
                            "OPERATION",
                            "PROTOCOL",
                            "API",
                            "NOTICE",
                            "OTHER"
                        ]
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "targetId": {
                        "type": "string"
                    },
                    "targetType": {
                        "type": "string"
                    },
                    "targetName": {
                        "type": "string"
                    },
                    "appCode": {
                        "type": "string"
                    },
                    "serviceCode": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "eventViewUrl": {
                        "type": "string"
                    },
                    "pushStatus": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "PUSHING",
                            "PUSH_SUCCESS",
                            "PUSH_FAIL",
                            "IGNORED"
                        ]
                    },
                    "pushMsg": {
                        "type": "string"
                    },
                    "ekey": {
                        "type": "string"
                    }
                }
            },
            "PageResultEventVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/EventVo"
                        }
                    }
                }
            },
            "ApiLocaleResultEventDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/EventDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "EventContent": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "subject": {
                        "type": "string"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "appCode": {
                        "type": "string"
                    },
                    "serviceCode": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "requestId": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "level": {
                        "type": "string",
                        "enum": [
                            "IGNORABLE",
                            "WARNING",
                            "ERROR",
                            "URGENT",
                            "DEADLY"
                        ]
                    },
                    "cause": {
                        "type": "string"
                    },
                    "targetType": {
                        "type": "string"
                    },
                    "targetId": {
                        "type": "string"
                    },
                    "targetName": {
                        "type": "string"
                    },
                    "noticeTypes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "SMS",
                                "EMAIL",
                                "IN_SITE"
                            ]
                        }
                    },
                    "receiveObjectType": {
                        "type": "string",
                        "enum": [
                            "TENANT",
                            "DEPT",
                            "GROUP",
                            "USER",
                            "POLICY",
                            "TO_POLICY",
                            "ALL"
                        ]
                    },
                    "receiveObjectIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "topPolicyCode": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "templateParams": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Attachment"
                        },
                        "uniqueItems": true
                    },
                    "ekey": {
                        "type": "string"
                    }
                }
            },
            "EventDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "BUSINESS",
                            "SECURITY",
                            "QUOTA",
                            "SYSTEM",
                            "OPERATION",
                            "PROTOCOL",
                            "API",
                            "NOTICE",
                            "OTHER"
                        ]
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "source": {
                        "$ref": "#/components/schemas/EventContent"
                    },
                    "targetId": {
                        "type": "string"
                    },
                    "targetType": {
                        "type": "string"
                    },
                    "targetName": {
                        "type": "string"
                    },
                    "appCode": {
                        "type": "string"
                    },
                    "serviceCode": {
                        "type": "string"
                    },
                    "eventViewUrl": {
                        "type": "string"
                    },
                    "pushStatus": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "PUSHING",
                            "PUSH_SUCCESS",
                            "PUSH_FAIL",
                            "IGNORED"
                        ]
                    },
                    "pushMsg": {
                        "type": "string"
                    },
                    "ekey": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultListEventReceiveChannelVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/EventReceiveChannelVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "EventChannelVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "channelType": {
                        "type": "string",
                        "enum": [
                            "WEBHOOK",
                            "EMAIL",
                            "DINGTALK",
                            "WECHAT"
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    }
                }
            },
            "EventReceiveChannelVo": {
                "type": "object",
                "properties": {
                    "channelType": {
                        "type": "string",
                        "enum": [
                            "WEBHOOK",
                            "EMAIL",
                            "DINGTALK",
                            "WECHAT"
                        ]
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventChannelVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultEventTemplateVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultEventTemplateVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "EventTemplateVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Template id"
                    },
                    "eventCode": {
                        "type": "string",
                        "description": "Event code"
                    },
                    "eventName": {
                        "type": "string",
                        "description": "Event name"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "Event type",
                        "enum": [
                            "BUSINESS",
                            "SECURITY",
                            "QUOTA",
                            "SYSTEM",
                            "OPERATION",
                            "PROTOCOL",
                            "API",
                            "NOTICE",
                            "OTHER"
                        ]
                    },
                    "appCode": {
                        "type": "string",
                        "description": "Event application code"
                    },
                    "targetType": {
                        "type": "string",
                        "description": "Business resource type"
                    },
                    "private0": {
                        "type": "boolean",
                        "description": "Only supported in privatized edition"
                    },
                    "allowedChannelTypes": {
                        "type": "array",
                        "description": "Event receiving channel types",
                        "items": {
                            "type": "string",
                            "enum": [
                                "WEBHOOK",
                                "EMAIL",
                                "DINGTALK",
                                "WECHAT"
                            ]
                        },
                        "uniqueItems": true
                    }
                }
            },
            "PageResultEventTemplateVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/EventTemplateVo"
                        }
                    }
                }
            },
            "ApiLocaleResultEventTemplateVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/EventTemplateVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultEventTemplateCurrentDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/EventTemplateCurrentDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "EventChannelInfoVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "channelType": {
                        "type": "string",
                        "enum": [
                            "WEBHOOK",
                            "EMAIL",
                            "DINGTALK",
                            "WECHAT"
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    }
                }
            },
            "EventTemplateCurrentDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Template id"
                    },
                    "eventCode": {
                        "type": "string",
                        "description": "Event code"
                    },
                    "eventName": {
                        "type": "string",
                        "description": "Event name"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "Event type",
                        "enum": [
                            "BUSINESS",
                            "SECURITY",
                            "QUOTA",
                            "SYSTEM",
                            "OPERATION",
                            "PROTOCOL",
                            "API",
                            "NOTICE",
                            "OTHER"
                        ]
                    },
                    "appCode": {
                        "type": "string",
                        "description": "Event application code"
                    },
                    "targetType": {
                        "type": "string",
                        "description": "Business resource type"
                    },
                    "private0": {
                        "type": "boolean",
                        "description": "Only supported in privatized edition"
                    },
                    "allowedChannelTypes": {
                        "type": "array",
                        "description": "Event receiving channel types",
                        "items": {
                            "type": "string",
                            "enum": [
                                "WEBHOOK",
                                "EMAIL",
                                "DINGTALK",
                                "WECHAT"
                            ]
                        },
                        "uniqueItems": true
                    },
                    "receiveSetting": {
                        "$ref": "#/components/schemas/EventTemplateReceiveVo",
                        "description": "Template receiving setting"
                    },
                    "ekey": {
                        "type": "string"
                    }
                }
            },
            "EventTemplateReceiveVo": {
                "type": "object",
                "properties": {
                    "receivers": {
                        "$ref": "#/components/schemas/EventTemplateReceiverInfoVo"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventChannelInfoVo"
                        }
                    }
                }
            },
            "EventTemplateReceiverInfoVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "receiverTypes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "TESTER",
                                "EXECUTOR",
                                "OWNER",
                                "FOLLOWER",
                                "APP_ADMIN",
                                "OTHER"
                            ]
                        },
                        "uniqueItems": true
                    },
                    "receivers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserName"
                        },
                        "uniqueItems": true
                    },
                    "noticeTypes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "SMS",
                                "EMAIL",
                                "IN_SITE"
                            ]
                        },
                        "uniqueItems": true
                    }
                }
            },
            "ApiLocaleResultPageResultEventTemplateCurrentDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultEventTemplateCurrentDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultEventTemplateCurrentDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/EventTemplateCurrentDetailVo"
                        }
                    }
                }
            },
            "ApiLocaleResultListEventChannelVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/EventChannelVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPageResultEmailDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultEmailDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "EmailDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "templateCode": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string",
                        "enum": [
                            "en",
                            "zh_CN"
                        ]
                    },
                    "bizKey": {
                        "type": "string",
                        "enum": [
                            "EVENT_NOTICE",
                            "SIGNUP",
                            "SIGNIN",
                            "PASSWORD_FORGET",
                            "PASSWORD_UPDATE",
                            "SIGN_CANCEL",
                            "MODIFY_EMAIL",
                            "BIND_EMAIL",
                            "PAY_PASSWORD_UPDATE",
                            "REALNAME_AUTH_SUBMIT",
                            "REALNAME_AUTH_PASSED",
                            "REALNAME_AUDIT_FAILURE",
                            "SYS_EXCEPTION_NOTICE",
                            "SYS_RECOVERY_NOTICE",
                            "SYS_SECURITY_NOTICE",
                            "LICENSE_SENT",
                            "CHANNEL_TEST",
                            "TODO_REALNAME_AUTH",
                            "TODO_BUSINESS_CONSULTATION",
                            "TODO_OFFLINE_SERVICE",
                            "TODO_WORKORDER",
                            "TODO_TRANSFER_CONFIRM",
                            "TODO_INVOICE_CONFIRM",
                            "TODO_WITHDRAW_CONFIRM",
                            "RECHARGE_SUCCESS",
                            "WITHDRAW_SUCCESS",
                            "ORDER_PAY_SUCCESS",
                            "ORDER_PAY_PENDING",
                            "ORDER_PAY_TIMEOUT",
                            "ORDER_TO_EXPIRE",
                            "ORDER_CHANGE_SUCCESS",
                            "WORKORDER_REPLY_REMINDER",
                            "INVOICE_APPLY_SUCCESS",
                            "COUPON_DISTRIBUTION",
                            "COUPON_TO_EXPIRE",
                            "BLOG_SUBSCRIPTION_NOTICE",
                            "TESTING_EXEC_STARTED",
                            "TESTING_EXEC_FINISHED",
                            "TESTING_EXEC_FAILED",
                            "TESTING_TASK_OVERDUE",
                            "INDICATOR_MODIFY_SUBMIT",
                            "INDICATOR_AUDIT_PASSED",
                            "INDICATOR_AUDIT_FAILED"
                        ]
                    },
                    "outId": {
                        "type": "string"
                    },
                    "sendId": {
                        "type": "string"
                    },
                    "emailType": {
                        "type": "string",
                        "enum": [
                            "TEMPLATE",
                            "CUSTOM"
                        ]
                    },
                    "subject": {
                        "type": "string"
                    },
                    "fromAddr": {
                        "type": "string"
                    },
                    "verificationCode": {
                        "type": "boolean"
                    },
                    "verificationCodeValidSecond": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "toAddress": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "ccAddress": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "html": {
                        "type": "boolean"
                    },
                    "sendStatus": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "SUCCESS",
                            "FAILURE"
                        ]
                    },
                    "failureReason": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "templateParams": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Attachment"
                        },
                        "uniqueItems": true
                    },
                    "expectedSendDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "actualSendDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "urgent": {
                        "type": "boolean"
                    },
                    "sendTenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "batch": {
                        "type": "boolean"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultEmailDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/EmailDetailVo"
                        }
                    }
                }
            },
            "ApiLocaleResultEmailDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/EmailDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultEmailTemplateDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/EmailTemplateDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "EmailTemplateDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "verificationCode": {
                        "type": "boolean"
                    },
                    "verificationCodeValidSecond": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "remark": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string",
                        "enum": [
                            "en",
                            "zh_CN"
                        ]
                    }
                }
            },
            "ApiLocaleResultPageResultEmailTemplateDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultEmailTemplateDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultEmailTemplateDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/EmailTemplateDetailVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultServerDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultServerDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultServerDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/ServerDetailVo"
                        }
                    }
                }
            },
            "ServerDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "protocol": {
                        "type": "string",
                        "enum": [
                            "SMTP",
                            "POP3",
                            "IMAP"
                        ]
                    },
                    "remark": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "host": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "startTlsEnabled": {
                        "type": "boolean"
                    },
                    "sslEnabled": {
                        "type": "boolean"
                    },
                    "authEnabled": {
                        "type": "boolean"
                    },
                    "authAccount": {
                        "$ref": "#/components/schemas/AuthAccountTo"
                    },
                    "subjectPrefix": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultServerDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/ServerDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultListLatestEditionVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/LatestEditionVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "LatestEditionVo": {
                "type": "object",
                "properties": {
                    "goodsId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "iconUrl": {
                        "type": "string"
                    },
                    "introduction": {
                        "type": "string"
                    },
                    "information": {
                        "type": "string"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "releaseDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "upgradeable": {
                        "type": "boolean"
                    }
                }
            },
            "ApiLocaleResultInstalledEditionVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/InstalledEditionVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "InstalledEditionVo": {
                "type": "object",
                "properties": {
                    "goodsId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "goodsType": {
                        "type": "string",
                        "enum": [
                            "APPLICATION",
                            "PLUGIN",
                            "PLUGIN_APPLICATION",
                            "RESOURCE_QUOTA"
                        ]
                    },
                    "goodsCode": {
                        "type": "string"
                    },
                    "goodsName": {
                        "type": "string"
                    },
                    "goodsVersion": {
                        "type": "string"
                    },
                    "editionType": {
                        "type": "string",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "provider": {
                        "type": "string"
                    },
                    "issuer": {
                        "type": "string"
                    },
                    "holderId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "holder": {
                        "type": "string"
                    },
                    "licenseNo": {
                        "type": "string"
                    },
                    "info": {
                        "type": "string"
                    },
                    "signature": {
                        "type": "string"
                    },
                    "issuedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "expiredDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultPageResultDeptListVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultDeptListVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "DeptListVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "parentName": {
                        "type": "string"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "hasSubDept": {
                        "type": "boolean"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultDeptListVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/DeptListVo"
                        }
                    }
                }
            },
            "ApiLocaleResultDeptDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/DeptDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "DeptDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "parentName": {
                        "type": "string"
                    },
                    "hasSubDept": {
                        "type": "boolean"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IdAndName"
                        }
                    }
                }
            },
            "ApiLocaleResultDeptNavigationTreeVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/DeptNavigationTreeVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "DeptNavigationTreeVo": {
                "type": "object",
                "properties": {
                    "current": {
                        "$ref": "#/components/schemas/DeptNavigationVo"
                    },
                    "parentChain": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeptNavigationVo"
                        }
                    }
                }
            },
            "DeptNavigationVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ApiLocaleResultDeptSubCount": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/DeptSubCount",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "DeptSubCount": {
                "type": "object",
                "properties": {
                    "subDeptNum": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sunUserNum": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ApiLocaleResultPageResultCountryDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultCountryDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "CountryDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "chineseName": {
                        "type": "string"
                    },
                    "iso2": {
                        "type": "string"
                    },
                    "iso3": {
                        "type": "string"
                    },
                    "abbr": {
                        "type": "string"
                    },
                    "open": {
                        "type": "boolean"
                    }
                }
            },
            "PageResultCountryDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/CountryDetailVo"
                        }
                    }
                }
            },
            "ApiLocaleResultCountryDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/CountryDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultListCountryDistrictDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/CountryDistrictDetailVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "CountryDistrictDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pinYin": {
                        "type": "string"
                    },
                    "parentCode": {
                        "type": "string"
                    },
                    "simpleName": {
                        "type": "string"
                    },
                    "level": {
                        "type": "string",
                        "enum": [
                            "ZERO",
                            "ONE",
                            "TWO",
                            "Three"
                        ]
                    },
                    "countryCode": {
                        "type": "string"
                    },
                    "countryName": {
                        "type": "string"
                    },
                    "cityCode": {
                        "type": "string"
                    },
                    "zipCode": {
                        "type": "string"
                    },
                    "merName": {
                        "type": "string"
                    },
                    "lng": {
                        "type": "number",
                        "format": "float"
                    },
                    "lat": {
                        "type": "number",
                        "format": "float"
                    }
                }
            },
            "ApiLocaleResultCountryDistrictDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/CountryDistrictDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultListCountryDistrictTreeVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/CountryDistrictTreeVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "CountryDistrictTreeVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pinYin": {
                        "type": "string"
                    },
                    "parentCode": {
                        "type": "string"
                    },
                    "simpleName": {
                        "type": "string"
                    },
                    "level": {
                        "type": "string",
                        "enum": [
                            "ZERO",
                            "ONE",
                            "TWO",
                            "Three"
                        ]
                    },
                    "countryCode": {
                        "type": "string"
                    },
                    "countryName": {
                        "type": "string"
                    },
                    "cityCode": {
                        "type": "string"
                    },
                    "zipCode": {
                        "type": "string"
                    },
                    "merName": {
                        "type": "string"
                    },
                    "lng": {
                        "type": "number",
                        "format": "float"
                    },
                    "lat": {
                        "type": "number",
                        "format": "float"
                    }
                }
            },
            "CountryDistrictSearchDto": {
                "type": "object",
                "properties": {
                    "infoScope": {
                        "type": "string",
                        "description": "Query information scope",
                        "enum": [
                            "BASIC",
                            "DETAIL"
                        ]
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Sort field"
                    },
                    "orderSort": {
                        "type": "string",
                        "description": "Sorting method",
                        "enum": [
                            "ASC",
                            "DESC"
                        ]
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchCriteria"
                        },
                        "maxItems": 20,
                        "minItems": 0
                    },
                    "pageNo": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 1, maximum 100000",
                        "maximum": 100000,
                        "minimum": 1
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 10, maximum 2000",
                        "maximum": 2000,
                        "minimum": 1
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pinYin": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultPageResultCountryDistrictDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultCountryDistrictDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultCountryDistrictDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/CountryDistrictDetailVo"
                        }
                    }
                }
            },
            "ClientFindDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultListClientDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/ClientDetailVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ClientDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Client primary key id. Automatically generate a UUID string value if not specified."
                    },
                    "clientId": {
                        "type": "string",
                        "description": "OAuth2 registered client identifier. The clientId uniquely identifies an application to the OAuth2 server, enabling authorization and token requests."
                    },
                    "clientIdIssuedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time at which the client identifier was issued."
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "OAuth2 registered client secret or null if not available. The client secret securely authenticates the application's identity, ensuring only trusted clients access protected resources."
                    },
                    "clientSecretExpiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time at which the client secret expires or null if it does not expire.."
                    },
                    "clientName": {
                        "type": "string",
                        "description": "OAuth2 registered client name."
                    },
                    "clientAuthenticationMethods": {
                        "type": "array",
                        "description": "The authentication method(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "authorizationGrantTypes": {
                        "type": "array",
                        "description": "The authorization grant type(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "redirectUris": {
                        "type": "array",
                        "description": "The redirect URI(s) that the client may use in redirect-based flows.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "postLogoutRedirectUris": {
                        "type": "array",
                        "description": "The post logout redirect URI(s) that the client may use for logout. The post_logout_redirect_uri parameter is used by the client when requesting that the End-User's User Agent be redirected to after a logout has been performed.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "scopes": {
                        "type": "array",
                        "description": "The scope(s) that the client may use.",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true
                    },
                    "clientSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The client configuration settings."
                    },
                    "tokenSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The token configuration settings."
                    },
                    "description": {
                        "type": "string",
                        "description": "Client description."
                    },
                    "enabled": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Client enabled or disabled status."
                    },
                    "platform": {
                        "type": "string",
                        "description": "The platform used by the client.",
                        "enum": [
                            "XCAN_TP",
                            "XCAN_OP",
                            "XCAN_2P",
                            "XCAN_3RD",
                            "XCAN_INNER"
                        ]
                    },
                    "source": {
                        "type": "string",
                        "description": "The registered source of client.",
                        "enum": [
                            "XCAN_TP_SIGNIN",
                            "XCAN_OP_SIGNIN",
                            "XCAN_SYS_INTROSPECT",
                            "XCAN_SYS_TOKEN",
                            "XCAN_2P_SIGNIN"
                        ]
                    },
                    "bizTag": {
                        "type": "string",
                        "description": "The business tag of client."
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The client used by the tenant (id), effective for all tenants when the value is empty.."
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "The client used by the tenant (name)."
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "string"
                    },
                    "lastModifiedByName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultClientDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/ClientDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "IdCardRecognizeDto": {
                "type": "object",
                "properties": {
                    "facePicUrl": {
                        "type": "string",
                        "description": "URL address of personal ID face picture used for identification.",
                        "maxLength": 400,
                        "minLength": 1
                    },
                    "backPicUrl": {
                        "type": "string",
                        "description": "URL address of personal ID background picture used for identification.",
                        "maxLength": 400,
                        "minLength": 1
                    }
                },
                "required": [
                    "backPicUrl",
                    "facePicUrl"
                ]
            },
            "ApiLocaleResultIdCardRecognizeVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/IdCardRecognizeVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "IdCardRecognizeVo": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "sex": {
                        "type": "string"
                    },
                    "ethnicity": {
                        "type": "string"
                    },
                    "birthDate": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "idNumber": {
                        "type": "string"
                    },
                    "issueAuthority": {
                        "type": "string"
                    },
                    "validPeriod": {
                        "type": "string"
                    }
                }
            },
            "BusinessRecognizeDto": {
                "type": "object",
                "properties": {
                    "businessLicensePicUrl": {
                        "type": "string",
                        "description": "URL address of license file used for identification.",
                        "maxLength": 400,
                        "minLength": 1
                    }
                },
                "required": [
                    "businessLicensePicUrl"
                ]
            },
            "ApiLocaleResultBusinessRecognizeVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/BusinessRecognizeVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "BusinessRecognizeVo": {
                "type": "object",
                "properties": {
                    "creditCode": {
                        "type": "string"
                    },
                    "companyName": {
                        "type": "string"
                    },
                    "companyType": {
                        "type": "string"
                    },
                    "businessAddress": {
                        "type": "string"
                    },
                    "legalPerson": {
                        "type": "string"
                    },
                    "registeredCapital": {
                        "type": "string"
                    },
                    "registrationDate": {
                        "type": "string"
                    },
                    "validPeriod": {
                        "type": "string"
                    },
                    "validFromDate": {
                        "type": "string"
                    },
                    "validToDate": {
                        "type": "string"
                    }
                }
            },
            "ApiLocaleResultPageResultPolicyUnauthVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultPolicyUnauthVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultPolicyUnauthVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/PolicyUnauthVo"
                        }
                    }
                }
            },
            "PolicyUnauthVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PRE_DEFINED",
                            "USER_DEFINED"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "default0": {
                        "type": "boolean"
                    },
                    "grantStage": {
                        "type": "string",
                        "enum": [
                            "MANUAL",
                            "SIGNUP_SUCCESS"
                        ]
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appName": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "AuthPolicyFindDto": {
                "type": "object",
                "properties": {
                    "infoScope": {
                        "type": "string",
                        "description": "Query information scope",
                        "enum": [
                            "BASIC",
                            "DETAIL"
                        ]
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Sort field"
                    },
                    "orderSort": {
                        "type": "string",
                        "description": "Sorting method",
                        "enum": [
                            "ASC",
                            "DESC"
                        ]
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchCriteria"
                        },
                        "maxItems": 20,
                        "minItems": 0
                    },
                    "pageNo": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 1, maximum 100000",
                        "maximum": 100000,
                        "minimum": 1
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 10, maximum 2000",
                        "maximum": 2000,
                        "minimum": 1
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PRE_DEFINED",
                            "USER_DEFINED"
                        ]
                    },
                    "default0": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "ignoreAuthOrg": {
                        "type": "boolean"
                    },
                    "adminAssociated": {
                        "type": "boolean"
                    },
                    "grantStage": {
                        "type": "string",
                        "enum": [
                            "MANUAL",
                            "SIGNUP_SUCCESS"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultPageResultAuthPolicyVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAuthPolicyVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AuthPolicyVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PRE_DEFINED",
                            "USER_DEFINED"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "default0": {
                        "type": "boolean"
                    },
                    "grantStage": {
                        "type": "string",
                        "enum": [
                            "MANUAL",
                            "SIGNUP_SUCCESS"
                        ]
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appName": {
                        "type": "string"
                    },
                    "appVersion": {
                        "type": "string"
                    },
                    "appEditionType": {
                        "type": "string",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "authBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "authByName": {
                        "type": "string"
                    },
                    "authDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultAuthPolicyVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AuthPolicyVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultAuthPolicyAssociatedVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAuthPolicyAssociatedVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AuthPolicyAssociatedVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PRE_DEFINED",
                            "USER_DEFINED"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "default0": {
                        "type": "boolean"
                    },
                    "currentDefault": {
                        "type": "boolean"
                    },
                    "openAuth": {
                        "type": "boolean"
                    },
                    "grantScope": {
                        "type": "string",
                        "enum": [
                            "TENANT_SYS_ADMIN",
                            "TENANT_ALL_USER",
                            "TENANT_ORG"
                        ]
                    },
                    "grantStage": {
                        "type": "string",
                        "enum": [
                            "MANUAL",
                            "SIGNUP_SUCCESS"
                        ]
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appName": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "authBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "authByName": {
                        "type": "string"
                    },
                    "authDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "orgId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "orgType": {
                        "type": "string",
                        "enum": [
                            "TENANT",
                            "USER",
                            "DEPT",
                            "GROUP"
                        ]
                    },
                    "orgName": {
                        "type": "string"
                    }
                }
            },
            "PageResultAuthPolicyAssociatedVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AuthPolicyAssociatedVo"
                        }
                    }
                }
            },
            "ApiLocaleResultListAppVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/AppVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "showName": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "CLOUD_APP",
                            "BASE_APP",
                            "OP_APP"
                        ]
                    },
                    "editionType": {
                        "type": "string",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "string"
                    },
                    "openStage": {
                        "type": "string",
                        "enum": [
                            "SIGNUP",
                            "AUTH_PASSED",
                            "OPEN_SUCCESS"
                        ]
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultAuthAppVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/AuthAppVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AuthAppFuncVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "showName": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "hasAuth": {
                        "type": "boolean"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiInfoVo"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AppTagInfoVo"
                        }
                    }
                }
            },
            "AuthAppVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "showName": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "CLOUD_APP",
                            "BASE_APP",
                            "OP_APP"
                        ]
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiInfoVo"
                        }
                    },
                    "appFuncs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthAppFuncVo"
                        }
                    }
                }
            },
            "ApiLocaleResultAuthAppTreeVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/AuthAppTreeVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AuthAppFuncTreeVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "showName": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "hasAuth": {
                        "type": "boolean"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiInfoVo"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AppTagInfoVo"
                        }
                    },
                    "sequence0": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "AuthAppTreeVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "showName": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "CLOUD_APP",
                            "BASE_APP",
                            "OP_APP"
                        ]
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiInfoVo"
                        }
                    },
                    "appFuncs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthAppFuncTreeVo"
                        }
                    }
                }
            },
            "ApiLocaleResultListUserTokenInfoVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/UserTokenInfoVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "UserTokenInfoVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User access token id."
                    },
                    "name": {
                        "type": "string",
                        "description": "User access token name."
                    },
                    "expiredDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "User access token expired date."
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64",
                        "description": "User access token creator."
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "User access token creation date."
                    }
                }
            },
            "AuthUserPasswordCheckDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Check password user id.",
                        "example": 1
                    },
                    "password": {
                        "type": "string",
                        "description": "Check password value.",
                        "example": "xcan@123"
                    }
                },
                "required": [
                    "id",
                    "password"
                ]
            },
            "CurrentAuthUserPasswordCheckDto": {
                "type": "object",
                "properties": {
                    "password": {
                        "type": "string",
                        "description": "Current user password."
                    }
                },
                "required": [
                    "password"
                ]
            },
            "ApiLocaleResultListAuthPolicyFuncVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/AuthPolicyFuncVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AuthPolicyFuncVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "showName": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiInfoVo"
                        }
                    }
                }
            },
            "ApiLocaleResultListAuthPolicyFuncTreeVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/AuthPolicyFuncTreeVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AuthPolicyFuncTreeVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "showName": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiInfoVo"
                        }
                    },
                    "sequence0": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ApiLocaleResultListAuthAppDefaultPolicyVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/AuthAppDefaultPolicyVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AuthAppDefaultPolicyVo": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appCode": {
                        "type": "string"
                    },
                    "appType": {
                        "type": "string",
                        "enum": [
                            "CLOUD_APP",
                            "BASE_APP",
                            "OP_APP"
                        ]
                    },
                    "appName": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "defaultPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthDefaultPolicyVo"
                        }
                    }
                }
            },
            "AuthDefaultPolicyVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PRE_DEFINED",
                            "USER_DEFINED"
                        ]
                    },
                    "currentDefault": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "AuthPolicyUserFindDto": {
                "type": "object",
                "properties": {
                    "infoScope": {
                        "type": "string",
                        "description": "Query information scope",
                        "enum": [
                            "BASIC",
                            "DETAIL"
                        ]
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Sort field"
                    },
                    "orderSort": {
                        "type": "string",
                        "description": "Sorting method",
                        "enum": [
                            "ASC",
                            "DESC"
                        ]
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchCriteria"
                        },
                        "maxItems": 20,
                        "minItems": 0
                    },
                    "pageNo": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 1, maximum 100000",
                        "maximum": 100000,
                        "minimum": 1
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 10, maximum 2000",
                        "maximum": 2000,
                        "minimum": 1
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "username": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "mobile": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "PLATFORM_SIGNUP",
                            "INVITATION_CODE_SIGNUP",
                            "BACKGROUND_SIGNUP",
                            "BACKGROUND_ADDED",
                            "THIRD_PARTY_LOGIN",
                            "LDAP_SYNCHRONIZE"
                        ]
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "sysAdmin": {
                        "type": "boolean"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultAuthPolicyDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/AuthPolicyDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AuthPolicyDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PRE_DEFINED",
                            "USER_DEFINED"
                        ]
                    },
                    "default0": {
                        "type": "boolean"
                    },
                    "grantStage": {
                        "type": "string",
                        "enum": [
                            "MANUAL",
                            "SIGNUP_SUCCESS"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appName": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultPageResultAppOpenVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppOpenVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppOpenVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "appCode": {
                        "type": "string"
                    },
                    "appName": {
                        "type": "string"
                    },
                    "appShowName": {
                        "type": "string"
                    },
                    "appIcon": {
                        "type": "string"
                    },
                    "appType": {
                        "type": "string",
                        "enum": [
                            "CLOUD_APP",
                            "BASE_APP",
                            "OP_APP"
                        ]
                    },
                    "editionType": {
                        "type": "string",
                        "enum": [
                            "CLOUD_SERVICE",
                            "COMMUNITY",
                            "ENTERPRISE",
                            "DATACENTER"
                        ]
                    },
                    "appUrl": {
                        "type": "string"
                    },
                    "appSequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "appVersion": {
                        "type": "string"
                    },
                    "appTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AppTagInfoVo"
                        }
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Open application user id."
                    },
                    "userName": {
                        "type": "string",
                        "description": "Open application user name."
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Open application tenant id."
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "Open application tenant name."
                    },
                    "expirationDeleted": {
                        "type": "boolean",
                        "description": "Open expiration deleted flag."
                    },
                    "opClientOpen": {
                        "type": "boolean",
                        "description": "Operation client open flag."
                    },
                    "openDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Open application date."
                    },
                    "expirationDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Open expiration date."
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Open creation date."
                    }
                }
            },
            "PageResultAppOpenVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppOpenVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultAppVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultAppVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultAppTagTargetVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppTagTargetVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppTagTargetVo": {
                "type": "object",
                "properties": {
                    "tagId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tagName": {
                        "type": "string"
                    },
                    "targetId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "targetType": {
                        "type": "string",
                        "enum": [
                            "APP",
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "targetName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "targetCreatedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "targetCreatedByName": {
                        "type": "string"
                    },
                    "targetCreatedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultAppTagTargetVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppTagTargetVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultAppUnauthUserVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppUnauthUserVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppUnauthUserVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    }
                }
            },
            "PageResultAppUnauthUserVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppUnauthUserVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultAppUnauthTenantVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppUnauthTenantVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppUnauthTenantVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "no": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PERSONAL",
                            "ENTERPRISE",
                            "GOVERNMENT",
                            "UNKNOWN"
                        ]
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "PLATFORM_SIGNUP",
                            "BACKGROUND_SIGNUP",
                            "THIRD_PARTY_LOGIN"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "DISABLED",
                            "CANCELLING",
                            "CANCELED",
                            "ENABLED"
                        ]
                    },
                    "realNameStatus": {
                        "type": "string",
                        "enum": [
                            "NOT_SUBMITTED",
                            "AUDITING",
                            "AUDITED",
                            "FAILED_AUDIT"
                        ]
                    },
                    "locked": {
                        "type": "boolean"
                    }
                }
            },
            "PageResultAppUnauthTenantVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppUnauthTenantVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultAppAuthPolicyVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppAuthPolicyVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppAuthPolicyVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PRE_DEFINED",
                            "USER_DEFINED"
                        ]
                    },
                    "default0": {
                        "type": "boolean"
                    },
                    "grantStage": {
                        "type": "string",
                        "enum": [
                            "MANUAL",
                            "SIGNUP_SUCCESS"
                        ]
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                }
            },
            "PageResultAppAuthPolicyVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppAuthPolicyVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultAppUnauthGroupVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppUnauthGroupVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppUnauthGroupVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "BACKGROUND_ADDED",
                            "LDAP_SYNCHRONIZE"
                        ]
                    }
                }
            },
            "PageResultAppUnauthGroupVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppUnauthGroupVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultAppUnauthDeptVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppUnauthDeptVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppUnauthDeptVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "PageResultAppUnauthDeptVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppUnauthDeptVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultAppPolicyVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppPolicyVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppPolicyVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PRE_DEFINED",
                            "USER_DEFINED"
                        ]
                    },
                    "default0": {
                        "type": "boolean"
                    },
                    "grantScope": {
                        "type": "string",
                        "enum": [
                            "TENANT_SYS_ADMIN",
                            "TENANT_ALL_USER",
                            "TENANT_ORG"
                        ]
                    },
                    "grantStage": {
                        "type": "string",
                        "enum": [
                            "MANUAL",
                            "SIGNUP_SUCCESS"
                        ]
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tenantName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "PageResultAppPolicyVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppPolicyVo"
                        }
                    }
                }
            },
            "ApiLocaleResultListAppFuncVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/AppFuncVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppFuncVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "showName": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "authCtrl": {
                        "type": "boolean",
                        "description": "Whether to authorize control"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AppTagInfoVo"
                        }
                    }
                }
            },
            "ApiLocaleResultListAppFuncTreeVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/AppFuncTreeVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppFuncTreeVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "showName": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "authCtrl": {
                        "type": "boolean",
                        "description": "Whether to authorize control."
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AppTagInfoVo"
                        }
                    },
                    "hit": {
                        "type": "boolean"
                    }
                }
            },
            "ApiLocaleResultPageResultAppAuthUserVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppAuthUserVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppAuthUserVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "globalAuth": {
                        "type": "boolean"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthPolicyOrgVo"
                        }
                    }
                }
            },
            "PageResultAppAuthUserVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppAuthUserVo"
                        }
                    }
                }
            },
            "ApiLocaleResultPageResultAppAuthTenantVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppAuthTenantVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppAuthTenantVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "no": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PERSONAL",
                            "ENTERPRISE",
                            "GOVERNMENT",
                            "UNKNOWN"
                        ]
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "PLATFORM_SIGNUP",
                            "BACKGROUND_SIGNUP",
                            "THIRD_PARTY_LOGIN"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "DISABLED",
                            "CANCELLING",
                            "CANCELED",
                            "ENABLED"
                        ]
                    },
                    "realNameStatus": {
                        "type": "string",
                        "enum": [
                            "NOT_SUBMITTED",
                            "AUDITING",
                            "AUDITED",
                            "FAILED_AUDIT"
                        ]
                    },
                    "locked": {
                        "type": "boolean"
                    }
                }
            },
            "PageResultAppAuthTenantVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppAuthTenantVo"
                        }
                    }
                }
            },
            "AuthAppOrgSearchDto": {
                "type": "object",
                "properties": {
                    "infoScope": {
                        "type": "string",
                        "description": "Query information scope",
                        "enum": [
                            "BASIC",
                            "DETAIL"
                        ]
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "Sort field"
                    },
                    "orderSort": {
                        "type": "string",
                        "description": "Sorting method",
                        "enum": [
                            "ASC",
                            "DESC"
                        ]
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchCriteria"
                        },
                        "maxItems": 20,
                        "minItems": 0
                    },
                    "pageNo": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 1, maximum 100000",
                        "maximum": 100000,
                        "minimum": 1
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page data size, default 10, maximum 2000",
                        "maximum": 2000,
                        "minimum": 1
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Organization (user, group or department) id."
                    },
                    "name": {
                        "type": "string",
                        "description": "Organization (user, group or department) name."
                    }
                }
            },
            "ApiLocaleResultPageResultAppAuthGroupVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppAuthGroupVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppAuthGroupVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "source": {
                        "type": "string",
                        "enum": [
                            "BACKGROUND_ADDED",
                            "LDAP_SYNCHRONIZE"
                        ]
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthPolicyOrgVo"
                        }
                    }
                }
            },
            "PageResultAppAuthGroupVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppAuthGroupVo"
                        }
                    }
                }
            },
            "ApiLocaleResultListAppAuthPolicyVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "array",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. ",
                        "items": {
                            "$ref": "#/components/schemas/AppAuthPolicyVo"
                        }
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "ApiLocaleResultPageResultAppAuthDeptVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultAppAuthDeptVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppAuthDeptVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthPolicyOrgVo"
                        }
                    }
                }
            },
            "PageResultAppAuthDeptVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/AppAuthDeptVo"
                        }
                    }
                }
            },
            "ApiLocaleResultAppFuncDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/AppFuncDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppFuncDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "showName": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "MENU",
                            "BUTTON",
                            "PANEL"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "authCtrl": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "appId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiInfoVo"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AppTagInfoVo"
                        }
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "clientName": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiDetailVo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "operationId": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string",
                        "enum": [
                            "GET",
                            "HEAD",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "TRACE"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "API",
                            "OPEN_API",
                            "OPEN_API_2P",
                            "DOOR_API",
                            "PUB_API",
                            "VIEW",
                            "PUB_VIEW"
                        ]
                    },
                    "description": {
                        "type": "string"
                    },
                    "resourceName": {
                        "type": "string"
                    },
                    "resourceDescription": {
                        "type": "string"
                    },
                    "serviceId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "serviceCode": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "createdBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdByName": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModifiedName": {
                        "type": "string"
                    },
                    "lastModifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ApiLocaleResultPageResultApiDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/PageResultApiDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "PageResultApiDetailVo": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Total number",
                        "example": 10
                    },
                    "list": {
                        "type": "array",
                        "description": "Page data",
                        "items": {
                            "$ref": "#/components/schemas/ApiDetailVo"
                        }
                    }
                }
            },
            "ApiLocaleResultApiDetailVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/ApiDetailVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "Aggregate": {
                "type": "object",
                "properties": {
                    "function": {
                        "type": "string",
                        "description": "Database aggregate function.",
                        "enum": [
                            "AVG",
                            "SUM",
                            "MAX",
                            "MIN",
                            "COUNT"
                        ]
                    },
                    "column": {
                        "type": "string",
                        "description": "Database aggregate column name.",
                        "minLength": 1
                    }
                },
                "required": [
                    "column",
                    "function"
                ]
            },
            "CustomizationSummaryDto": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Summary project id."
                    },
                    "closeMultiTenantCtrl": {
                        "type": "boolean",
                        "description": "Turn off multi tenant control, summary all tenants when true.",
                        "example": false
                    },
                    "name": {
                        "type": "string",
                        "description": "Summary resource name.",
                        "minLength": 1
                    },
                    "groupBy": {
                        "type": "string",
                        "description": "Summary group type.",
                        "enum": [
                            "DATE",
                            "STATUS"
                        ]
                    },
                    "groupByColumns": {
                        "type": "array",
                        "description": "Grouping statistics column count, supporting a maximum of `5` columns.",
                        "items": {
                            "type": "string"
                        },
                        "maxItems": 5,
                        "minItems": 0
                    },
                    "dateRangeType": {
                        "type": "string",
                        "description": "Supported date statistics range.",
                        "enum": [
                            "HOUR",
                            "DAY",
                            "WEEK",
                            "MONTH",
                            "YEAR"
                        ]
                    },
                    "aggregates": {
                        "type": "array",
                        "description": "Aggregate function and column configuration, supporting a maximum of `10` columns.",
                        "items": {
                            "$ref": "#/components/schemas/Aggregate"
                        },
                        "maxItems": 10,
                        "minItems": 0
                    },
                    "filters": {
                        "type": "array",
                        "description": "Dynamic filter and search conditions, max 20",
                        "items": {
                            "$ref": "#/components/schemas/SearchCriteria"
                        },
                        "maxItems": 20,
                        "minItems": 0
                    }
                },
                "required": [
                    "name"
                ]
            },
            "ApiLocaleResultSummaryQueryDefinitionVo": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "$ref": "#/components/schemas/SummaryQueryDefinitionVo",
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "SummaryQueryDefinitionVo": {
                "type": "object",
                "properties": {
                    "summaryQuery": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SummaryQueryVo"
                        }
                    },
                    "groupBys": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "DATE",
                                "STATUS"
                            ]
                        }
                    },
                    "dateRangeTypes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "HOUR",
                                "DAY",
                                "WEEK",
                                "MONTH",
                                "YEAR"
                            ]
                        }
                    }
                }
            },
            "SummaryQueryVo": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "table": {
                        "type": "string"
                    },
                    "hasSysAdmin": {
                        "type": "boolean"
                    },
                    "hasAnyAuthority": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hasAuthority": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "topAuthority": {
                        "type": "string"
                    },
                    "groupByColumns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "aggregateColumns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ApiLocaleResultMapStringObject": {
                "type": "object",
                "description": "The API response result of supporting international message.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ApiResult"
                    }
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "This parameter represents the `business status code` of the API response.\nIt is used to indicate the success or failure of the API request. Default code value:\n***S***: A code of `S` indicate success;\n***E0***: Protocol exception could indicate a bad request;\n***E1***: Business exception could indicate a bad business handle;\n***E2***: System exception could signify a server error;\n***E3***: Quota exception could indicate unauthorized quota or insufficient quota;\n***XXX***: Custom business status codes for content usually require secondary confirmation or processing by the caller."
                    },
                    "msg": {
                        "type": "string",
                        "description": "This parameter contains a message that provides additional context or information about the API response. This could be a success message, an error description, or any other relevant information that helps the client understand the result of the request."
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter holds the actual data returned by the API, which is typically the result or exception trace of the requested operation. "
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "This parameter represents the server's processing time for the request, formatted as a date-time string. This information can be useful for clients to log when the request was processed or for troubleshooting purposes, as it indicates how long the server took to respond."
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "This parameter is an extensible map that can hold additional information related to the response that doesn't fit into the predefined fields. It allows for flexibility in the API response by enabling the inclusion of extra data that may be useful for the client."
                    }
                }
            },
            "AppOpenCancelDto": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Open application id."
                    }
                },
                "required": [
                    "appId"
                ]
            },
            "AuthOrgPolicyAuthDeleteDto": {
                "type": "object",
                "properties": {
                    "orgIds": {
                        "type": "array",
                        "description": "Need to delete authorized organization ids.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 200,
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "policyIds": {
                        "type": "array",
                        "description": "Delete policy ids. When it is empty, all associated authorizations will be deleted, excluding those of other organizations.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "maxItems": 200,
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "orgIds"
                ]
            }
        },
        "securitySchemes": {
            "UserHttpBearer": {
                "type": "http",
                "description": "Use existing opaque tokens for authentication",
                "scheme": "bearer",
                "bearerFormat": "opaque"
            },
            "UserOAuth2Bearer": {
                "type": "oauth2",
                "description": "Use OAuth2 opaque tokens for authentication",
                "scheme": "bearer",
                "bearerFormat": "opaque",
                "flows": {
                    "password": {
                        "tokenUrl": " http://localhost:9090/oauth2/token",
                        "scopes": {
                            "read": "Read Permission",
                            "write": "Write Permission"
                        }
                    }
                }
            }
        }
    }
}